
KEY_LCD_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee38  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800f0d8  0800f0d8  0001f0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5b4  0800f5b4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5b4  0800f5b4  0001f5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5bc  0800f5bc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5bc  0800f5bc  0001f5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5c0  0800f5c0  0001f5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0800f5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  240001f0  0800f7b4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240009b8  0800f7b4  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031c46  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c10  00000000  00000000  00051e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cf8  00000000  00000000  00056a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b80  00000000  00000000  00058770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e6ff  00000000  00000000  0005a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d67  00000000  00000000  000989ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019bee2  00000000  00000000  000bc756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00258638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d70  00000000  00000000  0025868c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f0c0 	.word	0x0800f0c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800f0c0 	.word	0x0800f0c0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd(char cmd)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	f023 030f 	bic.w	r3, r3, #15
 80007cc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	011b      	lsls	r3, r3, #4
 80007d2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80007d4:	7bfb      	ldrb	r3, [r7, #15]
 80007d6:	f043 030c 	orr.w	r3, r3, #12
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	f043 030c 	orr.w	r3, r3, #12
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80007fc:	f107 0208 	add.w	r2, r7, #8
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2304      	movs	r3, #4
 8000806:	214e      	movs	r1, #78	; 0x4e
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <lcd_send_cmd+0x5c>)
 800080a:	f004 ff37 	bl	800567c <HAL_I2C_Master_Transmit>
}
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	24000284 	.word	0x24000284

0800081c <lcd_send_data>:

void lcd_send_data(char data)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af02      	add	r7, sp, #8
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f023 030f 	bic.w	r3, r3, #15
 800082c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000834:	7bfb      	ldrb	r3, [r7, #15]
 8000836:	f043 030d 	orr.w	r3, r3, #13
 800083a:	b2db      	uxtb	r3, r3
 800083c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800083e:	7bfb      	ldrb	r3, [r7, #15]
 8000840:	f043 0309 	orr.w	r3, r3, #9
 8000844:	b2db      	uxtb	r3, r3
 8000846:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	f043 030d 	orr.w	r3, r3, #13
 800084e:	b2db      	uxtb	r3, r3
 8000850:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	f043 0309 	orr.w	r3, r3, #9
 8000858:	b2db      	uxtb	r3, r3
 800085a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800085c:	f107 0208 	add.w	r2, r7, #8
 8000860:	2364      	movs	r3, #100	; 0x64
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2304      	movs	r3, #4
 8000866:	214e      	movs	r1, #78	; 0x4e
 8000868:	4803      	ldr	r0, [pc, #12]	; (8000878 <lcd_send_data+0x5c>)
 800086a:	f004 ff07 	bl	800567c <HAL_I2C_Master_Transmit>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	24000284 	.word	0x24000284

0800087c <lcd_clear>:

void lcd_clear(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000882:	2080      	movs	r0, #128	; 0x80
 8000884:	f7ff ff9a 	bl	80007bc <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	e005      	b.n	800089a <lcd_clear+0x1e>
	{
		lcd_send_data(' ');
 800088e:	2020      	movs	r0, #32
 8000890:	f7ff ffc4 	bl	800081c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3301      	adds	r3, #1
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b45      	cmp	r3, #69	; 0x45
 800089e:	ddf6      	ble.n	800088e <lcd_clear+0x12>
	}
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80008ae:	2032      	movs	r0, #50	; 0x32
 80008b0:	f001 fd7a 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008b4:	2030      	movs	r0, #48	; 0x30
 80008b6:	f7ff ff81 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80008ba:	2005      	movs	r0, #5
 80008bc:	f001 fd74 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008c0:	2030      	movs	r0, #48	; 0x30
 80008c2:	f7ff ff7b 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80008c6:	2001      	movs	r0, #1
 80008c8:	f001 fd6e 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80008cc:	2030      	movs	r0, #48	; 0x30
 80008ce:	f7ff ff75 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(10);
 80008d2:	200a      	movs	r0, #10
 80008d4:	f001 fd68 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80008d8:	2020      	movs	r0, #32
 80008da:	f7ff ff6f 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(10);
 80008de:	200a      	movs	r0, #10
 80008e0:	f001 fd62 	bl	80023a8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80008e4:	2028      	movs	r0, #40	; 0x28
 80008e6:	f7ff ff69 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 80008ea:	2001      	movs	r0, #1
 80008ec:	f001 fd5c 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80008f0:	2008      	movs	r0, #8
 80008f2:	f7ff ff63 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f001 fd56 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ff5d 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f001 fd50 	bl	80023a8 <HAL_Delay>
	HAL_Delay(1);
 8000908:	2001      	movs	r0, #1
 800090a:	f001 fd4d 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800090e:	2006      	movs	r0, #6
 8000910:	f7ff ff54 	bl	80007bc <lcd_send_cmd>
	HAL_Delay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f001 fd47 	bl	80023a8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800091a:	200c      	movs	r0, #12
 800091c:	f7ff ff4e 	bl	80007bc <lcd_send_cmd>
}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}

08000924 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800092c:	e006      	b.n	800093c <lcd_send_string+0x18>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	607a      	str	r2, [r7, #4]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff70 	bl	800081c <lcd_send_data>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f4      	bne.n	800092e <lcd_send_string+0xa>
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800095a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800095c:	bf00      	nop
 800095e:	4ba4      	ldr	r3, [pc, #656]	; (8000bf0 <main+0x2a0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000966:	2b00      	cmp	r3, #0
 8000968:	d004      	beq.n	8000974 <main+0x24>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	1e5a      	subs	r2, r3, #1
 800096e:	607a      	str	r2, [r7, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	dcf4      	bgt.n	800095e <main+0xe>
  if ( timeout < 0 )
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	da01      	bge.n	800097e <main+0x2e>
  {
  Error_Handler();
 800097a:	f001 f88d 	bl	8001a98 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f001 fc81 	bl	8002284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f967 	bl	8000c54 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000986:	4b9a      	ldr	r3, [pc, #616]	; (8000bf0 <main+0x2a0>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	4a98      	ldr	r2, [pc, #608]	; (8000bf0 <main+0x2a0>)
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000996:	4b96      	ldr	r3, [pc, #600]	; (8000bf0 <main+0x2a0>)
 8000998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009a4:	2000      	movs	r0, #0
 80009a6:	f004 fdab 	bl	8005500 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009aa:	2100      	movs	r1, #0
 80009ac:	2000      	movs	r0, #0
 80009ae:	f004 fdc1 	bl	8005534 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009b6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009b8:	bf00      	nop
 80009ba:	4b8d      	ldr	r3, [pc, #564]	; (8000bf0 <main+0x2a0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d104      	bne.n	80009d0 <main+0x80>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	1e5a      	subs	r2, r3, #1
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dcf4      	bgt.n	80009ba <main+0x6a>
if ( timeout < 0 )
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da01      	bge.n	80009da <main+0x8a>
{
Error_Handler();
 80009d6:	f001 f85f 	bl	8001a98 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f000 fc39 	bl	8001250 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009de:	f000 fbe5 	bl	80011ac <MX_USB_OTG_FS_PCD_Init>
  MX_TIM5_Init();
 80009e2:	f000 fb25 	bl	8001030 <MX_TIM5_Init>
  MX_I2C4_Init();
 80009e6:	f000 fa37 	bl	8000e58 <MX_I2C4_Init>
  MX_DMA_Init();
 80009ea:	f000 fc11 	bl	8001210 <MX_DMA_Init>
  MX_ADC1_Init();
 80009ee:	f000 f9b9 	bl	8000d64 <MX_ADC1_Init>
  MX_TIM13_Init();
 80009f2:	f000 fb6b 	bl	80010cc <MX_TIM13_Init>
  MX_TIM1_Init();
 80009f6:	f000 fa6f 	bl	8000ed8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80009fa:	f000 fb8b 	bl	8001114 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 80009fe:	f7ff ff54 	bl	80008aa <lcd_init>
	MPU6050_init();
 8000a02:	f000 fd1d 	bl	8001440 <MPU6050_init>
	TIM1->CCR2 = 100;
 8000a06:	4b7b      	ldr	r3, [pc, #492]	; (8000bf4 <main+0x2a4>)
 8000a08:	2264      	movs	r2, #100	; 0x64
 8000a0a:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	487a      	ldr	r0, [pc, #488]	; (8000bf8 <main+0x2a8>)
 8000a10:	f009 f808 	bl	8009a24 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim13);
 8000a14:	4879      	ldr	r0, [pc, #484]	; (8000bfc <main+0x2ac>)
 8000a16:	f008 ff33 	bl	8009880 <HAL_TIM_Base_Start_IT>
	m1 = (RPM_MAX - RPM_MIN)/(TEMP_MAX-TEMP_MIN);
 8000a1a:	4b79      	ldr	r3, [pc, #484]	; (8000c00 <main+0x2b0>)
 8000a1c:	4a79      	ldr	r2, [pc, #484]	; (8000c04 <main+0x2b4>)
 8000a1e:	601a      	str	r2, [r3, #0]
	b1 = -m1*TEMP_MIN+RPM_MIN;
 8000a20:	4b77      	ldr	r3, [pc, #476]	; (8000c00 <main+0x2b0>)
 8000a22:	edd3 7a00 	vldr	s15, [r3]
 8000a26:	eef1 7a67 	vneg.f32	s15, s15
 8000a2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a2e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8000bd8 <main+0x288>
 8000a32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a36:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8000be0 <main+0x290>
 8000a3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a42:	4b71      	ldr	r3, [pc, #452]	; (8000c08 <main+0x2b8>)
 8000a44:	edc3 7a00 	vstr	s15, [r3]
	m2 = (PWM_MAX - PWM_MIN)/(RPM_MAX - RPM_MIN);
 8000a48:	4b70      	ldr	r3, [pc, #448]	; (8000c0c <main+0x2bc>)
 8000a4a:	f04f 0200 	mov.w	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
	b2 = -m2*RPM_MIN+PWM_MIN;
 8000a50:	4b6e      	ldr	r3, [pc, #440]	; (8000c0c <main+0x2bc>)
 8000a52:	edd3 7a00 	vldr	s15, [r3]
 8000a56:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000c10 <main+0x2c0>
 8000a5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8000c14 <main+0x2c4>
 8000a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a66:	4b6c      	ldr	r3, [pc, #432]	; (8000c18 <main+0x2c8>)
 8000a68:	edc3 7a00 	vstr	s15, [r3]

	m_t = (Sensor_R_MAX - Sensor_R_MIN)/(ADC_R_MAX - ADC_R_MIN);
 8000a6c:	4b6b      	ldr	r3, [pc, #428]	; (8000c1c <main+0x2cc>)
 8000a6e:	4a6c      	ldr	r2, [pc, #432]	; (8000c20 <main+0x2d0>)
 8000a70:	601a      	str	r2, [r3, #0]
	b_t = -m_t*ADC_R_MIN + Sensor_R_MIN;
 8000a72:	4b6a      	ldr	r3, [pc, #424]	; (8000c1c <main+0x2cc>)
 8000a74:	edd3 7a00 	vldr	s15, [r3]
 8000a78:	eef1 7a67 	vneg.f32	s15, s15
 8000a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a80:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8000be8 <main+0x298>
 8000a84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a88:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8000a8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a94:	4b63      	ldr	r3, [pc, #396]	; (8000c24 <main+0x2d4>)
 8000a96:	edc3 7a00 	vstr	s15, [r3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		key = leerTeclado();
 8000a9a:	f000 fd8b 	bl	80015b4 <leerTeclado>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	4b61      	ldr	r3, [pc, #388]	; (8000c28 <main+0x2d8>)
 8000aa4:	701a      	strb	r2, [r3, #0]
		if (key!= 0x16)
 8000aa6:	4b60      	ldr	r3, [pc, #384]	; (8000c28 <main+0x2d8>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b16      	cmp	r3, #22
 8000aac:	d004      	beq.n	8000ab8 <main+0x168>
		{
		procesarTeclado(key);
 8000aae:	4b5e      	ldr	r3, [pc, #376]	; (8000c28 <main+0x2d8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 ff00 	bl	80018b8 <procesarTeclado>
		//lcd_send_string(temp_buff[0]);
		}
		HAL_Delay(200);
 8000ab8:	20c8      	movs	r0, #200	; 0xc8
 8000aba:	f001 fc75 	bl	80023a8 <HAL_Delay>

		err_RPM[0] = err_RPM[1];
 8000abe:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <main+0x2dc>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	4a5a      	ldr	r2, [pc, #360]	; (8000c2c <main+0x2dc>)
 8000ac4:	6013      	str	r3, [r2, #0]
		err_RPM[1] = TMP_2_RPM(temps[1] - temps[0]);
 8000ac6:	4b5a      	ldr	r3, [pc, #360]	; (8000c30 <main+0x2e0>)
 8000ac8:	ed93 7a01 	vldr	s14, [r3, #4]
 8000acc:	4b58      	ldr	r3, [pc, #352]	; (8000c30 <main+0x2e0>)
 8000ace:	edd3 7a00 	vldr	s15, [r3]
 8000ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8000ada:	f000 fe63 	bl	80017a4 <TMP_2_RPM>
 8000ade:	eef0 7a40 	vmov.f32	s15, s0
 8000ae2:	4b52      	ldr	r3, [pc, #328]	; (8000c2c <main+0x2dc>)
 8000ae4:	edc3 7a01 	vstr	s15, [r3, #4]
		RPMS[1] = RPMS[1] + K_pr*err_RPM[1] + (K_d/FREQ_M)*(err_RPM[1]-err_RPM[0]);
 8000ae8:	4b52      	ldr	r3, [pc, #328]	; (8000c34 <main+0x2e4>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	ee07 3a90 	vmov	s15, r3
 8000af0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000af4:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <main+0x2dc>)
 8000af6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000afa:	4b4f      	ldr	r3, [pc, #316]	; (8000c38 <main+0x2e8>)
 8000afc:	edd3 7a00 	vldr	s15, [r3]
 8000b00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b08:	4b4c      	ldr	r3, [pc, #304]	; (8000c3c <main+0x2ec>)
 8000b0a:	edd3 7a00 	vldr	s15, [r3]
 8000b0e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8000c14 <main+0x2c4>
 8000b12:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <main+0x2dc>)
 8000b18:	ed93 6a01 	vldr	s12, [r3, #4]
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <main+0x2dc>)
 8000b1e:	edd3 7a00 	vldr	s15, [r3]
 8000b22:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000b26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b32:	ee17 2a90 	vmov	r2, s15
 8000b36:	4b3f      	ldr	r3, [pc, #252]	; (8000c34 <main+0x2e4>)
 8000b38:	605a      	str	r2, [r3, #4]

		error = RPM_2_PWM(RPMS[1] - RPMS[0]);
 8000b3a:	4b3e      	ldr	r3, [pc, #248]	; (8000c34 <main+0x2e4>)
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <main+0x2e4>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	1ad3      	subs	r3, r2, r3
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fe49 	bl	80017dc <RPM_2_PWM>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a3c      	ldr	r2, [pc, #240]	; (8000c40 <main+0x2f0>)
 8000b4e:	6013      	str	r3, [r2, #0]
		PWM = PWM + K_pp*error;
 8000b50:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <main+0x2f4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	ee07 3a90 	vmov	s15, r3
 8000b58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b5c:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <main+0x2f0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	ee07 3a90 	vmov	s15, r3
 8000b64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b68:	4b37      	ldr	r3, [pc, #220]	; (8000c48 <main+0x2f8>)
 8000b6a:	edd3 7a00 	vldr	s15, [r3]
 8000b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b7a:	ee17 2a90 	vmov	r2, s15
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <main+0x2f4>)
 8000b80:	601a      	str	r2, [r3, #0]


	   if (PWM > PWM_MAX)
 8000b82:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <main+0x2f4>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b64      	cmp	r3, #100	; 0x64
 8000b88:	dd03      	ble.n	8000b92 <main+0x242>
		PWM = PWM_MAX;
 8000b8a:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <main+0x2f4>)
 8000b8c:	2264      	movs	r2, #100	; 0x64
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	e008      	b.n	8000ba4 <main+0x254>
	   else if (PWM < PWM_MIN)
 8000b92:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <main+0x2f4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8000b9a:	da03      	bge.n	8000ba4 <main+0x254>
		PWM = PWM_MIN;
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <main+0x2f4>)
 8000b9e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000ba2:	601a      	str	r2, [r3, #0]

	   if (RPM > RPM_MAX)
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <main+0x2fc>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000bac:	4293      	cmp	r3, r2
 8000bae:	dd04      	ble.n	8000bba <main+0x26a>
		RPM = RPM_MAX;
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <main+0x2fc>)
 8000bb2:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	e007      	b.n	8000bca <main+0x27a>
	   else if (RPM < RPM_MIN)
 8000bba:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <main+0x2fc>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <main+0x300>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	da02      	bge.n	8000bca <main+0x27a>
		RPM = RPM_MIN;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <main+0x2fc>)
 8000bc6:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <main+0x300>)
 8000bc8:	601a      	str	r2, [r3, #0]

	  TIM1->CCR2 = 99;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <main+0x2a4>)
 8000bcc:	2263      	movs	r2, #99	; 0x63
 8000bce:	639a      	str	r2, [r3, #56]	; 0x38
	  HAL_Delay(100);
 8000bd0:	2064      	movs	r0, #100	; 0x64
 8000bd2:	f001 fbe9 	bl	80023a8 <HAL_Delay>
		key = leerTeclado();
 8000bd6:	e760      	b.n	8000a9a <main+0x14a>
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	c0440000 	.word	0xc0440000
 8000be0:	00000000 	.word	0x00000000
 8000be4:	40a9c800 	.word	0x40a9c800
	...
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	2400092c 	.word	0x2400092c
 8000bfc:	24000854 	.word	0x24000854
 8000c00:	24000990 	.word	0x24000990
 8000c04:	42840000 	.word	0x42840000
 8000c08:	2400078c 	.word	0x2400078c
 8000c0c:	24000794 	.word	0x24000794
 8000c10:	454e4000 	.word	0x454e4000
 8000c14:	42c80000 	.word	0x42c80000
 8000c18:	240002d8 	.word	0x240002d8
 8000c1c:	2400098c 	.word	0x2400098c
 8000c20:	3e2a0000 	.word	0x3e2a0000
 8000c24:	24000788 	.word	0x24000788
 8000c28:	24000978 	.word	0x24000978
 8000c2c:	240002d0 	.word	0x240002d0
 8000c30:	2400097c 	.word	0x2400097c
 8000c34:	24000924 	.word	0x24000924
 8000c38:	24000010 	.word	0x24000010
 8000c3c:	24000014 	.word	0x24000014
 8000c40:	24000988 	.word	0x24000988
 8000c44:	24000984 	.word	0x24000984
 8000c48:	2400000c 	.word	0x2400000c
 8000c4c:	240007e8 	.word	0x240007e8
 8000c50:	fffff31c 	.word	0xfffff31c

08000c54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09c      	sub	sp, #112	; 0x70
 8000c58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	224c      	movs	r2, #76	; 0x4c
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00b fc20 	bl	800c4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2220      	movs	r2, #32
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f00b fc1a 	bl	800c4a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c74:	2004      	movs	r0, #4
 8000c76:	f005 fc1f 	bl	80064b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b36      	ldr	r3, [pc, #216]	; (8000d58 <SystemClock_Config+0x104>)
 8000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c82:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <SystemClock_Config+0x104>)
 8000c84:	f023 0301 	bic.w	r3, r3, #1
 8000c88:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c8a:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <SystemClock_Config+0x104>)
 8000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <SystemClock_Config+0x108>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c9c:	4a2f      	ldr	r2, [pc, #188]	; (8000d5c <SystemClock_Config+0x108>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca2:	6193      	str	r3, [r2, #24]
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <SystemClock_Config+0x108>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb0:	bf00      	nop
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <SystemClock_Config+0x108>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cbe:	d1f8      	bne.n	8000cb2 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <SystemClock_Config+0x10c>)
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc4:	f023 0303 	bic.w	r3, r3, #3
 8000cc8:	4a25      	ldr	r2, [pc, #148]	; (8000d60 <SystemClock_Config+0x10c>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cd4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000ce6:	2324      	movs	r3, #36	; 0x24
 8000ce8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cea:	2302      	movs	r3, #2
 8000cec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cf6:	230c      	movs	r3, #12
 8000cf8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4618      	mov	r0, r3
 8000d08:	f005 fc40 	bl	800658c <HAL_RCC_OscConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d12:	f000 fec1 	bl	8001a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d16:	233f      	movs	r3, #63	; 0x3f
 8000d18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV2;
 8000d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d28:	2340      	movs	r3, #64	; 0x40
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d2c:	2340      	movs	r3, #64	; 0x40
 8000d2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d34:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f006 f834 	bl	8006dac <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000d4a:	f000 fea5 	bl	8001a98 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3770      	adds	r7, #112	; 0x70
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	58000400 	.word	0x58000400
 8000d5c:	58024800 	.word	0x58024800
 8000d60:	58024400 	.word	0x58024400

08000d64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000d8a:	4a31      	ldr	r2, [pc, #196]	; (8000e50 <MX_ADC1_Init+0xec>)
 8000d8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000d90:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8000d94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000d98:	2208      	movs	r2, #8
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000da2:	4b2a      	ldr	r3, [pc, #168]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000da4:	2208      	movs	r2, #8
 8000da6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dae:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000dd2:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000dd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de8:	4818      	ldr	r0, [pc, #96]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000dea:	f001 fc99 	bl	8002720 <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000df4:	f000 fe50 	bl	8001a98 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000e04:	f002 faac 	bl	8003360 <HAL_ADCEx_MultiModeConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e0e:	f000 fe43 	bl	8001a98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_ADC1_Init+0xf0>)
 8000e14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e16:	2306      	movs	r3, #6
 8000e18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e1e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e22:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e24:	2304      	movs	r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <MX_ADC1_Init+0xe8>)
 8000e36:	f001 fe13 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000e40:	f000 fe2a 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	240007ec 	.word	0x240007ec
 8000e50:	40022000 	.word	0x40022000
 8000e54:	08600004 	.word	0x08600004

08000e58 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <MX_I2C4_Init+0x78>)
 8000e60:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e64:	4a1b      	ldr	r2, [pc, #108]	; (8000ed4 <MX_I2C4_Init+0x7c>)
 8000e66:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e92:	480e      	ldr	r0, [pc, #56]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000e94:	f004 fb62 	bl	800555c <HAL_I2C_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e9e:	f000 fdfb 	bl	8001a98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000ea6:	f005 f927 	bl	80060f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000eb0:	f000 fdf2 	bl	8001a98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_I2C4_Init+0x74>)
 8000eb8:	f005 f969 	bl	800618e <HAL_I2CEx_ConfigDigitalFilter>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f000 fde9 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	24000284 	.word	0x24000284
 8000ed0:	58001c00 	.word	0x58001c00
 8000ed4:	00808cd2 	.word	0x00808cd2

08000ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09a      	sub	sp, #104	; 0x68
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	222c      	movs	r2, #44	; 0x2c
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00b fac8 	bl	800c4a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f18:	4b43      	ldr	r3, [pc, #268]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f1a:	4a44      	ldr	r2, [pc, #272]	; (800102c <MX_TIM1_Init+0x154>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 239;
 8000f1e:	4b42      	ldr	r3, [pc, #264]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f20:	22ef      	movs	r2, #239	; 0xef
 8000f22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b40      	ldr	r3, [pc, #256]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f2c:	2264      	movs	r2, #100	; 0x64
 8000f2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f30:	4b3d      	ldr	r3, [pc, #244]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f42:	4839      	ldr	r0, [pc, #228]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f44:	f008 fc44 	bl	80097d0 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000f4e:	f000 fda3 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4832      	ldr	r0, [pc, #200]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f60:	f009 f898 	bl	800a094 <HAL_TIM_ConfigClockSource>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000f6a:	f000 fd95 	bl	8001a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f6e:	482e      	ldr	r0, [pc, #184]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f70:	f008 fcf6 	bl	8009960 <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000f7a:	f000 fd8d 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4825      	ldr	r0, [pc, #148]	; (8001028 <MX_TIM1_Init+0x150>)
 8000f92:	f009 fdc7 	bl	800ab24 <HAL_TIMEx_MasterConfigSynchronization>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000f9c:	f000 fd7c 	bl	8001a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa0:	2360      	movs	r3, #96	; 0x60
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fac:	2300      	movs	r3, #0
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4818      	ldr	r0, [pc, #96]	; (8001028 <MX_TIM1_Init+0x150>)
 8000fc6:	f008 ff55 	bl	8009e74 <HAL_TIM_PWM_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000fd0:	f000 fd62 	bl	8001a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <MX_TIM1_Init+0x150>)
 800100a:	f009 fe13 	bl	800ac34 <HAL_TIMEx_ConfigBreakDeadTime>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001014:	f000 fd40 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MX_TIM1_Init+0x150>)
 800101a:	f000 fec7 	bl	8001dac <HAL_TIM_MspPostInit>

}
 800101e:	bf00      	nop
 8001020:	3768      	adds	r7, #104	; 0x68
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2400092c 	.word	0x2400092c
 800102c:	40010000 	.word	0x40010000

08001030 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM5_Init+0x94>)
 8001050:	4a1d      	ldr	r2, [pc, #116]	; (80010c8 <MX_TIM5_Init+0x98>)
 8001052:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_TIM5_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM5_Init+0x94>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_TIM5_Init+0x94>)
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_TIM5_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106e:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM5_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_TIM5_Init+0x94>)
 8001076:	f008 fbab 	bl	80097d0 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001080:	f000 fd0a 	bl	8001a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_TIM5_Init+0x94>)
 8001092:	f008 ffff 	bl	800a094 <HAL_TIM_ConfigClockSource>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800109c:	f000 fcfc 	bl	8001a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_TIM5_Init+0x94>)
 80010ae:	f009 fd39 	bl	800ab24 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80010b8:	f000 fcee 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	2400079c 	.word	0x2400079c
 80010c8:	40000c00 	.word	0x40000c00

080010cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010d0:	4b0e      	ldr	r3, [pc, #56]	; (800110c <MX_TIM13_Init+0x40>)
 80010d2:	4a0f      	ldr	r2, [pc, #60]	; (8001110 <MX_TIM13_Init+0x44>)
 80010d4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 47999;
 80010d6:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_TIM13_Init+0x40>)
 80010d8:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80010dc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <MX_TIM13_Init+0x40>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 5000;
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_TIM13_Init+0x40>)
 80010e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ea:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_TIM13_Init+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_TIM13_Init+0x40>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80010f8:	4804      	ldr	r0, [pc, #16]	; (800110c <MX_TIM13_Init+0x40>)
 80010fa:	f008 fb69 	bl	80097d0 <HAL_TIM_Base_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8001104:	f000 fcc8 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	24000854 	.word	0x24000854
 8001110:	40001c00 	.word	0x40001c00

08001114 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800111a:	4a23      	ldr	r2, [pc, #140]	; (80011a8 <MX_USART3_UART_Init+0x94>)
 800111c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001124:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800113a:	220c      	movs	r2, #12
 800113c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001156:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800115c:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 800115e:	f009 fe05 	bl	800ad6c <HAL_UART_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001168:	f000 fc96 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001170:	f00a fde8 	bl	800bd44 <HAL_UARTEx_SetTxFifoThreshold>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800117a:	f000 fc8d 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	4808      	ldr	r0, [pc, #32]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001182:	f00a fe1d 	bl	800bdc0 <HAL_UARTEx_SetRxFifoThreshold>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800118c:	f000 fc84 	bl	8001a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_USART3_UART_Init+0x90>)
 8001192:	f00a fd9e 	bl	800bcd2 <HAL_UARTEx_DisableFifoMode>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800119c:	f000 fc7c 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	240002e4 	.word	0x240002e4
 80011a8:	40004800 	.word	0x40004800

080011ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011b0:	4b15      	ldr	r3, [pc, #84]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b2:	4a16      	ldr	r2, [pc, #88]	; (800120c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80011b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80011b6:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011b8:	2209      	movs	r2, #9
 80011ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011be:	2202      	movs	r2, #2
 80011c0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80011f4:	f005 f817 	bl	8006226 <HAL_PCD_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80011fe:	f000 fc4b 	bl	8001a98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	24000378 	.word	0x24000378
 800120c:	40080000 	.word	0x40080000

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_DMA_Init+0x3c>)
 8001218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x3c>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x3c>)
 8001228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	200b      	movs	r0, #11
 800123a:	f002 fa4a 	bl	80036d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800123e:	200b      	movs	r0, #11
 8001240:	f002 fa61 	bl	8003706 <HAL_NVIC_EnableIRQ>

}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58024400 	.word	0x58024400

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4b70      	ldr	r3, [pc, #448]	; (8001428 <MX_GPIO_Init+0x1d8>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a6e      	ldr	r2, [pc, #440]	; (8001428 <MX_GPIO_Init+0x1d8>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b6c      	ldr	r3, [pc, #432]	; (8001428 <MX_GPIO_Init+0x1d8>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <MX_GPIO_Init+0x1d8>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a67      	ldr	r2, [pc, #412]	; (8001428 <MX_GPIO_Init+0x1d8>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b64      	ldr	r3, [pc, #400]	; (8001428 <MX_GPIO_Init+0x1d8>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	4b61      	ldr	r3, [pc, #388]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a5f      	ldr	r2, [pc, #380]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c0:	4b59      	ldr	r3, [pc, #356]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a58      	ldr	r2, [pc, #352]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012c8:	f043 0302 	orr.w	r3, r3, #2
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b55      	ldr	r3, [pc, #340]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012de:	4b52      	ldr	r3, [pc, #328]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	4a50      	ldr	r2, [pc, #320]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012e6:	f043 0320 	orr.w	r3, r3, #32
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ee:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	f003 0320 	and.w	r3, r3, #32
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <MX_GPIO_Init+0x1d8>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	4a49      	ldr	r2, [pc, #292]	; (8001428 <MX_GPIO_Init+0x1d8>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130c:	4b46      	ldr	r3, [pc, #280]	; (8001428 <MX_GPIO_Init+0x1d8>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	4b43      	ldr	r3, [pc, #268]	; (8001428 <MX_GPIO_Init+0x1d8>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001320:	4a41      	ldr	r2, [pc, #260]	; (8001428 <MX_GPIO_Init+0x1d8>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <MX_GPIO_Init+0x1d8>)
 800132c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6|GPIO_PIN_15|LD2_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	f248 0142 	movw	r1, #32834	; 0x8042
 800133e:	483b      	ldr	r0, [pc, #236]	; (800142c <MX_GPIO_Init+0x1dc>)
 8001340:	f004 f886 	bl	8005450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	f244 0101 	movw	r1, #16385	; 0x4001
 800134a:	4839      	ldr	r0, [pc, #228]	; (8001430 <MX_GPIO_Init+0x1e0>)
 800134c:	f004 f880 	bl	8005450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8001350:	2201      	movs	r2, #1
 8001352:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001356:	4836      	ldr	r0, [pc, #216]	; (8001430 <MX_GPIO_Init+0x1e0>)
 8001358:	f004 f87a 	bl	8005450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001362:	4834      	ldr	r0, [pc, #208]	; (8001434 <MX_GPIO_Init+0x1e4>)
 8001364:	f004 f874 	bl	8005450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE6 PE15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_15|LD2_Pin;
 8001368:	f248 0342 	movw	r3, #32834	; 0x8042
 800136c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	482a      	ldr	r0, [pc, #168]	; (800142c <MX_GPIO_Init+0x1dc>)
 8001382:	f003 fe9d 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800138a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4827      	ldr	r0, [pc, #156]	; (8001438 <MX_GPIO_Init+0x1e8>)
 800139c:	f003 fe90 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB10 PB11 LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_10|GPIO_PIN_11|LD3_Pin;
 80013a0:	f644 4301 	movw	r3, #19457	; 0x4c01
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a6:	2301      	movs	r3, #1
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <MX_GPIO_Init+0x1e0>)
 80013ba:	f003 fe81 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 PE12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12;
 80013be:	f44f 53ac 	mov.w	r3, #5504	; 0x1580
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4816      	ldr	r0, [pc, #88]	; (800142c <MX_GPIO_Init+0x1dc>)
 80013d4:	f003 fe74 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80013d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <MX_GPIO_Init+0x1e4>)
 80013f2:	f003 fe65 	bl	80050c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM_PIN_Pin */
  GPIO_InitStruct.Pin = RPM_PIN_Pin;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <MX_GPIO_Init+0x1ec>)
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RPM_PIN_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <MX_GPIO_Init+0x1e0>)
 800140a:	f003 fe59 	bl	80050c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2017      	movs	r0, #23
 8001414:	f002 f95d 	bl	80036d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001418:	2017      	movs	r0, #23
 800141a:	f002 f974 	bl	8003706 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3730      	adds	r7, #48	; 0x30
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	58024400 	.word	0x58024400
 800142c:	58021000 	.word	0x58021000
 8001430:	58020400 	.word	0x58020400
 8001434:	58020c00 	.word	0x58020c00
 8001438:	58020800 	.word	0x58020800
 800143c:	11110000 	.word	0x11110000

08001440 <MPU6050_init>:

 uart_buf_len = sprintf(uart_buf, "prueba4\n");
 HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
}

void MPU6050_init(void){
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t data = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c4,MPU6050,WHO_AM_I,1,&check,1,1000);
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	2275      	movs	r2, #117	; 0x75
 800145c:	21d0      	movs	r1, #208	; 0xd0
 800145e:	4813      	ldr	r0, [pc, #76]	; (80014ac <MPU6050_init+0x6c>)
 8001460:	f004 fb14 	bl	8005a8c <HAL_I2C_Mem_Read>
	if(check == 0x68){
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b68      	cmp	r3, #104	; 0x68
 8001468:	d11b      	bne.n	80014a2 <MPU6050_init+0x62>
		HAL_I2C_Mem_Write(&hi2c4,MPU6050,PWR_MGMT_1,1,&data,1,1000);
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2301      	movs	r3, #1
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	1dbb      	adds	r3, r7, #6
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2301      	movs	r3, #1
 800147a:	226b      	movs	r2, #107	; 0x6b
 800147c:	21d0      	movs	r1, #208	; 0xd0
 800147e:	480b      	ldr	r0, [pc, #44]	; (80014ac <MPU6050_init+0x6c>)
 8001480:	f004 f9f0 	bl	8005864 <HAL_I2C_Mem_Write>
		data = 0b00000111;
 8001484:	2307      	movs	r3, #7
 8001486:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c4,MPU6050,SMPLRT_DIV,1,&data,1,1000);
 8001488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	2301      	movs	r3, #1
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	1dbb      	adds	r3, r7, #6
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	2219      	movs	r2, #25
 800149a:	21d0      	movs	r1, #208	; 0xd0
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <MPU6050_init+0x6c>)
 800149e:	f004 f9e1 	bl	8005864 <HAL_I2C_Mem_Write>
	}
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	24000284 	.word	0x24000284

080014b0 <HAL_TIM_PeriodElapsedCallback>:
	int16_t temp = (int16_t)(tempOut[0] << 8 | tempOut[1]);
	return (temp/340.0) + 36.53;
}


void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
	if (htim == &htim13){
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a31      	ldr	r2, [pc, #196]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d15a      	bne.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xc6>


		temps[0] = temps[1];
 80014c0:	4b30      	ldr	r3, [pc, #192]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a2f      	ldr	r2, [pc, #188]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014c6:	6013      	str	r3, [r2, #0]
		temps[1] = m_t*(adcData)+b_t;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	ee07 3a90 	vmov	s15, r3
 80014d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014de:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e8:	4b26      	ldr	r3, [pc, #152]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80014ea:	edc3 7a01 	vstr	s15, [r3, #4]
		uart_buf_len = sprintf(uart_buf, "m_t: %f, b_t: %f\n ",m_t,b_t);
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80014f0:	edd3 7a00 	vldr	s15, [r3]
 80014f4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80014fa:	edd3 7a00 	vldr	s15, [r3]
 80014fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001502:	ed8d 7b00 	vstr	d7, [sp]
 8001506:	ec53 2b16 	vmov	r2, r3, d6
 800150a:	4922      	ldr	r1, [pc, #136]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800150c:	4822      	ldr	r0, [pc, #136]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800150e:	f00b fc15 	bl	800cd3c <siprintf>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001518:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	2364      	movs	r3, #100	; 0x64
 8001520:	491d      	ldr	r1, [pc, #116]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001522:	481f      	ldr	r0, [pc, #124]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001524:	f009 fc72 	bl	800ae0c <HAL_UART_Transmit>
		//adc: %i
		uart_buf_len = sprintf(uart_buf, "adc: %i \n ",(int)adcData);
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	491d      	ldr	r1, [pc, #116]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001530:	4819      	ldr	r0, [pc, #100]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001532:	f00b fc03 	bl	800cd3c <siprintf>
 8001536:	4603      	mov	r3, r0
 8001538:	b29a      	uxth	r2, r3
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800153c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100);
 800153e:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001540:	881a      	ldrh	r2, [r3, #0]
 8001542:	2364      	movs	r3, #100	; 0x64
 8001544:	4914      	ldr	r1, [pc, #80]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001546:	4816      	ldr	r0, [pc, #88]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001548:	f009 fc60 	bl	800ae0c <HAL_UART_Transmit>
		//(float)adcData*5.0*100/1024//MPU6050_READ_TEMP();
		if(imp_flag){
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d010      	beq.n	8001576 <HAL_TIM_PeriodElapsedCallback+0xc6>
			lcd_send_cmd(0xCB);
 8001554:	20cb      	movs	r0, #203	; 0xcb
 8001556:	f7ff f931 	bl	80007bc <lcd_send_cmd>
			sprintf(buffer, "%i",(int)temps[1]); //223 es el circulo de grados
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800155c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001564:	ee17 2a90 	vmov	r2, s15
 8001568:	4910      	ldr	r1, [pc, #64]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800156a:	4811      	ldr	r0, [pc, #68]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800156c:	f00b fbe6 	bl	800cd3c <siprintf>
			lcd_send_string(buffer);
 8001570:	480f      	ldr	r0, [pc, #60]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001572:	f7ff f9d7 	bl	8000924 <lcd_send_string>
		}
//		lcd_send_cmd(0xCA);
//		lcd_send_data(' ');

	}
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	24000854 	.word	0x24000854
 8001584:	2400097c 	.word	0x2400097c
 8001588:	24000274 	.word	0x24000274
 800158c:	2400098c 	.word	0x2400098c
 8001590:	24000788 	.word	0x24000788
 8001594:	0800f0f0 	.word	0x0800f0f0
 8001598:	2400020c 	.word	0x2400020c
 800159c:	24000374 	.word	0x24000374
 80015a0:	240002e4 	.word	0x240002e4
 80015a4:	0800f104 	.word	0x0800f104
 80015a8:	24000850 	.word	0x24000850
 80015ac:	0800f110 	.word	0x0800f110
 80015b0:	240008a0 	.word	0x240008a0

080015b4 <leerTeclado>:
		__HAL_TIM_SET_COUNTER(&htim5,0);
	}
}


uint8_t leerTeclado(void){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015be:	486a      	ldr	r0, [pc, #424]	; (8001768 <leerTeclado+0x1b4>)
 80015c0:	f003 ff46 	bl	8005450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_10,GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ca:	4867      	ldr	r0, [pc, #412]	; (8001768 <leerTeclado+0x1b4>)
 80015cc:	f003 ff40 	bl	8005450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_15,GPIO_PIN_SET);
 80015d0:	2201      	movs	r2, #1
 80015d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d6:	4865      	ldr	r0, [pc, #404]	; (800176c <leerTeclado+0x1b8>)
 80015d8:	f003 ff3a 	bl	8005450 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_6,GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2140      	movs	r1, #64	; 0x40
 80015e0:	4862      	ldr	r0, [pc, #392]	; (800176c <leerTeclado+0x1b8>)
 80015e2:	f003 ff35 	bl	8005450 <HAL_GPIO_WritePin>

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_11);
 80015e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ea:	485f      	ldr	r0, [pc, #380]	; (8001768 <leerTeclado+0x1b4>)
 80015ec:	f003 ff49 	bl	8005482 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 80015f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f4:	485d      	ldr	r0, [pc, #372]	; (800176c <leerTeclado+0x1b8>)
 80015f6:	f003 ff13 	bl	8005420 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <leerTeclado+0x50>
			return 1;
 8001600:	2301      	movs	r3, #1
 8001602:	e0af      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 8001604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001608:	4858      	ldr	r0, [pc, #352]	; (800176c <leerTeclado+0x1b8>)
 800160a:	f003 ff09 	bl	8005420 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <leerTeclado+0x64>
		return 2;
 8001614:	2302      	movs	r3, #2
 8001616:	e0a5      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	4854      	ldr	r0, [pc, #336]	; (800176c <leerTeclado+0x1b8>)
 800161c:	f003 ff00 	bl	8005420 <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <leerTeclado+0x76>
		return 3;
 8001626:	2303      	movs	r3, #3
 8001628:	e09c      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 800162a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162e:	484f      	ldr	r0, [pc, #316]	; (800176c <leerTeclado+0x1b8>)
 8001630:	f003 fef6 	bl	8005420 <HAL_GPIO_ReadPin>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <leerTeclado+0x8a>
		return 10;
 800163a:	230a      	movs	r3, #10
 800163c:	e092      	b.n	8001764 <leerTeclado+0x1b0>
		}


	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_11);
 800163e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001642:	4849      	ldr	r0, [pc, #292]	; (8001768 <leerTeclado+0x1b4>)
 8001644:	f003 ff1d 	bl	8005482 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_10);
 8001648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164c:	4846      	ldr	r0, [pc, #280]	; (8001768 <leerTeclado+0x1b4>)
 800164e:	f003 ff18 	bl	8005482 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 8001652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001656:	4845      	ldr	r0, [pc, #276]	; (800176c <leerTeclado+0x1b8>)
 8001658:	f003 fee2 	bl	8005420 <HAL_GPIO_ReadPin>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <leerTeclado+0xb2>
		return 4;
 8001662:	2304      	movs	r3, #4
 8001664:	e07e      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 8001666:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800166a:	4840      	ldr	r0, [pc, #256]	; (800176c <leerTeclado+0x1b8>)
 800166c:	f003 fed8 	bl	8005420 <HAL_GPIO_ReadPin>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <leerTeclado+0xc6>
		return 5;
 8001676:	2305      	movs	r3, #5
 8001678:	e074      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 800167a:	2180      	movs	r1, #128	; 0x80
 800167c:	483b      	ldr	r0, [pc, #236]	; (800176c <leerTeclado+0x1b8>)
 800167e:	f003 fecf 	bl	8005420 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <leerTeclado+0xd8>
		return 6;
 8001688:	2306      	movs	r3, #6
 800168a:	e06b      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 800168c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001690:	4836      	ldr	r0, [pc, #216]	; (800176c <leerTeclado+0x1b8>)
 8001692:	f003 fec5 	bl	8005420 <HAL_GPIO_ReadPin>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <leerTeclado+0xec>
		return 11;
 800169c:	230b      	movs	r3, #11
 800169e:	e061      	b.n	8001764 <leerTeclado+0x1b0>
		}

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_10);
 80016a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a4:	4830      	ldr	r0, [pc, #192]	; (8001768 <leerTeclado+0x1b4>)
 80016a6:	f003 feec 	bl	8005482 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 80016aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016ae:	482f      	ldr	r0, [pc, #188]	; (800176c <leerTeclado+0x1b8>)
 80016b0:	f003 fee7 	bl	8005482 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 80016b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b8:	482c      	ldr	r0, [pc, #176]	; (800176c <leerTeclado+0x1b8>)
 80016ba:	f003 feb1 	bl	8005420 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <leerTeclado+0x114>
		return 7;
 80016c4:	2307      	movs	r3, #7
 80016c6:	e04d      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 80016c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016cc:	4827      	ldr	r0, [pc, #156]	; (800176c <leerTeclado+0x1b8>)
 80016ce:	f003 fea7 	bl	8005420 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <leerTeclado+0x128>
		return 8;
 80016d8:	2308      	movs	r3, #8
 80016da:	e043      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 80016dc:	2180      	movs	r1, #128	; 0x80
 80016de:	4823      	ldr	r0, [pc, #140]	; (800176c <leerTeclado+0x1b8>)
 80016e0:	f003 fe9e 	bl	8005420 <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <leerTeclado+0x13a>
		return 9;
 80016ea:	2309      	movs	r3, #9
 80016ec:	e03a      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 80016ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f2:	481e      	ldr	r0, [pc, #120]	; (800176c <leerTeclado+0x1b8>)
 80016f4:	f003 fe94 	bl	8005420 <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <leerTeclado+0x14e>
		return 12;
 80016fe:	230c      	movs	r3, #12
 8001700:	e030      	b.n	8001764 <leerTeclado+0x1b0>
		}

	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_15);
 8001702:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001706:	4819      	ldr	r0, [pc, #100]	; (800176c <leerTeclado+0x1b8>)
 8001708:	f003 febb 	bl	8005482 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOE,GPIO_PIN_6);
 800170c:	2140      	movs	r1, #64	; 0x40
 800170e:	4817      	ldr	r0, [pc, #92]	; (800176c <leerTeclado+0x1b8>)
 8001710:	f003 feb7 	bl	8005482 <HAL_GPIO_TogglePin>
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_12))){
 8001714:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001718:	4814      	ldr	r0, [pc, #80]	; (800176c <leerTeclado+0x1b8>)
 800171a:	f003 fe81 	bl	8005420 <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <leerTeclado+0x174>
		return 14;
 8001724:	230e      	movs	r3, #14
 8001726:	e01d      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10))){
 8001728:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <leerTeclado+0x1b8>)
 800172e:	f003 fe77 	bl	8005420 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <leerTeclado+0x188>
		return 0;
 8001738:	2300      	movs	r3, #0
 800173a:	e013      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7))){
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	480b      	ldr	r0, [pc, #44]	; (800176c <leerTeclado+0x1b8>)
 8001740:	f003 fe6e 	bl	8005420 <HAL_GPIO_ReadPin>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <leerTeclado+0x19a>
		return 15;
 800174a:	230f      	movs	r3, #15
 800174c:	e00a      	b.n	8001764 <leerTeclado+0x1b0>
		}
	if(!(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8))){
 800174e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <leerTeclado+0x1b8>)
 8001754:	f003 fe64 	bl	8005420 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <leerTeclado+0x1ae>
		return 13;
 800175e:	230d      	movs	r3, #13
 8001760:	e000      	b.n	8001764 <leerTeclado+0x1b0>
		}
	return 16;
 8001762:	2310      	movs	r3, #16
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}
 8001768:	58020400 	.word	0x58020400
 800176c:	58021000 	.word	0x58021000

08001770 <clearTempBuff>:

void clearTempBuff(void){
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
	 for(int i =0;i<4;i++)
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	e007      	b.n	800178c <clearTempBuff+0x1c>
		 temp_buff[i] = ' ';
 800177c:	4a08      	ldr	r2, [pc, #32]	; (80017a0 <clearTempBuff+0x30>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	2220      	movs	r2, #32
 8001784:	701a      	strb	r2, [r3, #0]
	 for(int i =0;i<4;i++)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b03      	cmp	r3, #3
 8001790:	ddf4      	ble.n	800177c <clearTempBuff+0xc>
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	24000008 	.word	0x24000008

080017a4 <TMP_2_RPM>:

float TMP_2_RPM(float error_tmp){
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	ed87 0a01 	vstr	s0, [r7, #4]
	return m1*(error_tmp) +b1;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <TMP_2_RPM+0x30>)
 80017b0:	ed93 7a00 	vldr	s14, [r3]
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <TMP_2_RPM+0x34>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	24000990 	.word	0x24000990
 80017d8:	2400078c 	.word	0x2400078c

080017dc <RPM_2_PWM>:



int RPM_2_PWM(int error_rpm){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	return m2*(error_rpm) +b2;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <RPM_2_PWM+0x3c>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <RPM_2_PWM+0x40>)
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001806:	ee17 3a90 	vmov	r3, s15
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	24000794 	.word	0x24000794
 800181c:	240002d8 	.word	0x240002d8

08001820 <dispTemp>:




void dispTemp(void){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001824:	2080      	movs	r0, #128	; 0x80
 8001826:	f7fe ffc9 	bl	80007bc <lcd_send_cmd>
	lcd_send_string("Temp Ref: ");
 800182a:	4820      	ldr	r0, [pc, #128]	; (80018ac <dispTemp+0x8c>)
 800182c:	f7ff f87a 	bl	8000924 <lcd_send_string>
	lcd_send_cmd(0x8A);
 8001830:	208a      	movs	r0, #138	; 0x8a
 8001832:	f7fe ffc3 	bl	80007bc <lcd_send_cmd>
	lcd_send_data(temp_buff[0]);
 8001836:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <dispTemp+0x90>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7fe ffee 	bl	800081c <lcd_send_data>
	lcd_send_cmd(0x8B);
 8001840:	208b      	movs	r0, #139	; 0x8b
 8001842:	f7fe ffbb 	bl	80007bc <lcd_send_cmd>
	lcd_send_data(temp_buff[1]);
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <dispTemp+0x90>)
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe ffe6 	bl	800081c <lcd_send_data>
	lcd_send_cmd(0x8C);
 8001850:	208c      	movs	r0, #140	; 0x8c
 8001852:	f7fe ffb3 	bl	80007bc <lcd_send_cmd>
	lcd_send_data(temp_buff[2] == ' ' ? '0' : temp_buff[2]);
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <dispTemp+0x90>)
 8001858:	789b      	ldrb	r3, [r3, #2]
 800185a:	2b20      	cmp	r3, #32
 800185c:	d002      	beq.n	8001864 <dispTemp+0x44>
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <dispTemp+0x90>)
 8001860:	789b      	ldrb	r3, [r3, #2]
 8001862:	e000      	b.n	8001866 <dispTemp+0x46>
 8001864:	2330      	movs	r3, #48	; 0x30
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe ffd8 	bl	800081c <lcd_send_data>
	lcd_send_cmd(0x8E);
 800186c:	208e      	movs	r0, #142	; 0x8e
 800186e:	f7fe ffa5 	bl	80007bc <lcd_send_cmd>
	lcd_send_data(223);
 8001872:	20df      	movs	r0, #223	; 0xdf
 8001874:	f7fe ffd2 	bl	800081c <lcd_send_data>
	lcd_send_cmd(0x8F);
 8001878:	208f      	movs	r0, #143	; 0x8f
 800187a:	f7fe ff9f 	bl	80007bc <lcd_send_cmd>
	lcd_send_data('C');
 800187e:	2043      	movs	r0, #67	; 0x43
 8001880:	f7fe ffcc 	bl	800081c <lcd_send_data>
	lcd_send_cmd(0xC0);
 8001884:	20c0      	movs	r0, #192	; 0xc0
 8001886:	f7fe ff99 	bl	80007bc <lcd_send_cmd>
	lcd_send_string("Temp Act: ");
 800188a:	480a      	ldr	r0, [pc, #40]	; (80018b4 <dispTemp+0x94>)
 800188c:	f7ff f84a 	bl	8000924 <lcd_send_string>
//	lcd_send_data('0');
//	lcd_send_cmd(0xCB);
//	lcd_send_data('0');
//	lcd_send_cmd(0xCC);
//	lcd_send_data('0');
	lcd_send_cmd(0xCE);
 8001890:	20ce      	movs	r0, #206	; 0xce
 8001892:	f7fe ff93 	bl	80007bc <lcd_send_cmd>
	lcd_send_data(223);
 8001896:	20df      	movs	r0, #223	; 0xdf
 8001898:	f7fe ffc0 	bl	800081c <lcd_send_data>
	lcd_send_cmd(0xCF);
 800189c:	20cf      	movs	r0, #207	; 0xcf
 800189e:	f7fe ff8d 	bl	80007bc <lcd_send_cmd>
	lcd_send_data('C');
 80018a2:	2043      	movs	r0, #67	; 0x43
 80018a4:	f7fe ffba 	bl	800081c <lcd_send_data>
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	0800f12c 	.word	0x0800f12c
 80018b0:	24000008 	.word	0x24000008
 80018b4:	0800f138 	.word	0x0800f138

080018b8 <procesarTeclado>:

void procesarTeclado(int keyt){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	 if(keyt<10){
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b09      	cmp	r3, #9
 80018c4:	dc25      	bgt.n	8001912 <procesarTeclado+0x5a>
		if(enter_flag){
 80018c6:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <procesarTeclado+0x1b4>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d004      	beq.n	80018d8 <procesarTeclado+0x20>
			clearTempBuff();
 80018ce:	f7ff ff4f 	bl	8001770 <clearTempBuff>
			enter_flag = 0;
 80018d2:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <procesarTeclado+0x1b4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
		}
		if(cont<3){
 80018d8:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <procesarTeclado+0x1b8>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d814      	bhi.n	800190a <procesarTeclado+0x52>
			temp_buff[0] = temp_buff[1];
 80018e0:	4b64      	ldr	r3, [pc, #400]	; (8001a74 <procesarTeclado+0x1bc>)
 80018e2:	785a      	ldrb	r2, [r3, #1]
 80018e4:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <procesarTeclado+0x1bc>)
 80018e6:	701a      	strb	r2, [r3, #0]
			temp_buff[1] = temp_buff[2];
 80018e8:	4b62      	ldr	r3, [pc, #392]	; (8001a74 <procesarTeclado+0x1bc>)
 80018ea:	789a      	ldrb	r2, [r3, #2]
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <procesarTeclado+0x1bc>)
 80018ee:	705a      	strb	r2, [r3, #1]
			temp_buff[2] = key+48;
 80018f0:	4b61      	ldr	r3, [pc, #388]	; (8001a78 <procesarTeclado+0x1c0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	3330      	adds	r3, #48	; 0x30
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <procesarTeclado+0x1bc>)
 80018fa:	709a      	strb	r2, [r3, #2]
			cont++;
 80018fc:	4b5c      	ldr	r3, [pc, #368]	; (8001a70 <procesarTeclado+0x1b8>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <procesarTeclado+0x1b8>)
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e0a6      	b.n	8001a58 <procesarTeclado+0x1a0>
		}
		else {
			cont = 0;
 800190a:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <procesarTeclado+0x1b8>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e0a2      	b.n	8001a58 <procesarTeclado+0x1a0>
		}

	 }
	 else if(keyt == 10){
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0a      	cmp	r3, #10
 8001916:	d126      	bne.n	8001966 <procesarTeclado+0xae>
		 imp_flag = 0;
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <procesarTeclado+0x1c4>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
		 clearTempBuff();
 800191e:	f7ff ff27 	bl	8001770 <clearTempBuff>
		 lcd_clear();
 8001922:	f7fe ffab 	bl	800087c <lcd_clear>
		 HAL_Delay(200);
 8001926:	20c8      	movs	r0, #200	; 0xc8
 8001928:	f000 fd3e 	bl	80023a8 <HAL_Delay>
		 lcd_send_cmd (0x80);
 800192c:	2080      	movs	r0, #128	; 0x80
 800192e:	f7fe ff45 	bl	80007bc <lcd_send_cmd>
		 lcd_send_string("Temperatura");
 8001932:	4853      	ldr	r0, [pc, #332]	; (8001a80 <procesarTeclado+0x1c8>)
 8001934:	f7fe fff6 	bl	8000924 <lcd_send_string>
		 lcd_send_cmd(0xC0);
 8001938:	20c0      	movs	r0, #192	; 0xc0
 800193a:	f7fe ff3f 	bl	80007bc <lcd_send_cmd>
		 lcd_send_string("reestablecida");
 800193e:	4851      	ldr	r0, [pc, #324]	; (8001a84 <procesarTeclado+0x1cc>)
 8001940:	f7fe fff0 	bl	8000924 <lcd_send_string>
		 HAL_Delay(500);
 8001944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001948:	f000 fd2e 	bl	80023a8 <HAL_Delay>
		 HAL_Delay(500);
 800194c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001950:	f000 fd2a 	bl	80023a8 <HAL_Delay>
		 lcd_clear();
 8001954:	f7fe ff92 	bl	800087c <lcd_clear>
		 HAL_Delay(200);
 8001958:	20c8      	movs	r0, #200	; 0xc8
 800195a:	f000 fd25 	bl	80023a8 <HAL_Delay>
		 imp_flag = 1;
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <procesarTeclado+0x1c4>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]
 8001964:	e078      	b.n	8001a58 <procesarTeclado+0x1a0>


	 }
	 else if(keyt == 13){
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b0d      	cmp	r3, #13
 800196a:	d175      	bne.n	8001a58 <procesarTeclado+0x1a0>

		temp_ref = (int)((temp_buff[2] == ' ' ? 0 : temp_buff[2] -48)) + (int)((temp_buff[1] == ' ' ? 0 : (temp_buff[1] -48)*10)) + (int)((temp_buff[0] == ' ' ? 0 : (temp_buff[0] -48)*100));
 800196c:	4b41      	ldr	r3, [pc, #260]	; (8001a74 <procesarTeclado+0x1bc>)
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	2b20      	cmp	r3, #32
 8001972:	d004      	beq.n	800197e <procesarTeclado+0xc6>
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <procesarTeclado+0x1bc>)
 8001976:	789b      	ldrb	r3, [r3, #2]
 8001978:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800197c:	e000      	b.n	8001980 <procesarTeclado+0xc8>
 800197e:	2200      	movs	r2, #0
 8001980:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <procesarTeclado+0x1bc>)
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	2b20      	cmp	r3, #32
 8001986:	d008      	beq.n	800199a <procesarTeclado+0xe2>
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <procesarTeclado+0x1bc>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001990:	460b      	mov	r3, r1
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	e000      	b.n	800199c <procesarTeclado+0xe4>
 800199a:	2300      	movs	r3, #0
 800199c:	441a      	add	r2, r3
 800199e:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <procesarTeclado+0x1bc>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b20      	cmp	r3, #32
 80019a4:	d006      	beq.n	80019b4 <procesarTeclado+0xfc>
 80019a6:	4b33      	ldr	r3, [pc, #204]	; (8001a74 <procesarTeclado+0x1bc>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	3b30      	subs	r3, #48	; 0x30
 80019ac:	2164      	movs	r1, #100	; 0x64
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	e000      	b.n	80019b6 <procesarTeclado+0xfe>
 80019b4:	2300      	movs	r3, #0
 80019b6:	4413      	add	r3, r2
 80019b8:	4a33      	ldr	r2, [pc, #204]	; (8001a88 <procesarTeclado+0x1d0>)
 80019ba:	6013      	str	r3, [r2, #0]
		cont=0;
 80019bc:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <procesarTeclado+0x1b8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
		imp_flag = 0;
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <procesarTeclado+0x1c4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
		enter_flag =0;
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <procesarTeclado+0x1b4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
		if(temp_ref > 60){
 80019ce:	4b2e      	ldr	r3, [pc, #184]	; (8001a88 <procesarTeclado+0x1d0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b3c      	cmp	r3, #60	; 0x3c
 80019d4:	dd21      	ble.n	8001a1a <procesarTeclado+0x162>
			lcd_clear();
 80019d6:	f7fe ff51 	bl	800087c <lcd_clear>
			HAL_Delay(500);
 80019da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019de:	f000 fce3 	bl	80023a8 <HAL_Delay>
			clearTempBuff();
 80019e2:	f7ff fec5 	bl	8001770 <clearTempBuff>
			lcd_send_cmd(0x80);
 80019e6:	2080      	movs	r0, #128	; 0x80
 80019e8:	f7fe fee8 	bl	80007bc <lcd_send_cmd>
			lcd_send_string("La temperatura");
 80019ec:	4827      	ldr	r0, [pc, #156]	; (8001a8c <procesarTeclado+0x1d4>)
 80019ee:	f7fe ff99 	bl	8000924 <lcd_send_string>
			lcd_send_cmd(0xC0);
 80019f2:	20c0      	movs	r0, #192	; 0xc0
 80019f4:	f7fe fee2 	bl	80007bc <lcd_send_cmd>
			lcd_send_string("no es valida");
 80019f8:	4825      	ldr	r0, [pc, #148]	; (8001a90 <procesarTeclado+0x1d8>)
 80019fa:	f7fe ff93 	bl	8000924 <lcd_send_string>
			HAL_Delay(500);
 80019fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a02:	f000 fcd1 	bl	80023a8 <HAL_Delay>
			HAL_Delay(500);
 8001a06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a0a:	f000 fccd 	bl	80023a8 <HAL_Delay>
			lcd_clear();
 8001a0e:	f7fe ff35 	bl	800087c <lcd_clear>
			HAL_Delay(200);
 8001a12:	20c8      	movs	r0, #200	; 0xc8
 8001a14:	f000 fcc8 	bl	80023a8 <HAL_Delay>
 8001a18:	e01e      	b.n	8001a58 <procesarTeclado+0x1a0>

		}else{
			lcd_clear();
 8001a1a:	f7fe ff2f 	bl	800087c <lcd_clear>
			HAL_Delay(500);
 8001a1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a22:	f000 fcc1 	bl	80023a8 <HAL_Delay>
			lcd_send_cmd(0x80);
 8001a26:	2080      	movs	r0, #128	; 0x80
 8001a28:	f7fe fec8 	bl	80007bc <lcd_send_cmd>
			lcd_send_string("La temperatura");
 8001a2c:	4817      	ldr	r0, [pc, #92]	; (8001a8c <procesarTeclado+0x1d4>)
 8001a2e:	f7fe ff79 	bl	8000924 <lcd_send_string>
			lcd_send_cmd(0xC0);
 8001a32:	20c0      	movs	r0, #192	; 0xc0
 8001a34:	f7fe fec2 	bl	80007bc <lcd_send_cmd>
			lcd_send_string("fue actualizada");
 8001a38:	4816      	ldr	r0, [pc, #88]	; (8001a94 <procesarTeclado+0x1dc>)
 8001a3a:	f7fe ff73 	bl	8000924 <lcd_send_string>
			HAL_Delay(500);
 8001a3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a42:	f000 fcb1 	bl	80023a8 <HAL_Delay>
			HAL_Delay(500);
 8001a46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a4a:	f000 fcad 	bl	80023a8 <HAL_Delay>
			lcd_clear();
 8001a4e:	f7fe ff15 	bl	800087c <lcd_clear>
			HAL_Delay(200);
 8001a52:	20c8      	movs	r0, #200	; 0xc8
 8001a54:	f000 fca8 	bl	80023a8 <HAL_Delay>
}
	 }
	 imp_flag = 1;
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <procesarTeclado+0x1c4>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]

	 dispTemp();
 8001a5e:	f7ff fedf 	bl	8001820 <dispTemp>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	2400000b 	.word	0x2400000b
 8001a70:	24000270 	.word	0x24000270
 8001a74:	24000008 	.word	0x24000008
 8001a78:	24000978 	.word	0x24000978
 8001a7c:	24000850 	.word	0x24000850
 8001a80:	0800f144 	.word	0x0800f144
 8001a84:	0800f150 	.word	0x0800f150
 8001a88:	240002e0 	.word	0x240002e0
 8001a8c:	0800f160 	.word	0x0800f160
 8001a90:	0800f170 	.word	0x0800f170
 8001a94:	0800f180 	.word	0x0800f180

08001a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a9c:	b672      	cpsid	i
}
 8001a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <Error_Handler+0x8>
	...

08001aa4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_MspInit+0x30>)
 8001aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_MspInit+0x30>)
 8001ab2:	f043 0302 	orr.w	r3, r3, #2
 8001ab6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_MspInit+0x30>)
 8001abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	58024400 	.word	0x58024400

08001ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b0b8      	sub	sp, #224	; 0xe0
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	22bc      	movs	r2, #188	; 0xbc
 8001af6:	2100      	movs	r1, #0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f00a fcd5 	bl	800c4a8 <memset>
  if(hadc->Instance==ADC1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a43      	ldr	r2, [pc, #268]	; (8001c10 <HAL_ADC_MspInit+0x138>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d17e      	bne.n	8001c06 <HAL_ADC_MspInit+0x12e>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b0c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 8001b12:	2312      	movs	r3, #18
 8001b14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b16:	2304      	movs	r3, #4
 8001b18:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001b26:	2320      	movs	r3, #32
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8001b2a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 fcc2 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001b46:	f7ff ffa7 	bl	8001a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b4a:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <HAL_ADC_MspInit+0x13c>)
 8001b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b50:	4a30      	ldr	r2, [pc, #192]	; (8001c14 <HAL_ADC_MspInit+0x13c>)
 8001b52:	f043 0320 	orr.w	r3, r3, #32
 8001b56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b5a:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_ADC_MspInit+0x13c>)
 8001b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b68:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <HAL_ADC_MspInit+0x13c>)
 8001b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <HAL_ADC_MspInit+0x13c>)
 8001b70:	f043 0320 	orr.w	r3, r3, #32
 8001b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b78:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_ADC_MspInit+0x13c>)
 8001b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	481d      	ldr	r0, [pc, #116]	; (8001c18 <HAL_ADC_MspInit+0x140>)
 8001ba2:	f003 fa8d 	bl	80050c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001ba8:	4a1d      	ldr	r2, [pc, #116]	; (8001c20 <HAL_ADC_MspInit+0x148>)
 8001baa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bae:	2209      	movs	r2, #9
 8001bb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bbe:	4b17      	ldr	r3, [pc, #92]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bcc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bdc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bea:	480c      	ldr	r0, [pc, #48]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bec:	f001 fda6 	bl	800373c <HAL_DMA_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_ADC_MspInit+0x122>
    {
      Error_Handler();
 8001bf6:	f7ff ff4f 	bl	8001a98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001c00:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <HAL_ADC_MspInit+0x144>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	37e0      	adds	r7, #224	; 0xe0
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40022000 	.word	0x40022000
 8001c14:	58024400 	.word	0x58024400
 8001c18:	58021400 	.word	0x58021400
 8001c1c:	240008ac 	.word	0x240008ac
 8001c20:	40020010 	.word	0x40020010

08001c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0b8      	sub	sp, #224	; 0xe0
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	22bc      	movs	r2, #188	; 0xbc
 8001c42:	2100      	movs	r1, #0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00a fc2f 	bl	800c4a8 <memset>
  if(hi2c->Instance==I2C4)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a25      	ldr	r2, [pc, #148]	; (8001ce4 <HAL_I2C_MspInit+0xc0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d142      	bne.n	8001cda <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001c54:	2310      	movs	r3, #16
 8001c56:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4618      	mov	r0, r3
 8001c64:	f005 fc2e 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c6e:	f7ff ff13 	bl	8001a98 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c72:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <HAL_I2C_MspInit+0xc4>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_I2C_MspInit+0xc4>)
 8001c7a:	f043 0320 	orr.w	r3, r3, #32
 8001c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_I2C_MspInit+0xc4>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	f003 0320 	and.w	r3, r3, #32
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c98:	2312      	movs	r3, #18
 8001c9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001caa:	2304      	movs	r3, #4
 8001cac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	480d      	ldr	r0, [pc, #52]	; (8001cec <HAL_I2C_MspInit+0xc8>)
 8001cb8:	f003 fa02 	bl	80050c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_I2C_MspInit+0xc4>)
 8001cbe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_I2C_MspInit+0xc4>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cc8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_I2C_MspInit+0xc4>)
 8001cce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001cda:	bf00      	nop
 8001cdc:	37e0      	adds	r7, #224	; 0xe0
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	58001c00 	.word	0x58001c00
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	58021400 	.word	0x58021400

08001cf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_TIM_Base_MspInit+0xac>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10f      	bne.n	8001d22 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d08:	4a25      	ldr	r2, [pc, #148]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001d20:	e038      	b.n	8001d94 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM5)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1f      	ldr	r2, [pc, #124]	; (8001da4 <HAL_TIM_Base_MspInit+0xb4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d117      	bne.n	8001d5c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d32:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d34:	f043 0308 	orr.w	r3, r3, #8
 8001d38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2032      	movs	r0, #50	; 0x32
 8001d50:	f001 fcbf 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d54:	2032      	movs	r0, #50	; 0x32
 8001d56:	f001 fcd6 	bl	8003706 <HAL_NVIC_EnableIRQ>
}
 8001d5a:	e01b      	b.n	8001d94 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM13)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_TIM_Base_MspInit+0xb8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d116      	bne.n	8001d94 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_TIM_Base_MspInit+0xb0>)
 8001d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	202c      	movs	r0, #44	; 0x2c
 8001d8a:	f001 fca2 	bl	80036d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001d8e:	202c      	movs	r0, #44	; 0x2c
 8001d90:	f001 fcb9 	bl	8003706 <HAL_NVIC_EnableIRQ>
}
 8001d94:	bf00      	nop
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	58024400 	.word	0x58024400
 8001da4:	40000c00 	.word	0x40000c00
 8001da8:	40001c00 	.word	0x40001c00

08001dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a13      	ldr	r2, [pc, #76]	; (8001e18 <HAL_TIM_MspPostInit+0x6c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d11f      	bne.n	8001e0e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dce:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_TIM_MspPostInit+0x70>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	4a11      	ldr	r2, [pc, #68]	; (8001e1c <HAL_TIM_MspPostInit+0x70>)
 8001dd6:	f043 0310 	orr.w	r3, r3, #16
 8001dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <HAL_TIM_MspPostInit+0x70>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001df0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <HAL_TIM_MspPostInit+0x74>)
 8001e0a:	f003 f959 	bl	80050c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58021000 	.word	0x58021000

08001e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0b8      	sub	sp, #224	; 0xe0
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	22bc      	movs	r2, #188	; 0xbc
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f00a fb2f 	bl	800c4a8 <memset>
  if(huart->Instance==USART3)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a25      	ldr	r2, [pc, #148]	; (8001ee4 <HAL_UART_MspInit+0xc0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d142      	bne.n	8001eda <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e5e:	f107 0310 	add.w	r3, r7, #16
 8001e62:	4618      	mov	r0, r3
 8001e64:	f005 fb2e 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e6e:	f7ff fe13 	bl	8001a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_UART_MspInit+0xc4>)
 8001e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_UART_MspInit+0xc4>)
 8001e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_UART_MspInit+0xc4>)
 8001e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_UART_MspInit+0xc4>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e96:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <HAL_UART_MspInit+0xc4>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_UART_MspInit+0xc4>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001eae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ece:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	; (8001eec <HAL_UART_MspInit+0xc8>)
 8001ed6:	f003 f8f3 	bl	80050c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eda:	bf00      	nop
 8001edc:	37e0      	adds	r7, #224	; 0xe0
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40004800 	.word	0x40004800
 8001ee8:	58024400 	.word	0x58024400
 8001eec:	58020c00 	.word	0x58020c00

08001ef0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b0b8      	sub	sp, #224	; 0xe0
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	22bc      	movs	r2, #188	; 0xbc
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00a fac9 	bl	800c4a8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a37      	ldr	r2, [pc, #220]	; (8001ff8 <HAL_PCD_MspInit+0x108>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d166      	bne.n	8001fee <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f24:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8001f2a:	2312      	movs	r3, #18
 8001f2c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8001f32:	2303      	movs	r3, #3
 8001f34:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001f3a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f3e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8001f40:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f44:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001f46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	4618      	mov	r0, r3
 8001f54:	f005 fab6 	bl	80074c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8001f5e:	f7ff fd9b 	bl	8001a98 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f62:	f004 fb03 	bl	800656c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_PCD_MspInit+0x10c>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_PCD_MspInit+0x10c>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_PCD_MspInit+0x10c>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001f84:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001f88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4815      	ldr	r0, [pc, #84]	; (8002000 <HAL_PCD_MspInit+0x110>)
 8001fac:	f003 f888 	bl	80050c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fc8:	4619      	mov	r1, r3
 8001fca:	480d      	ldr	r0, [pc, #52]	; (8002000 <HAL_PCD_MspInit+0x110>)
 8001fcc:	f003 f878 	bl	80050c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_PCD_MspInit+0x10c>)
 8001fd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_PCD_MspInit+0x10c>)
 8001fd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001fdc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_PCD_MspInit+0x10c>)
 8001fe2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001fee:	bf00      	nop
 8001ff0:	37e0      	adds	r7, #224	; 0xe0
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40080000 	.word	0x40080000
 8001ffc:	58024400 	.word	0x58024400
 8002000:	58020000 	.word	0x58020000

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <NMI_Handler+0x4>

0800200a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <MemManage_Handler+0x4>

08002016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201a:	e7fe      	b.n	800201a <BusFault_Handler+0x4>

0800201c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <UsageFault_Handler+0x4>

08002022 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002050:	f000 f98a 	bl	8002368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <DMA1_Stream0_IRQHandler+0x10>)
 800205e:	f001 fec9 	bl	8003df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	240008ac 	.word	0x240008ac

0800206c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002070:	2080      	movs	r0, #128	; 0x80
 8002072:	f003 fa20 	bl	80054b6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002082:	f007 fdd7 	bl	8009c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	24000854 	.word	0x24000854

08002090 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002094:	4802      	ldr	r0, [pc, #8]	; (80020a0 <TIM5_IRQHandler+0x10>)
 8002096:	f007 fdcd 	bl	8009c34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2400079c 	.word	0x2400079c

080020a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
	return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <_kill>:

int _kill(int pid, int sig)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020be:	f00a f9c9 	bl	800c454 <__errno>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2216      	movs	r2, #22
 80020c6:	601a      	str	r2, [r3, #0]
	return -1;
 80020c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <_exit>:

void _exit (int status)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ffe7 	bl	80020b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020e6:	e7fe      	b.n	80020e6 <_exit+0x12>

080020e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e00a      	b.n	8002110 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020fa:	f3af 8000 	nop.w
 80020fe:	4601      	mov	r1, r0
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	b2ca      	uxtb	r2, r1
 8002108:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	429a      	cmp	r2, r3
 8002116:	dbf0      	blt.n	80020fa <_read+0x12>
	}

return len;
 8002118:	687b      	ldr	r3, [r7, #4]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b086      	sub	sp, #24
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e009      	b.n	8002148 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	60ba      	str	r2, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	4618      	mov	r0, r3
 800213e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	429a      	cmp	r2, r3
 800214e:	dbf1      	blt.n	8002134 <_write+0x12>
	}
	return len;
 8002150:	687b      	ldr	r3, [r7, #4]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <_close>:

int _close(int file)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
	return -1;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
 800217a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002182:	605a      	str	r2, [r3, #4]
	return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <_isatty>:

int _isatty(int file)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
	return 1;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
	return 0;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021cc:	4a14      	ldr	r2, [pc, #80]	; (8002220 <_sbrk+0x5c>)
 80021ce:	4b15      	ldr	r3, [pc, #84]	; (8002224 <_sbrk+0x60>)
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <_sbrk+0x64>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021e0:	4b11      	ldr	r3, [pc, #68]	; (8002228 <_sbrk+0x64>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	; (800222c <_sbrk+0x68>)
 80021e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021e6:	4b10      	ldr	r3, [pc, #64]	; (8002228 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d207      	bcs.n	8002204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021f4:	f00a f92e 	bl	800c454 <__errno>
 80021f8:	4603      	mov	r3, r0
 80021fa:	220c      	movs	r2, #12
 80021fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002202:	e009      	b.n	8002218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <_sbrk+0x64>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800220a:	4b07      	ldr	r3, [pc, #28]	; (8002228 <_sbrk+0x64>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a05      	ldr	r2, [pc, #20]	; (8002228 <_sbrk+0x64>)
 8002214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002216:	68fb      	ldr	r3, [r7, #12]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	24080000 	.word	0x24080000
 8002224:	00000400 	.word	0x00000400
 8002228:	24000278 	.word	0x24000278
 800222c:	240009b8 	.word	0x240009b8

08002230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002234:	f7fe fa28 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800223a:	490d      	ldr	r1, [pc, #52]	; (8002270 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002250:	4c0a      	ldr	r4, [pc, #40]	; (800227c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800225e:	f00a f8ff 	bl	800c460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002262:	f7fe fb75 	bl	8000950 <main>
  bx  lr
 8002266:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002268:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800226c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002270:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8002274:	0800f5c4 	.word	0x0800f5c4
  ldr r2, =_sbss
 8002278:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 800227c:	240009b8 	.word	0x240009b8

08002280 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC3_IRQHandler>
	...

08002284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228a:	2003      	movs	r0, #3
 800228c:	f001 fa16 	bl	80036bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002290:	f004 ff42 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_Init+0x68>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	4913      	ldr	r1, [pc, #76]	; (80022f0 <HAL_Init+0x6c>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_Init+0x68>)
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_Init+0x6c>)
 80022b8:	5cd3      	ldrb	r3, [r2, r3]
 80022ba:	f003 031f 	and.w	r3, r3, #31
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	fa22 f303 	lsr.w	r3, r2, r3
 80022c4:	4a0b      	ldr	r2, [pc, #44]	; (80022f4 <HAL_Init+0x70>)
 80022c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022c8:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <HAL_Init+0x74>)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f814 	bl	80022fc <HAL_InitTick>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e002      	b.n	80022e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022de:	f7ff fbe1 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	58024400 	.word	0x58024400
 80022f0:	0800f190 	.word	0x0800f190
 80022f4:	24000004 	.word	0x24000004
 80022f8:	24000000 	.word	0x24000000

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <HAL_InitTick+0x60>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e021      	b.n	8002354 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_InitTick+0x64>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <HAL_InitTick+0x60>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4619      	mov	r1, r3
 800231a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002322:	fbb2 f3f3 	udiv	r3, r2, r3
 8002326:	4618      	mov	r0, r3
 8002328:	f001 f9fb 	bl	8003722 <HAL_SYSTICK_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e00e      	b.n	8002354 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b0f      	cmp	r3, #15
 800233a:	d80a      	bhi.n	8002352 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800233c:	2200      	movs	r2, #0
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	f04f 30ff 	mov.w	r0, #4294967295
 8002344:	f001 f9c5 	bl	80036d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <HAL_InitTick+0x68>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
 8002350:	e000      	b.n	8002354 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
}
 8002354:	4618      	mov	r0, r3
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	2400001c 	.word	0x2400001c
 8002360:	24000000 	.word	0x24000000
 8002364:	24000018 	.word	0x24000018

08002368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <HAL_IncTick+0x20>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_IncTick+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4413      	add	r3, r2
 8002378:	4a04      	ldr	r2, [pc, #16]	; (800238c <HAL_IncTick+0x24>)
 800237a:	6013      	str	r3, [r2, #0]
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	2400001c 	.word	0x2400001c
 800238c:	240009a4 	.word	0x240009a4

08002390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return uwTick;
 8002394:	4b03      	ldr	r3, [pc, #12]	; (80023a4 <HAL_GetTick+0x14>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	240009a4 	.word	0x240009a4

080023a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b0:	f7ff ffee 	bl	8002390 <HAL_GetTick>
 80023b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d005      	beq.n	80023ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023c2:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <HAL_Delay+0x44>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ce:	bf00      	nop
 80023d0:	f7ff ffde 	bl	8002390 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d8f7      	bhi.n	80023d0 <HAL_Delay+0x28>
  {
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	2400001c 	.word	0x2400001c

080023f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_GetREVID+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0c1b      	lsrs	r3, r3, #16
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	5c001000 	.word	0x5c001000

08002408 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	609a      	str	r2, [r3, #8]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	609a      	str	r2, [r3, #8]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	431a      	orrs	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	611a      	str	r2, [r3, #16]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b087      	sub	sp, #28
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3360      	adds	r3, #96	; 0x60
 80024f2:	461a      	mov	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	431a      	orrs	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]
  }
}
 800250c:	bf00      	nop
 800250e:	371c      	adds	r7, #28
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	3330      	adds	r3, #48	; 0x30
 8002528:	461a      	mov	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	4413      	add	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	211f      	movs	r1, #31
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	401a      	ands	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0e9b      	lsrs	r3, r3, #26
 8002550:	f003 011f 	and.w	r1, r3, #31
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 031f 	and.w	r3, r3, #31
 800255a:	fa01 f303 	lsl.w	r3, r1, r3
 800255e:	431a      	orrs	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002564:	bf00      	nop
 8002566:	371c      	adds	r7, #28
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3314      	adds	r3, #20
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	0e5b      	lsrs	r3, r3, #25
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	4413      	add	r3, r2
 800258e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	0d1b      	lsrs	r3, r3, #20
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2107      	movs	r1, #7
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	401a      	ands	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	0d1b      	lsrs	r3, r3, #20
 80025aa:	f003 031f 	and.w	r3, r3, #31
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	fa01 f303 	lsl.w	r3, r1, r3
 80025b4:	431a      	orrs	r2, r3
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0318 	and.w	r3, r3, #24
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <LL_ADC_SetChannelSingleDiff+0x44>)
 80025ec:	40d9      	lsrs	r1, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	400b      	ands	r3, r1
 80025f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	000fffff 	.word	0x000fffff

08002610 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <LL_ADC_DisableDeepPowerDown+0x20>)
 800261e:	4013      	ands	r3, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6093      	str	r3, [r2, #8]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	5fffffc0 	.word	0x5fffffc0

08002634 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002648:	d101      	bne.n	800264e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	4b05      	ldr	r3, [pc, #20]	; (8002680 <LL_ADC_EnableInternalRegulator+0x24>)
 800266a:	4013      	ands	r3, r2
 800266c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	6fffffc0 	.word	0x6fffffc0

08002684 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002698:	d101      	bne.n	800269e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <LL_ADC_IsEnabled+0x18>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <LL_ADC_IsEnabled+0x1a>
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d101      	bne.n	80026ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0308 	and.w	r3, r3, #8
 8002708:	2b08      	cmp	r3, #8
 800270a:	d101      	bne.n	8002710 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e18e      	b.n	8002a58 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	2b00      	cmp	r3, #0
 8002746:	d109      	bne.n	800275c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff f9c5 	bl	8001ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff67 	bl	8002634 <LL_ADC_IsDeepPowerDownEnabled>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff4d 	bl	8002610 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff82 	bl	8002684 <LL_ADC_IsInternalRegulatorEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d114      	bne.n	80027b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff66 	bl	800265c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002790:	4b9a      	ldr	r3, [pc, #616]	; (80029fc <HAL_ADC_Init+0x2dc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	4a9a      	ldr	r2, [pc, #616]	; (8002a00 <HAL_ADC_Init+0x2e0>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	3301      	adds	r3, #1
 80027a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027a2:	e002      	b.n	80027aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f9      	bne.n	80027a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff65 	bl	8002684 <LL_ADC_IsInternalRegulatorEnabled>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10d      	bne.n	80027dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f043 0210 	orr.w	r2, r3, #16
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f043 0201 	orr.w	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff76 	bl	80026d2 <LL_ADC_REG_IsConversionOngoing>
 80027e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f040 8128 	bne.w	8002a46 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f040 8124 	bne.w	8002a46 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002806:	f043 0202 	orr.w	r2, r3, #2
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff4a 	bl	80026ac <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d136      	bne.n	800288c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a78      	ldr	r2, [pc, #480]	; (8002a04 <HAL_ADC_Init+0x2e4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d004      	beq.n	8002832 <HAL_ADC_Init+0x112>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a76      	ldr	r2, [pc, #472]	; (8002a08 <HAL_ADC_Init+0x2e8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d10e      	bne.n	8002850 <HAL_ADC_Init+0x130>
 8002832:	4874      	ldr	r0, [pc, #464]	; (8002a04 <HAL_ADC_Init+0x2e4>)
 8002834:	f7ff ff3a 	bl	80026ac <LL_ADC_IsEnabled>
 8002838:	4604      	mov	r4, r0
 800283a:	4873      	ldr	r0, [pc, #460]	; (8002a08 <HAL_ADC_Init+0x2e8>)
 800283c:	f7ff ff36 	bl	80026ac <LL_ADC_IsEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	4323      	orrs	r3, r4
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e008      	b.n	8002862 <HAL_ADC_Init+0x142>
 8002850:	486e      	ldr	r0, [pc, #440]	; (8002a0c <HAL_ADC_Init+0x2ec>)
 8002852:	f7ff ff2b 	bl	80026ac <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf0c      	ite	eq
 800285c:	2301      	moveq	r3, #1
 800285e:	2300      	movne	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d012      	beq.n	800288c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a66      	ldr	r2, [pc, #408]	; (8002a04 <HAL_ADC_Init+0x2e4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d004      	beq.n	800287a <HAL_ADC_Init+0x15a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a64      	ldr	r2, [pc, #400]	; (8002a08 <HAL_ADC_Init+0x2e8>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_ADC_Init+0x15e>
 800287a:	4a65      	ldr	r2, [pc, #404]	; (8002a10 <HAL_ADC_Init+0x2f0>)
 800287c:	e000      	b.n	8002880 <HAL_ADC_Init+0x160>
 800287e:	4a65      	ldr	r2, [pc, #404]	; (8002a14 <HAL_ADC_Init+0x2f4>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7ff fdbe 	bl	8002408 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800288c:	f7ff fdb0 	bl	80023f0 <HAL_GetREVID>
 8002890:	4603      	mov	r3, r0
 8002892:	f241 0203 	movw	r2, #4099	; 0x1003
 8002896:	4293      	cmp	r3, r2
 8002898:	d914      	bls.n	80028c4 <HAL_ADC_Init+0x1a4>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d110      	bne.n	80028c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	7d5b      	ldrb	r3, [r3, #21]
 80028a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7f1b      	ldrb	r3, [r3, #28]
 80028b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028bc:	f043 030c 	orr.w	r3, r3, #12
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e00d      	b.n	80028e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7d5b      	ldrb	r3, [r3, #21]
 80028c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7f1b      	ldrb	r3, [r3, #28]
 80028da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7f1b      	ldrb	r3, [r3, #28]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	045b      	lsls	r3, r3, #17
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_ADC_Init+0x2f8>)
 800291a:	4013      	ands	r3, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	69b9      	ldr	r1, [r7, #24]
 8002922:	430b      	orrs	r3, r1
 8002924:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fed1 	bl	80026d2 <LL_ADC_REG_IsConversionOngoing>
 8002930:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fede 	bl	80026f8 <LL_ADC_INJ_IsConversionOngoing>
 800293c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d14a      	bne.n	80029da <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d147      	bne.n	80029da <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7d1b      	ldrb	r3, [r3, #20]
 800294e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	4b2f      	ldr	r3, [pc, #188]	; (8002a1c <HAL_ADC_Init+0x2fc>)
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	69b9      	ldr	r1, [r7, #24]
 8002968:	430b      	orrs	r3, r1
 800296a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002972:	2b01      	cmp	r3, #1
 8002974:	d11b      	bne.n	80029ae <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	691a      	ldr	r2, [r3, #16]
 8002982:	4b27      	ldr	r3, [pc, #156]	; (8002a20 <HAL_ADC_Init+0x300>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800298a:	3a01      	subs	r2, #1
 800298c:	0411      	lsls	r1, r2, #16
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002992:	4311      	orrs	r1, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002998:	4311      	orrs	r1, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800299e:	430a      	orrs	r2, r1
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	611a      	str	r2, [r3, #16]
 80029ac:	e007      	b.n	80029be <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0201 	bic.w	r2, r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb93 	bl	8003100 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d120      	bne.n	8002a24 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	f023 010f 	bic.w	r1, r3, #15
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	1e5a      	subs	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
 80029fa:	e01b      	b.n	8002a34 <HAL_ADC_Init+0x314>
 80029fc:	24000000 	.word	0x24000000
 8002a00:	053e2d63 	.word	0x053e2d63
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40022100 	.word	0x40022100
 8002a0c:	58026000 	.word	0x58026000
 8002a10:	40022300 	.word	0x40022300
 8002a14:	58026300 	.word	0x58026300
 8002a18:	fff0c003 	.word	0xfff0c003
 8002a1c:	ffffbffc 	.word	0xffffbffc
 8002a20:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 020f 	bic.w	r2, r2, #15
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	f023 0303 	bic.w	r3, r3, #3
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54
 8002a44:	e007      	b.n	8002a56 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3724      	adds	r7, #36	; 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b0a1      	sub	sp, #132	; 0x84
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a9d      	ldr	r2, [pc, #628]	; (8002cf0 <HAL_ADC_ConfigChannel+0x290>)
 8002a7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x2a>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e321      	b.n	80030ce <HAL_ADC_ConfigChannel+0x66e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe1b 	bl	80026d2 <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 8306 	bne.w	80030b0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d108      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x62>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	2201      	movs	r2, #1
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	e016      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x90>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002aca:	fa93 f3a3 	rbit	r3, r3
 8002ace:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ad0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ad2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002ada:	2320      	movs	r3, #32
 8002adc:	e003      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ae0:	fab3 f383 	clz	r3, r3
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2201      	movs	r2, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	69d1      	ldr	r1, [r2, #28]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	6859      	ldr	r1, [r3, #4]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f7ff fd04 	bl	8002518 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff fddc 	bl	80026d2 <LL_ADC_REG_IsConversionOngoing>
 8002b1a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fde9 	bl	80026f8 <LL_ADC_INJ_IsConversionOngoing>
 8002b26:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f040 80b3 	bne.w	8002c96 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 80af 	bne.w	8002c96 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	461a      	mov	r2, r3
 8002b46:	f7ff fd13 	bl	8002570 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_ADC_ConfigChannel+0x294>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b56:	d10b      	bne.n	8002b70 <HAL_ADC_ConfigChannel+0x110>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	e01d      	b.n	8002bac <HAL_ADC_ConfigChannel+0x14c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10b      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x136>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	e00a      	b.n	8002bac <HAL_ADC_ConfigChannel+0x14c>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d027      	beq.n	8002c06 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	6919      	ldr	r1, [r3, #16]
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bc4:	f7ff fc54 	bl	8002470 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6919      	ldr	r1, [r3, #16]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	7e5b      	ldrb	r3, [r3, #25]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d102      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x17e>
 8002bd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x180>
 8002bde:	2300      	movs	r3, #0
 8002be0:	461a      	mov	r2, r3
 8002be2:	f7ff fc7e 	bl	80024e2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6919      	ldr	r1, [r3, #16]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	7e1b      	ldrb	r3, [r3, #24]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d102      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x19c>
 8002bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bfa:	e000      	b.n	8002bfe <HAL_ADC_ConfigChannel+0x19e>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f7ff fc56 	bl	80024b0 <LL_ADC_SetDataRightShift>
 8002c04:	e047      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	069b      	lsls	r3, r3, #26
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d107      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	069b      	lsls	r3, r3, #26
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d107      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c4c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d107      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c70:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	069b      	lsls	r3, r3, #26
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d107      	bne.n	8002c96 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002c94:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fd06 	bl	80026ac <LL_ADC_IsEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 820d 	bne.w	80030c2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	6819      	ldr	r1, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f7ff fc87 	bl	80025c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <HAL_ADC_ConfigChannel+0x290>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f040 8133 	bne.w	8002f2c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d110      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x298>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	2b09      	cmp	r3, #9
 8002ce4:	bf94      	ite	ls
 8002ce6:	2301      	movls	r3, #1
 8002ce8:	2300      	movhi	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e01e      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x2cc>
 8002cee:	bf00      	nop
 8002cf0:	47ff0000 	.word	0x47ff0000
 8002cf4:	5c001000 	.word	0x5c001000
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e003      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f003 031f 	and.w	r3, r3, #31
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	bf94      	ite	ls
 8002d26:	2301      	movls	r3, #1
 8002d28:	2300      	movhi	r3, #0
 8002d2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d079      	beq.n	8002e24 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d107      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x2ec>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0e9b      	lsrs	r3, r3, #26
 8002d42:	3301      	adds	r3, #1
 8002d44:	069b      	lsls	r3, r3, #26
 8002d46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d4a:	e015      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x318>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002d64:	2320      	movs	r3, #32
 8002d66:	e003      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6a:	fab3 f383 	clz	r3, r3
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	069b      	lsls	r3, r3, #26
 8002d74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d109      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x338>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	0e9b      	lsrs	r3, r3, #26
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	e017      	b.n	8002dc8 <HAL_ADC_ConfigChannel+0x368>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 031f 	and.w	r3, r3, #31
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	ea42 0103 	orr.w	r1, r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d10a      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x38e>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	3301      	adds	r3, #1
 8002de0:	f003 021f 	and.w	r2, r3, #31
 8002de4:	4613      	mov	r3, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	4413      	add	r3, r2
 8002dea:	051b      	lsls	r3, r3, #20
 8002dec:	e018      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x3c0>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e003      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f003 021f 	and.w	r2, r3, #31
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e20:	430b      	orrs	r3, r1
 8002e22:	e07e      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_ADC_ConfigChannel+0x3e0>
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	0e9b      	lsrs	r3, r3, #26
 8002e36:	3301      	adds	r3, #1
 8002e38:	069b      	lsls	r3, r3, #26
 8002e3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e3e:	e015      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x40c>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e48:	fa93 f3a3 	rbit	r3, r3
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e003      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	fab3 f383 	clz	r3, r3
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	3301      	adds	r3, #1
 8002e66:	069b      	lsls	r3, r3, #26
 8002e68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d109      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x42c>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	e017      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x45c>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	61bb      	str	r3, [r7, #24]
  return result;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e003      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	ea42 0103 	orr.w	r1, r2, r3
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10d      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x488>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	3b1e      	subs	r3, #30
 8002ee0:	051b      	lsls	r3, r3, #20
 8002ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	e01b      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x4c0>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002f00:	2320      	movs	r3, #32
 8002f02:	e003      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fab3 f383 	clz	r3, r3
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f003 021f 	and.w	r2, r3, #31
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	3b1e      	subs	r3, #30
 8002f1a:	051b      	lsls	r3, r3, #20
 8002f1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f20:	430b      	orrs	r3, r1
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	6892      	ldr	r2, [r2, #8]
 8002f26:	4619      	mov	r1, r3
 8002f28:	f7ff fb22 	bl	8002570 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f280 80c6 	bge.w	80030c2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a67      	ldr	r2, [pc, #412]	; (80030d8 <HAL_ADC_ConfigChannel+0x678>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_ADC_ConfigChannel+0x4ea>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a65      	ldr	r2, [pc, #404]	; (80030dc <HAL_ADC_ConfigChannel+0x67c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_ConfigChannel+0x4ee>
 8002f4a:	4b65      	ldr	r3, [pc, #404]	; (80030e0 <HAL_ADC_ConfigChannel+0x680>)
 8002f4c:	e000      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x4f0>
 8002f4e:	4b65      	ldr	r3, [pc, #404]	; (80030e4 <HAL_ADC_ConfigChannel+0x684>)
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fa7f 	bl	8002454 <LL_ADC_GetCommonPathInternalCh>
 8002f56:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a5e      	ldr	r2, [pc, #376]	; (80030d8 <HAL_ADC_ConfigChannel+0x678>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_ADC_ConfigChannel+0x50c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5d      	ldr	r2, [pc, #372]	; (80030dc <HAL_ADC_ConfigChannel+0x67c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d10e      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x52a>
 8002f6c:	485a      	ldr	r0, [pc, #360]	; (80030d8 <HAL_ADC_ConfigChannel+0x678>)
 8002f6e:	f7ff fb9d 	bl	80026ac <LL_ADC_IsEnabled>
 8002f72:	4604      	mov	r4, r0
 8002f74:	4859      	ldr	r0, [pc, #356]	; (80030dc <HAL_ADC_ConfigChannel+0x67c>)
 8002f76:	f7ff fb99 	bl	80026ac <LL_ADC_IsEnabled>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4323      	orrs	r3, r4
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e008      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x53c>
 8002f8a:	4857      	ldr	r0, [pc, #348]	; (80030e8 <HAL_ADC_ConfigChannel+0x688>)
 8002f8c:	f7ff fb8e 	bl	80026ac <LL_ADC_IsEnabled>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf0c      	ite	eq
 8002f96:	2301      	moveq	r3, #1
 8002f98:	2300      	movne	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d07d      	beq.n	800309c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a51      	ldr	r2, [pc, #324]	; (80030ec <HAL_ADC_ConfigChannel+0x68c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d130      	bne.n	800300c <HAL_ADC_ConfigChannel+0x5ac>
 8002faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d12b      	bne.n	800300c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a4b      	ldr	r2, [pc, #300]	; (80030e8 <HAL_ADC_ConfigChannel+0x688>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	f040 8081 	bne.w	80030c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a44      	ldr	r2, [pc, #272]	; (80030d8 <HAL_ADC_ConfigChannel+0x678>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x574>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a43      	ldr	r2, [pc, #268]	; (80030dc <HAL_ADC_ConfigChannel+0x67c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x578>
 8002fd4:	4a42      	ldr	r2, [pc, #264]	; (80030e0 <HAL_ADC_ConfigChannel+0x680>)
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_ConfigChannel+0x57a>
 8002fd8:	4a42      	ldr	r2, [pc, #264]	; (80030e4 <HAL_ADC_ConfigChannel+0x684>)
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f7ff fa23 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe8:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_ADC_ConfigChannel+0x690>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	4a41      	ldr	r2, [pc, #260]	; (80030f4 <HAL_ADC_ConfigChannel+0x694>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002ffc:	e002      	b.n	8003004 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3b01      	subs	r3, #1
 8003002:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f9      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800300a:	e05a      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <HAL_ADC_ConfigChannel+0x698>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d11e      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x5f4>
 8003016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d119      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a30      	ldr	r2, [pc, #192]	; (80030e8 <HAL_ADC_ConfigChannel+0x688>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d14b      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <HAL_ADC_ConfigChannel+0x678>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d004      	beq.n	800303e <HAL_ADC_ConfigChannel+0x5de>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <HAL_ADC_ConfigChannel+0x67c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x5e2>
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <HAL_ADC_ConfigChannel+0x680>)
 8003040:	e000      	b.n	8003044 <HAL_ADC_ConfigChannel+0x5e4>
 8003042:	4a28      	ldr	r2, [pc, #160]	; (80030e4 <HAL_ADC_ConfigChannel+0x684>)
 8003044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7ff f9ee 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003052:	e036      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a28      	ldr	r2, [pc, #160]	; (80030fc <HAL_ADC_ConfigChannel+0x69c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d131      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d12c      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_ADC_ConfigChannel+0x688>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d127      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_ADC_ConfigChannel+0x678>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d004      	beq.n	8003086 <HAL_ADC_ConfigChannel+0x626>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_ADC_ConfigChannel+0x67c>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x62a>
 8003086:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_ADC_ConfigChannel+0x680>)
 8003088:	e000      	b.n	800308c <HAL_ADC_ConfigChannel+0x62c>
 800308a:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_ADC_ConfigChannel+0x684>)
 800308c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003092:	4619      	mov	r1, r3
 8003094:	4610      	mov	r0, r2
 8003096:	f7ff f9ca 	bl	800242e <LL_ADC_SetCommonPathInternalCh>
 800309a:	e012      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f043 0220 	orr.w	r2, r3, #32
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80030ae:	e008      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3784      	adds	r7, #132	; 0x84
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd90      	pop	{r4, r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40022100 	.word	0x40022100
 80030e0:	40022300 	.word	0x40022300
 80030e4:	58026300 	.word	0x58026300
 80030e8:	58026000 	.word	0x58026000
 80030ec:	cb840000 	.word	0xcb840000
 80030f0:	24000000 	.word	0x24000000
 80030f4:	053e2d63 	.word	0x053e2d63
 80030f8:	c7520000 	.word	0xc7520000
 80030fc:	cfb80000 	.word	0xcfb80000

08003100 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a79      	ldr	r2, [pc, #484]	; (80032f4 <ADC_ConfigureBoostMode+0x1f4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d004      	beq.n	800311c <ADC_ConfigureBoostMode+0x1c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a78      	ldr	r2, [pc, #480]	; (80032f8 <ADC_ConfigureBoostMode+0x1f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d109      	bne.n	8003130 <ADC_ConfigureBoostMode+0x30>
 800311c:	4b77      	ldr	r3, [pc, #476]	; (80032fc <ADC_ConfigureBoostMode+0x1fc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf14      	ite	ne
 8003128:	2301      	movne	r3, #1
 800312a:	2300      	moveq	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e008      	b.n	8003142 <ADC_ConfigureBoostMode+0x42>
 8003130:	4b73      	ldr	r3, [pc, #460]	; (8003300 <ADC_ConfigureBoostMode+0x200>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf14      	ite	ne
 800313c:	2301      	movne	r3, #1
 800313e:	2300      	moveq	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01c      	beq.n	8003180 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003146:	f004 f961 	bl	800740c <HAL_RCC_GetHCLKFreq>
 800314a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003154:	d010      	beq.n	8003178 <ADC_ConfigureBoostMode+0x78>
 8003156:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800315a:	d871      	bhi.n	8003240 <ADC_ConfigureBoostMode+0x140>
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d002      	beq.n	8003168 <ADC_ConfigureBoostMode+0x68>
 8003162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003166:	d16b      	bne.n	8003240 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	0c1b      	lsrs	r3, r3, #16
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	fbb2 f3f3 	udiv	r3, r2, r3
 8003174:	60fb      	str	r3, [r7, #12]
        break;
 8003176:	e066      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	089b      	lsrs	r3, r3, #2
 800317c:	60fb      	str	r3, [r7, #12]
        break;
 800317e:	e062      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003180:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003184:	f005 f8de 	bl	8008344 <HAL_RCCEx_GetPeriphCLKFreq>
 8003188:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003192:	d051      	beq.n	8003238 <ADC_ConfigureBoostMode+0x138>
 8003194:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003198:	d854      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 800319a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800319e:	d047      	beq.n	8003230 <ADC_ConfigureBoostMode+0x130>
 80031a0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80031a4:	d84e      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031a6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031aa:	d03d      	beq.n	8003228 <ADC_ConfigureBoostMode+0x128>
 80031ac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80031b0:	d848      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031b6:	d033      	beq.n	8003220 <ADC_ConfigureBoostMode+0x120>
 80031b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031bc:	d842      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031be:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031c2:	d029      	beq.n	8003218 <ADC_ConfigureBoostMode+0x118>
 80031c4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80031c8:	d83c      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031ca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031ce:	d01a      	beq.n	8003206 <ADC_ConfigureBoostMode+0x106>
 80031d0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80031d4:	d836      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031d6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031da:	d014      	beq.n	8003206 <ADC_ConfigureBoostMode+0x106>
 80031dc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80031e0:	d830      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e6:	d00e      	beq.n	8003206 <ADC_ConfigureBoostMode+0x106>
 80031e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ec:	d82a      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f2:	d008      	beq.n	8003206 <ADC_ConfigureBoostMode+0x106>
 80031f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031f8:	d824      	bhi.n	8003244 <ADC_ConfigureBoostMode+0x144>
 80031fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031fe:	d002      	beq.n	8003206 <ADC_ConfigureBoostMode+0x106>
 8003200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003204:	d11e      	bne.n	8003244 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	0c9b      	lsrs	r3, r3, #18
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	fbb2 f3f3 	udiv	r3, r2, r3
 8003214:	60fb      	str	r3, [r7, #12]
        break;
 8003216:	e016      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
        break;
 800321e:	e012      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	60fb      	str	r3, [r7, #12]
        break;
 8003226:	e00e      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	60fb      	str	r3, [r7, #12]
        break;
 800322e:	e00a      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	09db      	lsrs	r3, r3, #7
 8003234:	60fb      	str	r3, [r7, #12]
        break;
 8003236:	e006      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	60fb      	str	r3, [r7, #12]
        break;
 800323e:	e002      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
        break;
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003244:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003246:	f7ff f8d3 	bl	80023f0 <HAL_GetREVID>
 800324a:	4603      	mov	r3, r0
 800324c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003250:	4293      	cmp	r3, r2
 8003252:	d815      	bhi.n	8003280 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <ADC_ConfigureBoostMode+0x204>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d908      	bls.n	800326e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800326c:	e03e      	b.n	80032ec <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327c:	609a      	str	r2, [r3, #8]
}
 800327e:	e035      	b.n	80032ec <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <ADC_ConfigureBoostMode+0x208>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d808      	bhi.n	80032a0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800329c:	609a      	str	r2, [r3, #8]
}
 800329e:	e025      	b.n	80032ec <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a1a      	ldr	r2, [pc, #104]	; (800330c <ADC_ConfigureBoostMode+0x20c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d80a      	bhi.n	80032be <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	e016      	b.n	80032ec <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4a13      	ldr	r2, [pc, #76]	; (8003310 <ADC_ConfigureBoostMode+0x210>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d80a      	bhi.n	80032dc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	e007      	b.n	80032ec <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689a      	ldr	r2, [r3, #8]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40022100 	.word	0x40022100
 80032fc:	40022300 	.word	0x40022300
 8003300:	58026300 	.word	0x58026300
 8003304:	01312d00 	.word	0x01312d00
 8003308:	005f5e10 	.word	0x005f5e10
 800330c:	00bebc20 	.word	0x00bebc20
 8003310:	017d7840 	.word	0x017d7840

08003314 <LL_ADC_IsEnabled>:
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <LL_ADC_IsEnabled+0x18>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <LL_ADC_IsEnabled+0x1a>
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_ADC_REG_IsConversionOngoing>:
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	d101      	bne.n	8003352 <LL_ADC_REG_IsConversionOngoing+0x18>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003360:	b590      	push	{r4, r7, lr}
 8003362:	b09f      	sub	sp, #124	; 0x7c
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800337a:	2302      	movs	r3, #2
 800337c:	e0be      	b.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003386:	2300      	movs	r3, #0
 8003388:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800338a:	2300      	movs	r3, #0
 800338c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d102      	bne.n	800339e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003398:	4b5b      	ldr	r3, [pc, #364]	; (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	e001      	b.n	80033a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800339e:	2300      	movs	r3, #0
 80033a0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e09d      	b.n	80034fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ffb9 	bl	800333a <LL_ADC_REG_IsConversionOngoing>
 80033c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ffb3 	bl	800333a <LL_ADC_REG_IsConversionOngoing>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d17f      	bne.n	80034da <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80033da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d17c      	bne.n	80034da <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a47      	ldr	r2, [pc, #284]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a46      	ldr	r2, [pc, #280]	; (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80033f4:	4b45      	ldr	r3, [pc, #276]	; (800350c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80033f6:	e000      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80033f8:	4b45      	ldr	r3, [pc, #276]	; (8003510 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80033fa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d039      	beq.n	8003478 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	431a      	orrs	r2, r3
 8003412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003414:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a3a      	ldr	r2, [pc, #232]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d10e      	bne.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800342a:	4836      	ldr	r0, [pc, #216]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800342c:	f7ff ff72 	bl	8003314 <LL_ADC_IsEnabled>
 8003430:	4604      	mov	r4, r0
 8003432:	4835      	ldr	r0, [pc, #212]	; (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003434:	f7ff ff6e 	bl	8003314 <LL_ADC_IsEnabled>
 8003438:	4603      	mov	r3, r0
 800343a:	4323      	orrs	r3, r4
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e008      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003448:	4832      	ldr	r0, [pc, #200]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800344a:	f7ff ff63 	bl	8003314 <LL_ADC_IsEnabled>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d047      	beq.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800345e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003464:	4013      	ands	r3, r2
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	6811      	ldr	r1, [r2, #0]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	430a      	orrs	r2, r1
 8003470:	431a      	orrs	r2, r3
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003476:	e03a      	b.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003482:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1e      	ldr	r2, [pc, #120]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d10e      	bne.n	80034b6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003498:	481a      	ldr	r0, [pc, #104]	; (8003504 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800349a:	f7ff ff3b 	bl	8003314 <LL_ADC_IsEnabled>
 800349e:	4604      	mov	r4, r0
 80034a0:	4819      	ldr	r0, [pc, #100]	; (8003508 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80034a2:	f7ff ff37 	bl	8003314 <LL_ADC_IsEnabled>
 80034a6:	4603      	mov	r3, r0
 80034a8:	4323      	orrs	r3, r4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bf0c      	ite	eq
 80034ae:	2301      	moveq	r3, #1
 80034b0:	2300      	movne	r3, #0
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	e008      	b.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80034b6:	4817      	ldr	r0, [pc, #92]	; (8003514 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80034b8:	f7ff ff2c 	bl	8003314 <LL_ADC_IsEnabled>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d010      	beq.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	4b11      	ldr	r3, [pc, #68]	; (8003518 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034d6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034d8:	e009      	b.n	80034ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80034ec:	e000      	b.n	80034f0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80034ee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	377c      	adds	r7, #124	; 0x7c
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}
 8003504:	40022000 	.word	0x40022000
 8003508:	40022100 	.word	0x40022100
 800350c:	40022300 	.word	0x40022300
 8003510:	58026300 	.word	0x58026300
 8003514:	58026000 	.word	0x58026000
 8003518:	fffff0e0 	.word	0xfffff0e0

0800351c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <__NVIC_SetPriorityGrouping+0x40>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003538:	4013      	ands	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003544:	4b06      	ldr	r3, [pc, #24]	; (8003560 <__NVIC_SetPriorityGrouping+0x44>)
 8003546:	4313      	orrs	r3, r2
 8003548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800354a:	4a04      	ldr	r2, [pc, #16]	; (800355c <__NVIC_SetPriorityGrouping+0x40>)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	60d3      	str	r3, [r2, #12]
}
 8003550:	bf00      	nop
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000ed00 	.word	0xe000ed00
 8003560:	05fa0000 	.word	0x05fa0000

08003564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003568:	4b04      	ldr	r3, [pc, #16]	; (800357c <__NVIC_GetPriorityGrouping+0x18>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	f003 0307 	and.w	r3, r3, #7
}
 8003572:	4618      	mov	r0, r3
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	4603      	mov	r3, r0
 8003588:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800358a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800358e:	2b00      	cmp	r3, #0
 8003590:	db0b      	blt.n	80035aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003592:	88fb      	ldrh	r3, [r7, #6]
 8003594:	f003 021f 	and.w	r2, r3, #31
 8003598:	4907      	ldr	r1, [pc, #28]	; (80035b8 <__NVIC_EnableIRQ+0x38>)
 800359a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	2001      	movs	r0, #1
 80035a2:	fa00 f202 	lsl.w	r2, r0, r2
 80035a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000e100 	.word	0xe000e100

080035bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80035c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	db0a      	blt.n	80035e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	490c      	ldr	r1, [pc, #48]	; (8003608 <__NVIC_SetPriority+0x4c>)
 80035d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	440b      	add	r3, r1
 80035e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035e4:	e00a      	b.n	80035fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <__NVIC_SetPriority+0x50>)
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	3b04      	subs	r3, #4
 80035f4:	0112      	lsls	r2, r2, #4
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	440b      	add	r3, r1
 80035fa:	761a      	strb	r2, [r3, #24]
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000e100 	.word	0xe000e100
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	; 0x24
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f1c3 0307 	rsb	r3, r3, #7
 800362a:	2b04      	cmp	r3, #4
 800362c:	bf28      	it	cs
 800362e:	2304      	movcs	r3, #4
 8003630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	3304      	adds	r3, #4
 8003636:	2b06      	cmp	r3, #6
 8003638:	d902      	bls.n	8003640 <NVIC_EncodePriority+0x30>
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3b03      	subs	r3, #3
 800363e:	e000      	b.n	8003642 <NVIC_EncodePriority+0x32>
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003644:	f04f 32ff 	mov.w	r2, #4294967295
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	43da      	mvns	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	401a      	ands	r2, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003658:	f04f 31ff 	mov.w	r1, #4294967295
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	43d9      	mvns	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003668:	4313      	orrs	r3, r2
         );
}
 800366a:	4618      	mov	r0, r3
 800366c:	3724      	adds	r7, #36	; 0x24
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3b01      	subs	r3, #1
 8003684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003688:	d301      	bcc.n	800368e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800368a:	2301      	movs	r3, #1
 800368c:	e00f      	b.n	80036ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800368e:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <SysTick_Config+0x40>)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3b01      	subs	r3, #1
 8003694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003696:	210f      	movs	r1, #15
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
 800369c:	f7ff ff8e 	bl	80035bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <SysTick_Config+0x40>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036a6:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <SysTick_Config+0x40>)
 80036a8:	2207      	movs	r2, #7
 80036aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	e000e010 	.word	0xe000e010

080036bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff29 	bl	800351c <__NVIC_SetPriorityGrouping>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036e0:	f7ff ff40 	bl	8003564 <__NVIC_GetPriorityGrouping>
 80036e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f7ff ff90 	bl	8003610 <NVIC_EncodePriority>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff ff5f 	bl	80035bc <__NVIC_SetPriority>
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b082      	sub	sp, #8
 800370a:	af00      	add	r7, sp, #0
 800370c:	4603      	mov	r3, r0
 800370e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003710:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff33 	bl	8003580 <__NVIC_EnableIRQ>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ffa4 	bl	8003678 <SysTick_Config>
 8003730:	4603      	mov	r3, r0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003744:	f7fe fe24 	bl	8002390 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e316      	b.n	8003d82 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a66      	ldr	r2, [pc, #408]	; (80038f4 <HAL_DMA_Init+0x1b8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d04a      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <HAL_DMA_Init+0x1bc>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d045      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a63      	ldr	r2, [pc, #396]	; (80038fc <HAL_DMA_Init+0x1c0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d040      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a62      	ldr	r2, [pc, #392]	; (8003900 <HAL_DMA_Init+0x1c4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d03b      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a60      	ldr	r2, [pc, #384]	; (8003904 <HAL_DMA_Init+0x1c8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d036      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a5f      	ldr	r2, [pc, #380]	; (8003908 <HAL_DMA_Init+0x1cc>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d031      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a5d      	ldr	r2, [pc, #372]	; (800390c <HAL_DMA_Init+0x1d0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d02c      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a5c      	ldr	r2, [pc, #368]	; (8003910 <HAL_DMA_Init+0x1d4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d027      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a5a      	ldr	r2, [pc, #360]	; (8003914 <HAL_DMA_Init+0x1d8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d022      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a59      	ldr	r2, [pc, #356]	; (8003918 <HAL_DMA_Init+0x1dc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d01d      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a57      	ldr	r2, [pc, #348]	; (800391c <HAL_DMA_Init+0x1e0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a56      	ldr	r2, [pc, #344]	; (8003920 <HAL_DMA_Init+0x1e4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a54      	ldr	r2, [pc, #336]	; (8003924 <HAL_DMA_Init+0x1e8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a53      	ldr	r2, [pc, #332]	; (8003928 <HAL_DMA_Init+0x1ec>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a51      	ldr	r2, [pc, #324]	; (800392c <HAL_DMA_Init+0x1f0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_DMA_Init+0xb8>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_DMA_Init+0x1f4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_DMA_Init+0xbc>
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_DMA_Init+0xbe>
 80037f8:	2300      	movs	r3, #0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 813b 	beq.w	8003a76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a37      	ldr	r2, [pc, #220]	; (80038f4 <HAL_DMA_Init+0x1b8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d04a      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a36      	ldr	r2, [pc, #216]	; (80038f8 <HAL_DMA_Init+0x1bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d045      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a34      	ldr	r2, [pc, #208]	; (80038fc <HAL_DMA_Init+0x1c0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d040      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a33      	ldr	r2, [pc, #204]	; (8003900 <HAL_DMA_Init+0x1c4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d03b      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a31      	ldr	r2, [pc, #196]	; (8003904 <HAL_DMA_Init+0x1c8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d036      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a30      	ldr	r2, [pc, #192]	; (8003908 <HAL_DMA_Init+0x1cc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d031      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2e      	ldr	r2, [pc, #184]	; (800390c <HAL_DMA_Init+0x1d0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d02c      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2d      	ldr	r2, [pc, #180]	; (8003910 <HAL_DMA_Init+0x1d4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d027      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2b      	ldr	r2, [pc, #172]	; (8003914 <HAL_DMA_Init+0x1d8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d022      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <HAL_DMA_Init+0x1dc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d01d      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a28      	ldr	r2, [pc, #160]	; (800391c <HAL_DMA_Init+0x1e0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d018      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a27      	ldr	r2, [pc, #156]	; (8003920 <HAL_DMA_Init+0x1e4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <HAL_DMA_Init+0x1e8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00e      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a24      	ldr	r2, [pc, #144]	; (8003928 <HAL_DMA_Init+0x1ec>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d009      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a22      	ldr	r2, [pc, #136]	; (800392c <HAL_DMA_Init+0x1f0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_DMA_Init+0x174>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a21      	ldr	r2, [pc, #132]	; (8003930 <HAL_DMA_Init+0x1f4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d108      	bne.n	80038c2 <HAL_DMA_Init+0x186>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	e007      	b.n	80038d2 <HAL_DMA_Init+0x196>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038d2:	e02f      	b.n	8003934 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038d4:	f7fe fd5c 	bl	8002390 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b05      	cmp	r3, #5
 80038e0:	d928      	bls.n	8003934 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2203      	movs	r2, #3
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e246      	b.n	8003d82 <HAL_DMA_Init+0x646>
 80038f4:	40020010 	.word	0x40020010
 80038f8:	40020028 	.word	0x40020028
 80038fc:	40020040 	.word	0x40020040
 8003900:	40020058 	.word	0x40020058
 8003904:	40020070 	.word	0x40020070
 8003908:	40020088 	.word	0x40020088
 800390c:	400200a0 	.word	0x400200a0
 8003910:	400200b8 	.word	0x400200b8
 8003914:	40020410 	.word	0x40020410
 8003918:	40020428 	.word	0x40020428
 800391c:	40020440 	.word	0x40020440
 8003920:	40020458 	.word	0x40020458
 8003924:	40020470 	.word	0x40020470
 8003928:	40020488 	.word	0x40020488
 800392c:	400204a0 	.word	0x400204a0
 8003930:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1c8      	bne.n	80038d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	4b83      	ldr	r3, [pc, #524]	; (8003b5c <HAL_DMA_Init+0x420>)
 800394e:	4013      	ands	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800395a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003966:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003972:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b04      	cmp	r3, #4
 8003986:	d107      	bne.n	8003998 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4313      	orrs	r3, r2
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003998:	4b71      	ldr	r3, [pc, #452]	; (8003b60 <HAL_DMA_Init+0x424>)
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <HAL_DMA_Init+0x428>)
 800399e:	4013      	ands	r3, r2
 80039a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a4:	d328      	bcc.n	80039f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b28      	cmp	r3, #40	; 0x28
 80039ac:	d903      	bls.n	80039b6 <HAL_DMA_Init+0x27a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b2e      	cmp	r3, #46	; 0x2e
 80039b4:	d917      	bls.n	80039e6 <HAL_DMA_Init+0x2aa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b3e      	cmp	r3, #62	; 0x3e
 80039bc:	d903      	bls.n	80039c6 <HAL_DMA_Init+0x28a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b42      	cmp	r3, #66	; 0x42
 80039c4:	d90f      	bls.n	80039e6 <HAL_DMA_Init+0x2aa>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b46      	cmp	r3, #70	; 0x46
 80039cc:	d903      	bls.n	80039d6 <HAL_DMA_Init+0x29a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b48      	cmp	r3, #72	; 0x48
 80039d4:	d907      	bls.n	80039e6 <HAL_DMA_Init+0x2aa>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b4e      	cmp	r3, #78	; 0x4e
 80039dc:	d905      	bls.n	80039ea <HAL_DMA_Init+0x2ae>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b52      	cmp	r3, #82	; 0x52
 80039e4:	d801      	bhi.n	80039ea <HAL_DMA_Init+0x2ae>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_DMA_Init+0x2b0>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f023 0307 	bic.w	r3, r3, #7
 8003a0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d117      	bne.n	8003a52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00e      	beq.n	8003a52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f001 f9b9 	bl	8004dac <DMA_CheckFifoParam>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2240      	movs	r2, #64	; 0x40
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e197      	b.n	8003d82 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f001 f8f4 	bl	8004c48 <DMA_CalcBaseAndBitshift>
 8003a60:	4603      	mov	r3, r0
 8003a62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	223f      	movs	r2, #63	; 0x3f
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	e0cd      	b.n	8003c12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <HAL_DMA_Init+0x42c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d022      	beq.n	8003ac6 <HAL_DMA_Init+0x38a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <HAL_DMA_Init+0x430>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d01d      	beq.n	8003ac6 <HAL_DMA_Init+0x38a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a38      	ldr	r2, [pc, #224]	; (8003b70 <HAL_DMA_Init+0x434>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d018      	beq.n	8003ac6 <HAL_DMA_Init+0x38a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a36      	ldr	r2, [pc, #216]	; (8003b74 <HAL_DMA_Init+0x438>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d013      	beq.n	8003ac6 <HAL_DMA_Init+0x38a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <HAL_DMA_Init+0x43c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_DMA_Init+0x38a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a33      	ldr	r2, [pc, #204]	; (8003b7c <HAL_DMA_Init+0x440>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d009      	beq.n	8003ac6 <HAL_DMA_Init+0x38a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a32      	ldr	r2, [pc, #200]	; (8003b80 <HAL_DMA_Init+0x444>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d004      	beq.n	8003ac6 <HAL_DMA_Init+0x38a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	; (8003b84 <HAL_DMA_Init+0x448>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d101      	bne.n	8003aca <HAL_DMA_Init+0x38e>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e000      	b.n	8003acc <HAL_DMA_Init+0x390>
 8003aca:	2300      	movs	r3, #0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8097 	beq.w	8003c00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a24      	ldr	r2, [pc, #144]	; (8003b68 <HAL_DMA_Init+0x42c>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d021      	beq.n	8003b20 <HAL_DMA_Init+0x3e4>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_DMA_Init+0x430>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01c      	beq.n	8003b20 <HAL_DMA_Init+0x3e4>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <HAL_DMA_Init+0x434>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d017      	beq.n	8003b20 <HAL_DMA_Init+0x3e4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <HAL_DMA_Init+0x438>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d012      	beq.n	8003b20 <HAL_DMA_Init+0x3e4>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <HAL_DMA_Init+0x43c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00d      	beq.n	8003b20 <HAL_DMA_Init+0x3e4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1c      	ldr	r2, [pc, #112]	; (8003b7c <HAL_DMA_Init+0x440>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d008      	beq.n	8003b20 <HAL_DMA_Init+0x3e4>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1b      	ldr	r2, [pc, #108]	; (8003b80 <HAL_DMA_Init+0x444>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA_Init+0x3e4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <HAL_DMA_Init+0x448>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <HAL_DMA_Init+0x44c>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b40      	cmp	r3, #64	; 0x40
 8003b48:	d020      	beq.n	8003b8c <HAL_DMA_Init+0x450>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b80      	cmp	r3, #128	; 0x80
 8003b50:	d102      	bne.n	8003b58 <HAL_DMA_Init+0x41c>
 8003b52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b56:	e01a      	b.n	8003b8e <HAL_DMA_Init+0x452>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e018      	b.n	8003b8e <HAL_DMA_Init+0x452>
 8003b5c:	fe10803f 	.word	0xfe10803f
 8003b60:	5c001000 	.word	0x5c001000
 8003b64:	ffff0000 	.word	0xffff0000
 8003b68:	58025408 	.word	0x58025408
 8003b6c:	5802541c 	.word	0x5802541c
 8003b70:	58025430 	.word	0x58025430
 8003b74:	58025444 	.word	0x58025444
 8003b78:	58025458 	.word	0x58025458
 8003b7c:	5802546c 	.word	0x5802546c
 8003b80:	58025480 	.word	0x58025480
 8003b84:	58025494 	.word	0x58025494
 8003b88:	fffe000f 	.word	0xfffe000f
 8003b8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	68d2      	ldr	r2, [r2, #12]
 8003b92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003b9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ba4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003bbc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b6e      	ldr	r3, [pc, #440]	; (8003d8c <HAL_DMA_Init+0x650>)
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4a6e      	ldr	r2, [pc, #440]	; (8003d90 <HAL_DMA_Init+0x654>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	009a      	lsls	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f001 f82f 	bl	8004c48 <DMA_CalcBaseAndBitshift>
 8003bea:	4603      	mov	r3, r0
 8003bec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	e008      	b.n	8003c12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2240      	movs	r2, #64	; 0x40
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e0b7      	b.n	8003d82 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5f      	ldr	r2, [pc, #380]	; (8003d94 <HAL_DMA_Init+0x658>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d072      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a5d      	ldr	r2, [pc, #372]	; (8003d98 <HAL_DMA_Init+0x65c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d06d      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a5c      	ldr	r2, [pc, #368]	; (8003d9c <HAL_DMA_Init+0x660>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d068      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a5a      	ldr	r2, [pc, #360]	; (8003da0 <HAL_DMA_Init+0x664>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d063      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a59      	ldr	r2, [pc, #356]	; (8003da4 <HAL_DMA_Init+0x668>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d05e      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a57      	ldr	r2, [pc, #348]	; (8003da8 <HAL_DMA_Init+0x66c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d059      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a56      	ldr	r2, [pc, #344]	; (8003dac <HAL_DMA_Init+0x670>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d054      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a54      	ldr	r2, [pc, #336]	; (8003db0 <HAL_DMA_Init+0x674>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d04f      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a53      	ldr	r2, [pc, #332]	; (8003db4 <HAL_DMA_Init+0x678>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d04a      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a51      	ldr	r2, [pc, #324]	; (8003db8 <HAL_DMA_Init+0x67c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d045      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a50      	ldr	r2, [pc, #320]	; (8003dbc <HAL_DMA_Init+0x680>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d040      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a4e      	ldr	r2, [pc, #312]	; (8003dc0 <HAL_DMA_Init+0x684>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d03b      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a4d      	ldr	r2, [pc, #308]	; (8003dc4 <HAL_DMA_Init+0x688>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d036      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a4b      	ldr	r2, [pc, #300]	; (8003dc8 <HAL_DMA_Init+0x68c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d031      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4a      	ldr	r2, [pc, #296]	; (8003dcc <HAL_DMA_Init+0x690>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d02c      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a48      	ldr	r2, [pc, #288]	; (8003dd0 <HAL_DMA_Init+0x694>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d027      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a47      	ldr	r2, [pc, #284]	; (8003dd4 <HAL_DMA_Init+0x698>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d022      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a45      	ldr	r2, [pc, #276]	; (8003dd8 <HAL_DMA_Init+0x69c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01d      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a44      	ldr	r2, [pc, #272]	; (8003ddc <HAL_DMA_Init+0x6a0>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d018      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a42      	ldr	r2, [pc, #264]	; (8003de0 <HAL_DMA_Init+0x6a4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a41      	ldr	r2, [pc, #260]	; (8003de4 <HAL_DMA_Init+0x6a8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00e      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a3f      	ldr	r2, [pc, #252]	; (8003de8 <HAL_DMA_Init+0x6ac>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d009      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	; (8003dec <HAL_DMA_Init+0x6b0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d004      	beq.n	8003d02 <HAL_DMA_Init+0x5c6>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a3c      	ldr	r2, [pc, #240]	; (8003df0 <HAL_DMA_Init+0x6b4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_DMA_Init+0x5ca>
 8003d02:	2301      	movs	r3, #1
 8003d04:	e000      	b.n	8003d08 <HAL_DMA_Init+0x5cc>
 8003d06:	2300      	movs	r3, #0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d032      	beq.n	8003d72 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f001 f8c9 	bl	8004ea4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d102      	bne.n	8003d20 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d34:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d010      	beq.n	8003d60 <HAL_DMA_Init+0x624>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d80c      	bhi.n	8003d60 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f001 f946 	bl	8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	e008      	b.n	8003d72 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	a7fdabf8 	.word	0xa7fdabf8
 8003d90:	cccccccd 	.word	0xcccccccd
 8003d94:	40020010 	.word	0x40020010
 8003d98:	40020028 	.word	0x40020028
 8003d9c:	40020040 	.word	0x40020040
 8003da0:	40020058 	.word	0x40020058
 8003da4:	40020070 	.word	0x40020070
 8003da8:	40020088 	.word	0x40020088
 8003dac:	400200a0 	.word	0x400200a0
 8003db0:	400200b8 	.word	0x400200b8
 8003db4:	40020410 	.word	0x40020410
 8003db8:	40020428 	.word	0x40020428
 8003dbc:	40020440 	.word	0x40020440
 8003dc0:	40020458 	.word	0x40020458
 8003dc4:	40020470 	.word	0x40020470
 8003dc8:	40020488 	.word	0x40020488
 8003dcc:	400204a0 	.word	0x400204a0
 8003dd0:	400204b8 	.word	0x400204b8
 8003dd4:	58025408 	.word	0x58025408
 8003dd8:	5802541c 	.word	0x5802541c
 8003ddc:	58025430 	.word	0x58025430
 8003de0:	58025444 	.word	0x58025444
 8003de4:	58025458 	.word	0x58025458
 8003de8:	5802546c 	.word	0x5802546c
 8003dec:	58025480 	.word	0x58025480
 8003df0:	58025494 	.word	0x58025494

08003df4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b08a      	sub	sp, #40	; 0x28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e00:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <HAL_DMA_IRQHandler+0x1ac>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a67      	ldr	r2, [pc, #412]	; (8003fa4 <HAL_DMA_IRQHandler+0x1b0>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	0a9b      	lsrs	r3, r3, #10
 8003e0c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e12:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e18:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5f      	ldr	r2, [pc, #380]	; (8003fa8 <HAL_DMA_IRQHandler+0x1b4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d04a      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5d      	ldr	r2, [pc, #372]	; (8003fac <HAL_DMA_IRQHandler+0x1b8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d045      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a5c      	ldr	r2, [pc, #368]	; (8003fb0 <HAL_DMA_IRQHandler+0x1bc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d040      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a5a      	ldr	r2, [pc, #360]	; (8003fb4 <HAL_DMA_IRQHandler+0x1c0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d03b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a59      	ldr	r2, [pc, #356]	; (8003fb8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d036      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a57      	ldr	r2, [pc, #348]	; (8003fbc <HAL_DMA_IRQHandler+0x1c8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a56      	ldr	r2, [pc, #344]	; (8003fc0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a54      	ldr	r2, [pc, #336]	; (8003fc4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d027      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a53      	ldr	r2, [pc, #332]	; (8003fc8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a51      	ldr	r2, [pc, #324]	; (8003fcc <HAL_DMA_IRQHandler+0x1d8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01d      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a50      	ldr	r2, [pc, #320]	; (8003fd0 <HAL_DMA_IRQHandler+0x1dc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a4e      	ldr	r2, [pc, #312]	; (8003fd4 <HAL_DMA_IRQHandler+0x1e0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a4d      	ldr	r2, [pc, #308]	; (8003fd8 <HAL_DMA_IRQHandler+0x1e4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a4b      	ldr	r2, [pc, #300]	; (8003fdc <HAL_DMA_IRQHandler+0x1e8>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4a      	ldr	r2, [pc, #296]	; (8003fe0 <HAL_DMA_IRQHandler+0x1ec>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xd2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a48      	ldr	r2, [pc, #288]	; (8003fe4 <HAL_DMA_IRQHandler+0x1f0>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_IRQHandler+0xd6>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <HAL_DMA_IRQHandler+0xd8>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 842b 	beq.w	8004728 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2208      	movs	r2, #8
 8003edc:	409a      	lsls	r2, r3
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80a2 	beq.w	800402c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2e      	ldr	r2, [pc, #184]	; (8003fa8 <HAL_DMA_IRQHandler+0x1b4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d04a      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2d      	ldr	r2, [pc, #180]	; (8003fac <HAL_DMA_IRQHandler+0x1b8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d045      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2b      	ldr	r2, [pc, #172]	; (8003fb0 <HAL_DMA_IRQHandler+0x1bc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d040      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2a      	ldr	r2, [pc, #168]	; (8003fb4 <HAL_DMA_IRQHandler+0x1c0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d03b      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <HAL_DMA_IRQHandler+0x1c4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d036      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <HAL_DMA_IRQHandler+0x1c8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d031      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a25      	ldr	r2, [pc, #148]	; (8003fc0 <HAL_DMA_IRQHandler+0x1cc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d02c      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a24      	ldr	r2, [pc, #144]	; (8003fc4 <HAL_DMA_IRQHandler+0x1d0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d027      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <HAL_DMA_IRQHandler+0x1d4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d022      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <HAL_DMA_IRQHandler+0x1d8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d01d      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1f      	ldr	r2, [pc, #124]	; (8003fd0 <HAL_DMA_IRQHandler+0x1dc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d018      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a1e      	ldr	r2, [pc, #120]	; (8003fd4 <HAL_DMA_IRQHandler+0x1e0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d013      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1c      	ldr	r2, [pc, #112]	; (8003fd8 <HAL_DMA_IRQHandler+0x1e4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00e      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_DMA_IRQHandler+0x1e8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d009      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a19      	ldr	r2, [pc, #100]	; (8003fe0 <HAL_DMA_IRQHandler+0x1ec>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x194>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <HAL_DMA_IRQHandler+0x1f0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d12f      	bne.n	8003fe8 <HAL_DMA_IRQHandler+0x1f4>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	bf14      	ite	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	2300      	moveq	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	e02e      	b.n	8003ffc <HAL_DMA_IRQHandler+0x208>
 8003f9e:	bf00      	nop
 8003fa0:	24000000 	.word	0x24000000
 8003fa4:	1b4e81b5 	.word	0x1b4e81b5
 8003fa8:	40020010 	.word	0x40020010
 8003fac:	40020028 	.word	0x40020028
 8003fb0:	40020040 	.word	0x40020040
 8003fb4:	40020058 	.word	0x40020058
 8003fb8:	40020070 	.word	0x40020070
 8003fbc:	40020088 	.word	0x40020088
 8003fc0:	400200a0 	.word	0x400200a0
 8003fc4:	400200b8 	.word	0x400200b8
 8003fc8:	40020410 	.word	0x40020410
 8003fcc:	40020428 	.word	0x40020428
 8003fd0:	40020440 	.word	0x40020440
 8003fd4:	40020458 	.word	0x40020458
 8003fd8:	40020470 	.word	0x40020470
 8003fdc:	40020488 	.word	0x40020488
 8003fe0:	400204a0 	.word	0x400204a0
 8003fe4:	400204b8 	.word	0x400204b8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	bf14      	ite	ne
 8003ff6:	2301      	movne	r3, #1
 8003ff8:	2300      	moveq	r3, #0
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0204 	bic.w	r2, r2, #4
 800400e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	2208      	movs	r2, #8
 800401a:	409a      	lsls	r2, r3
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004024:	f043 0201 	orr.w	r2, r3, #1
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	fa22 f303 	lsr.w	r3, r2, r3
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d06e      	beq.n	8004120 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a69      	ldr	r2, [pc, #420]	; (80041ec <HAL_DMA_IRQHandler+0x3f8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d04a      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a67      	ldr	r2, [pc, #412]	; (80041f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d045      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a66      	ldr	r2, [pc, #408]	; (80041f4 <HAL_DMA_IRQHandler+0x400>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d040      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a64      	ldr	r2, [pc, #400]	; (80041f8 <HAL_DMA_IRQHandler+0x404>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d03b      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a63      	ldr	r2, [pc, #396]	; (80041fc <HAL_DMA_IRQHandler+0x408>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d036      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a61      	ldr	r2, [pc, #388]	; (8004200 <HAL_DMA_IRQHandler+0x40c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d031      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a60      	ldr	r2, [pc, #384]	; (8004204 <HAL_DMA_IRQHandler+0x410>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d02c      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a5e      	ldr	r2, [pc, #376]	; (8004208 <HAL_DMA_IRQHandler+0x414>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d027      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a5d      	ldr	r2, [pc, #372]	; (800420c <HAL_DMA_IRQHandler+0x418>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a5b      	ldr	r2, [pc, #364]	; (8004210 <HAL_DMA_IRQHandler+0x41c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01d      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5a      	ldr	r2, [pc, #360]	; (8004214 <HAL_DMA_IRQHandler+0x420>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_DMA_IRQHandler+0x424>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a57      	ldr	r2, [pc, #348]	; (800421c <HAL_DMA_IRQHandler+0x428>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a55      	ldr	r2, [pc, #340]	; (8004220 <HAL_DMA_IRQHandler+0x42c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a54      	ldr	r2, [pc, #336]	; (8004224 <HAL_DMA_IRQHandler+0x430>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_IRQHandler+0x2ee>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_DMA_IRQHandler+0x434>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10a      	bne.n	80040f8 <HAL_DMA_IRQHandler+0x304>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e003      	b.n	8004100 <HAL_DMA_IRQHandler+0x30c>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2201      	movs	r2, #1
 800410e:	409a      	lsls	r2, r3
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004118:	f043 0202 	orr.w	r2, r3, #2
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2204      	movs	r2, #4
 800412a:	409a      	lsls	r2, r3
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	4013      	ands	r3, r2
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 808f 	beq.w	8004254 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2c      	ldr	r2, [pc, #176]	; (80041ec <HAL_DMA_IRQHandler+0x3f8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d04a      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <HAL_DMA_IRQHandler+0x3fc>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d045      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a29      	ldr	r2, [pc, #164]	; (80041f4 <HAL_DMA_IRQHandler+0x400>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d040      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <HAL_DMA_IRQHandler+0x404>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d03b      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a26      	ldr	r2, [pc, #152]	; (80041fc <HAL_DMA_IRQHandler+0x408>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a24      	ldr	r2, [pc, #144]	; (8004200 <HAL_DMA_IRQHandler+0x40c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d031      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a23      	ldr	r2, [pc, #140]	; (8004204 <HAL_DMA_IRQHandler+0x410>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d02c      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a21      	ldr	r2, [pc, #132]	; (8004208 <HAL_DMA_IRQHandler+0x414>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d027      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a20      	ldr	r2, [pc, #128]	; (800420c <HAL_DMA_IRQHandler+0x418>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d022      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <HAL_DMA_IRQHandler+0x41c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01d      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <HAL_DMA_IRQHandler+0x420>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <HAL_DMA_IRQHandler+0x424>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d013      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <HAL_DMA_IRQHandler+0x428>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00e      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_DMA_IRQHandler+0x42c>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d009      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <HAL_DMA_IRQHandler+0x430>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d004      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x3e2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <HAL_DMA_IRQHandler+0x434>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d12a      	bne.n	800422c <HAL_DMA_IRQHandler+0x438>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	bf14      	ite	ne
 80041e4:	2301      	movne	r3, #1
 80041e6:	2300      	moveq	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e023      	b.n	8004234 <HAL_DMA_IRQHandler+0x440>
 80041ec:	40020010 	.word	0x40020010
 80041f0:	40020028 	.word	0x40020028
 80041f4:	40020040 	.word	0x40020040
 80041f8:	40020058 	.word	0x40020058
 80041fc:	40020070 	.word	0x40020070
 8004200:	40020088 	.word	0x40020088
 8004204:	400200a0 	.word	0x400200a0
 8004208:	400200b8 	.word	0x400200b8
 800420c:	40020410 	.word	0x40020410
 8004210:	40020428 	.word	0x40020428
 8004214:	40020440 	.word	0x40020440
 8004218:	40020458 	.word	0x40020458
 800421c:	40020470 	.word	0x40020470
 8004220:	40020488 	.word	0x40020488
 8004224:	400204a0 	.word	0x400204a0
 8004228:	400204b8 	.word	0x400204b8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00d      	beq.n	8004254 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2204      	movs	r2, #4
 8004242:	409a      	lsls	r2, r3
 8004244:	6a3b      	ldr	r3, [r7, #32]
 8004246:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f043 0204 	orr.w	r2, r3, #4
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2210      	movs	r2, #16
 800425e:	409a      	lsls	r2, r3
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	4013      	ands	r3, r2
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80a6 	beq.w	80043b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a85      	ldr	r2, [pc, #532]	; (8004484 <HAL_DMA_IRQHandler+0x690>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d04a      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a83      	ldr	r2, [pc, #524]	; (8004488 <HAL_DMA_IRQHandler+0x694>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d045      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a82      	ldr	r2, [pc, #520]	; (800448c <HAL_DMA_IRQHandler+0x698>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d040      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a80      	ldr	r2, [pc, #512]	; (8004490 <HAL_DMA_IRQHandler+0x69c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d03b      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7f      	ldr	r2, [pc, #508]	; (8004494 <HAL_DMA_IRQHandler+0x6a0>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d036      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a7d      	ldr	r2, [pc, #500]	; (8004498 <HAL_DMA_IRQHandler+0x6a4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d031      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a7c      	ldr	r2, [pc, #496]	; (800449c <HAL_DMA_IRQHandler+0x6a8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d02c      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a7a      	ldr	r2, [pc, #488]	; (80044a0 <HAL_DMA_IRQHandler+0x6ac>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d027      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a79      	ldr	r2, [pc, #484]	; (80044a4 <HAL_DMA_IRQHandler+0x6b0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d022      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a77      	ldr	r2, [pc, #476]	; (80044a8 <HAL_DMA_IRQHandler+0x6b4>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01d      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a76      	ldr	r2, [pc, #472]	; (80044ac <HAL_DMA_IRQHandler+0x6b8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d018      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a74      	ldr	r2, [pc, #464]	; (80044b0 <HAL_DMA_IRQHandler+0x6bc>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a73      	ldr	r2, [pc, #460]	; (80044b4 <HAL_DMA_IRQHandler+0x6c0>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00e      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a71      	ldr	r2, [pc, #452]	; (80044b8 <HAL_DMA_IRQHandler+0x6c4>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d009      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a70      	ldr	r2, [pc, #448]	; (80044bc <HAL_DMA_IRQHandler+0x6c8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_DMA_IRQHandler+0x516>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6e      	ldr	r2, [pc, #440]	; (80044c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d10a      	bne.n	8004320 <HAL_DMA_IRQHandler+0x52c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e009      	b.n	8004334 <HAL_DMA_IRQHandler+0x540>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d03e      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2210      	movs	r2, #16
 8004342:	409a      	lsls	r2, r3
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d018      	beq.n	8004388 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d024      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	4798      	blx	r3
 8004374:	e01f      	b.n	80043b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01b      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	4798      	blx	r3
 8004386:	e016      	b.n	80043b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d107      	bne.n	80043a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 0208 	bic.w	r2, r2, #8
 80043a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ba:	f003 031f 	and.w	r3, r3, #31
 80043be:	2220      	movs	r2, #32
 80043c0:	409a      	lsls	r2, r3
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8110 	beq.w	80045ec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2c      	ldr	r2, [pc, #176]	; (8004484 <HAL_DMA_IRQHandler+0x690>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d04a      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <HAL_DMA_IRQHandler+0x694>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d045      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_DMA_IRQHandler+0x698>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d040      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a28      	ldr	r2, [pc, #160]	; (8004490 <HAL_DMA_IRQHandler+0x69c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d03b      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a26      	ldr	r2, [pc, #152]	; (8004494 <HAL_DMA_IRQHandler+0x6a0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d036      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a25      	ldr	r2, [pc, #148]	; (8004498 <HAL_DMA_IRQHandler+0x6a4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d031      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a23      	ldr	r2, [pc, #140]	; (800449c <HAL_DMA_IRQHandler+0x6a8>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d02c      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a22      	ldr	r2, [pc, #136]	; (80044a0 <HAL_DMA_IRQHandler+0x6ac>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d027      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <HAL_DMA_IRQHandler+0x6b0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d022      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1f      	ldr	r2, [pc, #124]	; (80044a8 <HAL_DMA_IRQHandler+0x6b4>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d01d      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a1d      	ldr	r2, [pc, #116]	; (80044ac <HAL_DMA_IRQHandler+0x6b8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d018      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a1c      	ldr	r2, [pc, #112]	; (80044b0 <HAL_DMA_IRQHandler+0x6bc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d013      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a1a      	ldr	r2, [pc, #104]	; (80044b4 <HAL_DMA_IRQHandler+0x6c0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00e      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_DMA_IRQHandler+0x6c4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d009      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a17      	ldr	r2, [pc, #92]	; (80044bc <HAL_DMA_IRQHandler+0x6c8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d004      	beq.n	800446c <HAL_DMA_IRQHandler+0x678>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <HAL_DMA_IRQHandler+0x6cc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d12b      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x6d0>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf14      	ite	ne
 800447a:	2301      	movne	r3, #1
 800447c:	2300      	moveq	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	e02a      	b.n	80044d8 <HAL_DMA_IRQHandler+0x6e4>
 8004482:	bf00      	nop
 8004484:	40020010 	.word	0x40020010
 8004488:	40020028 	.word	0x40020028
 800448c:	40020040 	.word	0x40020040
 8004490:	40020058 	.word	0x40020058
 8004494:	40020070 	.word	0x40020070
 8004498:	40020088 	.word	0x40020088
 800449c:	400200a0 	.word	0x400200a0
 80044a0:	400200b8 	.word	0x400200b8
 80044a4:	40020410 	.word	0x40020410
 80044a8:	40020428 	.word	0x40020428
 80044ac:	40020440 	.word	0x40020440
 80044b0:	40020458 	.word	0x40020458
 80044b4:	40020470 	.word	0x40020470
 80044b8:	40020488 	.word	0x40020488
 80044bc:	400204a0 	.word	0x400204a0
 80044c0:	400204b8 	.word	0x400204b8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8087 	beq.w	80045ec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2220      	movs	r2, #32
 80044e8:	409a      	lsls	r2, r3
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d139      	bne.n	800456e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0216 	bic.w	r2, r2, #22
 8004508:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004518:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d103      	bne.n	800452a <HAL_DMA_IRQHandler+0x736>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0208 	bic.w	r2, r2, #8
 8004538:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	223f      	movs	r2, #63	; 0x3f
 8004544:	409a      	lsls	r2, r3
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 834a 	beq.w	8004bf8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	4798      	blx	r3
          }
          return;
 800456c:	e344      	b.n	8004bf8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d018      	beq.n	80045ae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	2b00      	cmp	r3, #0
 8004590:	d02c      	beq.n	80045ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	4798      	blx	r3
 800459a:	e027      	b.n	80045ec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d023      	beq.n	80045ec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	4798      	blx	r3
 80045ac:	e01e      	b.n	80045ec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10f      	bne.n	80045dc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0210 	bic.w	r2, r2, #16
 80045ca:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f000 8306 	beq.w	8004c02 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8088 	beq.w	8004714 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2204      	movs	r2, #4
 8004608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a7a      	ldr	r2, [pc, #488]	; (80047fc <HAL_DMA_IRQHandler+0xa08>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d04a      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a79      	ldr	r2, [pc, #484]	; (8004800 <HAL_DMA_IRQHandler+0xa0c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d045      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a77      	ldr	r2, [pc, #476]	; (8004804 <HAL_DMA_IRQHandler+0xa10>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d040      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a76      	ldr	r2, [pc, #472]	; (8004808 <HAL_DMA_IRQHandler+0xa14>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d03b      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a74      	ldr	r2, [pc, #464]	; (800480c <HAL_DMA_IRQHandler+0xa18>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d036      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a73      	ldr	r2, [pc, #460]	; (8004810 <HAL_DMA_IRQHandler+0xa1c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d031      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a71      	ldr	r2, [pc, #452]	; (8004814 <HAL_DMA_IRQHandler+0xa20>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d02c      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a70      	ldr	r2, [pc, #448]	; (8004818 <HAL_DMA_IRQHandler+0xa24>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d027      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a6e      	ldr	r2, [pc, #440]	; (800481c <HAL_DMA_IRQHandler+0xa28>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d022      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a6d      	ldr	r2, [pc, #436]	; (8004820 <HAL_DMA_IRQHandler+0xa2c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d01d      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a6b      	ldr	r2, [pc, #428]	; (8004824 <HAL_DMA_IRQHandler+0xa30>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d018      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a6a      	ldr	r2, [pc, #424]	; (8004828 <HAL_DMA_IRQHandler+0xa34>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d013      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a68      	ldr	r2, [pc, #416]	; (800482c <HAL_DMA_IRQHandler+0xa38>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00e      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a67      	ldr	r2, [pc, #412]	; (8004830 <HAL_DMA_IRQHandler+0xa3c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d009      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a65      	ldr	r2, [pc, #404]	; (8004834 <HAL_DMA_IRQHandler+0xa40>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d004      	beq.n	80046ac <HAL_DMA_IRQHandler+0x8b8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a64      	ldr	r2, [pc, #400]	; (8004838 <HAL_DMA_IRQHandler+0xa44>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d108      	bne.n	80046be <HAL_DMA_IRQHandler+0x8ca>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0201 	bic.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	e007      	b.n	80046ce <HAL_DMA_IRQHandler+0x8da>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d307      	bcc.n	80046ea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1f2      	bne.n	80046ce <HAL_DMA_IRQHandler+0x8da>
 80046e8:	e000      	b.n	80046ec <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046ea:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d004      	beq.n	800470c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2203      	movs	r2, #3
 8004706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800470a:	e003      	b.n	8004714 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 8272 	beq.w	8004c02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	4798      	blx	r3
 8004726:	e26c      	b.n	8004c02 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a43      	ldr	r2, [pc, #268]	; (800483c <HAL_DMA_IRQHandler+0xa48>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d022      	beq.n	8004778 <HAL_DMA_IRQHandler+0x984>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a42      	ldr	r2, [pc, #264]	; (8004840 <HAL_DMA_IRQHandler+0xa4c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d01d      	beq.n	8004778 <HAL_DMA_IRQHandler+0x984>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a40      	ldr	r2, [pc, #256]	; (8004844 <HAL_DMA_IRQHandler+0xa50>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d018      	beq.n	8004778 <HAL_DMA_IRQHandler+0x984>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a3f      	ldr	r2, [pc, #252]	; (8004848 <HAL_DMA_IRQHandler+0xa54>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <HAL_DMA_IRQHandler+0x984>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3d      	ldr	r2, [pc, #244]	; (800484c <HAL_DMA_IRQHandler+0xa58>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00e      	beq.n	8004778 <HAL_DMA_IRQHandler+0x984>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a3c      	ldr	r2, [pc, #240]	; (8004850 <HAL_DMA_IRQHandler+0xa5c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d009      	beq.n	8004778 <HAL_DMA_IRQHandler+0x984>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a3a      	ldr	r2, [pc, #232]	; (8004854 <HAL_DMA_IRQHandler+0xa60>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d004      	beq.n	8004778 <HAL_DMA_IRQHandler+0x984>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a39      	ldr	r2, [pc, #228]	; (8004858 <HAL_DMA_IRQHandler+0xa64>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_DMA_IRQHandler+0x988>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_DMA_IRQHandler+0x98a>
 800477c:	2300      	movs	r3, #0
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 823f 	beq.w	8004c02 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004790:	f003 031f 	and.w	r3, r3, #31
 8004794:	2204      	movs	r2, #4
 8004796:	409a      	lsls	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80cd 	beq.w	800493c <HAL_DMA_IRQHandler+0xb48>
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80c7 	beq.w	800493c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	2204      	movs	r2, #4
 80047b8:	409a      	lsls	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d049      	beq.n	800485c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d109      	bne.n	80047e6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8210 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047e4:	e20a      	b.n	8004bfc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8206 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047f8:	e200      	b.n	8004bfc <HAL_DMA_IRQHandler+0xe08>
 80047fa:	bf00      	nop
 80047fc:	40020010 	.word	0x40020010
 8004800:	40020028 	.word	0x40020028
 8004804:	40020040 	.word	0x40020040
 8004808:	40020058 	.word	0x40020058
 800480c:	40020070 	.word	0x40020070
 8004810:	40020088 	.word	0x40020088
 8004814:	400200a0 	.word	0x400200a0
 8004818:	400200b8 	.word	0x400200b8
 800481c:	40020410 	.word	0x40020410
 8004820:	40020428 	.word	0x40020428
 8004824:	40020440 	.word	0x40020440
 8004828:	40020458 	.word	0x40020458
 800482c:	40020470 	.word	0x40020470
 8004830:	40020488 	.word	0x40020488
 8004834:	400204a0 	.word	0x400204a0
 8004838:	400204b8 	.word	0x400204b8
 800483c:	58025408 	.word	0x58025408
 8004840:	5802541c 	.word	0x5802541c
 8004844:	58025430 	.word	0x58025430
 8004848:	58025444 	.word	0x58025444
 800484c:	58025458 	.word	0x58025458
 8004850:	5802546c 	.word	0x5802546c
 8004854:	58025480 	.word	0x58025480
 8004858:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d160      	bne.n	8004928 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a8c      	ldr	r2, [pc, #560]	; (8004a9c <HAL_DMA_IRQHandler+0xca8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d04a      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a8a      	ldr	r2, [pc, #552]	; (8004aa0 <HAL_DMA_IRQHandler+0xcac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d045      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a89      	ldr	r2, [pc, #548]	; (8004aa4 <HAL_DMA_IRQHandler+0xcb0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d040      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a87      	ldr	r2, [pc, #540]	; (8004aa8 <HAL_DMA_IRQHandler+0xcb4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d03b      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a86      	ldr	r2, [pc, #536]	; (8004aac <HAL_DMA_IRQHandler+0xcb8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d036      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a84      	ldr	r2, [pc, #528]	; (8004ab0 <HAL_DMA_IRQHandler+0xcbc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d031      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a83      	ldr	r2, [pc, #524]	; (8004ab4 <HAL_DMA_IRQHandler+0xcc0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d02c      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a81      	ldr	r2, [pc, #516]	; (8004ab8 <HAL_DMA_IRQHandler+0xcc4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d027      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a80      	ldr	r2, [pc, #512]	; (8004abc <HAL_DMA_IRQHandler+0xcc8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d022      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a7e      	ldr	r2, [pc, #504]	; (8004ac0 <HAL_DMA_IRQHandler+0xccc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d01d      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7d      	ldr	r2, [pc, #500]	; (8004ac4 <HAL_DMA_IRQHandler+0xcd0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a7b      	ldr	r2, [pc, #492]	; (8004ac8 <HAL_DMA_IRQHandler+0xcd4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a7a      	ldr	r2, [pc, #488]	; (8004acc <HAL_DMA_IRQHandler+0xcd8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a78      	ldr	r2, [pc, #480]	; (8004ad0 <HAL_DMA_IRQHandler+0xcdc>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a77      	ldr	r2, [pc, #476]	; (8004ad4 <HAL_DMA_IRQHandler+0xce0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_DMA_IRQHandler+0xb12>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a75      	ldr	r2, [pc, #468]	; (8004ad8 <HAL_DMA_IRQHandler+0xce4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d108      	bne.n	8004918 <HAL_DMA_IRQHandler+0xb24>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0208 	bic.w	r2, r2, #8
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e007      	b.n	8004928 <HAL_DMA_IRQHandler+0xb34>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0204 	bic.w	r2, r2, #4
 8004926:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 8165 	beq.w	8004bfc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800493a:	e15f      	b.n	8004bfc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	2202      	movs	r2, #2
 8004946:	409a      	lsls	r2, r3
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80c5 	beq.w	8004adc <HAL_DMA_IRQHandler+0xce8>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 80bf 	beq.w	8004adc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004962:	f003 031f 	and.w	r3, r3, #31
 8004966:	2202      	movs	r2, #2
 8004968:	409a      	lsls	r2, r3
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d018      	beq.n	80049aa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 813a 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004994:	e134      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	2b00      	cmp	r3, #0
 800499c:	f000 8130 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a8:	e12a      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d168      	bne.n	8004a86 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a38      	ldr	r2, [pc, #224]	; (8004a9c <HAL_DMA_IRQHandler+0xca8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d04a      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a37      	ldr	r2, [pc, #220]	; (8004aa0 <HAL_DMA_IRQHandler+0xcac>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d045      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a35      	ldr	r2, [pc, #212]	; (8004aa4 <HAL_DMA_IRQHandler+0xcb0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d040      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a34      	ldr	r2, [pc, #208]	; (8004aa8 <HAL_DMA_IRQHandler+0xcb4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d03b      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a32      	ldr	r2, [pc, #200]	; (8004aac <HAL_DMA_IRQHandler+0xcb8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d036      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a31      	ldr	r2, [pc, #196]	; (8004ab0 <HAL_DMA_IRQHandler+0xcbc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d031      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2f      	ldr	r2, [pc, #188]	; (8004ab4 <HAL_DMA_IRQHandler+0xcc0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d02c      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2e      	ldr	r2, [pc, #184]	; (8004ab8 <HAL_DMA_IRQHandler+0xcc4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d027      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <HAL_DMA_IRQHandler+0xcc8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d022      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2b      	ldr	r2, [pc, #172]	; (8004ac0 <HAL_DMA_IRQHandler+0xccc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d01d      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <HAL_DMA_IRQHandler+0xcd0>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d018      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <HAL_DMA_IRQHandler+0xcd4>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d013      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a26      	ldr	r2, [pc, #152]	; (8004acc <HAL_DMA_IRQHandler+0xcd8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00e      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a25      	ldr	r2, [pc, #148]	; (8004ad0 <HAL_DMA_IRQHandler+0xcdc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d009      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a23      	ldr	r2, [pc, #140]	; (8004ad4 <HAL_DMA_IRQHandler+0xce0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d004      	beq.n	8004a54 <HAL_DMA_IRQHandler+0xc60>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a22      	ldr	r2, [pc, #136]	; (8004ad8 <HAL_DMA_IRQHandler+0xce4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d108      	bne.n	8004a66 <HAL_DMA_IRQHandler+0xc72>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 0214 	bic.w	r2, r2, #20
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	e007      	b.n	8004a76 <HAL_DMA_IRQHandler+0xc82>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 020a 	bic.w	r2, r2, #10
 8004a74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80b8 	beq.w	8004c00 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a98:	e0b2      	b.n	8004c00 <HAL_DMA_IRQHandler+0xe0c>
 8004a9a:	bf00      	nop
 8004a9c:	40020010 	.word	0x40020010
 8004aa0:	40020028 	.word	0x40020028
 8004aa4:	40020040 	.word	0x40020040
 8004aa8:	40020058 	.word	0x40020058
 8004aac:	40020070 	.word	0x40020070
 8004ab0:	40020088 	.word	0x40020088
 8004ab4:	400200a0 	.word	0x400200a0
 8004ab8:	400200b8 	.word	0x400200b8
 8004abc:	40020410 	.word	0x40020410
 8004ac0:	40020428 	.word	0x40020428
 8004ac4:	40020440 	.word	0x40020440
 8004ac8:	40020458 	.word	0x40020458
 8004acc:	40020470 	.word	0x40020470
 8004ad0:	40020488 	.word	0x40020488
 8004ad4:	400204a0 	.word	0x400204a0
 8004ad8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	2208      	movs	r2, #8
 8004ae6:	409a      	lsls	r2, r3
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8088 	beq.w	8004c02 <HAL_DMA_IRQHandler+0xe0e>
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 8082 	beq.w	8004c02 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <HAL_DMA_IRQHandler+0xe14>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d04a      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <HAL_DMA_IRQHandler+0xe18>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d045      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a3e      	ldr	r2, [pc, #248]	; (8004c10 <HAL_DMA_IRQHandler+0xe1c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d040      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a3c      	ldr	r2, [pc, #240]	; (8004c14 <HAL_DMA_IRQHandler+0xe20>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d03b      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a3b      	ldr	r2, [pc, #236]	; (8004c18 <HAL_DMA_IRQHandler+0xe24>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d036      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a39      	ldr	r2, [pc, #228]	; (8004c1c <HAL_DMA_IRQHandler+0xe28>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d031      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a38      	ldr	r2, [pc, #224]	; (8004c20 <HAL_DMA_IRQHandler+0xe2c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d02c      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a36      	ldr	r2, [pc, #216]	; (8004c24 <HAL_DMA_IRQHandler+0xe30>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d027      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a35      	ldr	r2, [pc, #212]	; (8004c28 <HAL_DMA_IRQHandler+0xe34>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d022      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a33      	ldr	r2, [pc, #204]	; (8004c2c <HAL_DMA_IRQHandler+0xe38>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d01d      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a32      	ldr	r2, [pc, #200]	; (8004c30 <HAL_DMA_IRQHandler+0xe3c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d018      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a30      	ldr	r2, [pc, #192]	; (8004c34 <HAL_DMA_IRQHandler+0xe40>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d013      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <HAL_DMA_IRQHandler+0xe44>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d00e      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <HAL_DMA_IRQHandler+0xe48>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d009      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2c      	ldr	r2, [pc, #176]	; (8004c40 <HAL_DMA_IRQHandler+0xe4c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d004      	beq.n	8004b9e <HAL_DMA_IRQHandler+0xdaa>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2a      	ldr	r2, [pc, #168]	; (8004c44 <HAL_DMA_IRQHandler+0xe50>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d108      	bne.n	8004bb0 <HAL_DMA_IRQHandler+0xdbc>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 021c 	bic.w	r2, r2, #28
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e007      	b.n	8004bc0 <HAL_DMA_IRQHandler+0xdcc>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 020e 	bic.w	r2, r2, #14
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2201      	movs	r2, #1
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
 8004bf6:	e004      	b.n	8004c02 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004bf8:	bf00      	nop
 8004bfa:	e002      	b.n	8004c02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c00:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c02:	3728      	adds	r7, #40	; 0x28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40020010 	.word	0x40020010
 8004c0c:	40020028 	.word	0x40020028
 8004c10:	40020040 	.word	0x40020040
 8004c14:	40020058 	.word	0x40020058
 8004c18:	40020070 	.word	0x40020070
 8004c1c:	40020088 	.word	0x40020088
 8004c20:	400200a0 	.word	0x400200a0
 8004c24:	400200b8 	.word	0x400200b8
 8004c28:	40020410 	.word	0x40020410
 8004c2c:	40020428 	.word	0x40020428
 8004c30:	40020440 	.word	0x40020440
 8004c34:	40020458 	.word	0x40020458
 8004c38:	40020470 	.word	0x40020470
 8004c3c:	40020488 	.word	0x40020488
 8004c40:	400204a0 	.word	0x400204a0
 8004c44:	400204b8 	.word	0x400204b8

08004c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a42      	ldr	r2, [pc, #264]	; (8004d60 <DMA_CalcBaseAndBitshift+0x118>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d04a      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a41      	ldr	r2, [pc, #260]	; (8004d64 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d045      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a3f      	ldr	r2, [pc, #252]	; (8004d68 <DMA_CalcBaseAndBitshift+0x120>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d040      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a3e      	ldr	r2, [pc, #248]	; (8004d6c <DMA_CalcBaseAndBitshift+0x124>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d03b      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3c      	ldr	r2, [pc, #240]	; (8004d70 <DMA_CalcBaseAndBitshift+0x128>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d036      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3b      	ldr	r2, [pc, #236]	; (8004d74 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d031      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a39      	ldr	r2, [pc, #228]	; (8004d78 <DMA_CalcBaseAndBitshift+0x130>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d02c      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a38      	ldr	r2, [pc, #224]	; (8004d7c <DMA_CalcBaseAndBitshift+0x134>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d027      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a36      	ldr	r2, [pc, #216]	; (8004d80 <DMA_CalcBaseAndBitshift+0x138>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d022      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d01d      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a33      	ldr	r2, [pc, #204]	; (8004d88 <DMA_CalcBaseAndBitshift+0x140>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d018      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a32      	ldr	r2, [pc, #200]	; (8004d8c <DMA_CalcBaseAndBitshift+0x144>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d013      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a30      	ldr	r2, [pc, #192]	; (8004d90 <DMA_CalcBaseAndBitshift+0x148>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00e      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a2f      	ldr	r2, [pc, #188]	; (8004d94 <DMA_CalcBaseAndBitshift+0x14c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <DMA_CalcBaseAndBitshift+0x150>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2c      	ldr	r2, [pc, #176]	; (8004d9c <DMA_CalcBaseAndBitshift+0x154>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d101      	bne.n	8004cf4 <DMA_CalcBaseAndBitshift+0xac>
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e000      	b.n	8004cf6 <DMA_CalcBaseAndBitshift+0xae>
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d024      	beq.n	8004d44 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	3b10      	subs	r3, #16
 8004d02:	4a27      	ldr	r2, [pc, #156]	; (8004da0 <DMA_CalcBaseAndBitshift+0x158>)
 8004d04:	fba2 2303 	umull	r2, r3, r2, r3
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	4a24      	ldr	r2, [pc, #144]	; (8004da4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d14:	5cd3      	ldrb	r3, [r2, r3]
 8004d16:	461a      	mov	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d908      	bls.n	8004d34 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <DMA_CalcBaseAndBitshift+0x160>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	1d1a      	adds	r2, r3, #4
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	659a      	str	r2, [r3, #88]	; 0x58
 8004d32:	e00d      	b.n	8004d50 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4b1b      	ldr	r3, [pc, #108]	; (8004da8 <DMA_CalcBaseAndBitshift+0x160>)
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6593      	str	r3, [r2, #88]	; 0x58
 8004d42:	e005      	b.n	8004d50 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	40020010 	.word	0x40020010
 8004d64:	40020028 	.word	0x40020028
 8004d68:	40020040 	.word	0x40020040
 8004d6c:	40020058 	.word	0x40020058
 8004d70:	40020070 	.word	0x40020070
 8004d74:	40020088 	.word	0x40020088
 8004d78:	400200a0 	.word	0x400200a0
 8004d7c:	400200b8 	.word	0x400200b8
 8004d80:	40020410 	.word	0x40020410
 8004d84:	40020428 	.word	0x40020428
 8004d88:	40020440 	.word	0x40020440
 8004d8c:	40020458 	.word	0x40020458
 8004d90:	40020470 	.word	0x40020470
 8004d94:	40020488 	.word	0x40020488
 8004d98:	400204a0 	.word	0x400204a0
 8004d9c:	400204b8 	.word	0x400204b8
 8004da0:	aaaaaaab 	.word	0xaaaaaaab
 8004da4:	0800f1a0 	.word	0x0800f1a0
 8004da8:	fffffc00 	.word	0xfffffc00

08004dac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d120      	bne.n	8004e02 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d858      	bhi.n	8004e7a <DMA_CheckFifoParam+0xce>
 8004dc8:	a201      	add	r2, pc, #4	; (adr r2, 8004dd0 <DMA_CheckFifoParam+0x24>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004de1 	.word	0x08004de1
 8004dd4:	08004df3 	.word	0x08004df3
 8004dd8:	08004de1 	.word	0x08004de1
 8004ddc:	08004e7b 	.word	0x08004e7b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d048      	beq.n	8004e7e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004df0:	e045      	b.n	8004e7e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004dfa:	d142      	bne.n	8004e82 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e00:	e03f      	b.n	8004e82 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e0a:	d123      	bne.n	8004e54 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d838      	bhi.n	8004e86 <DMA_CheckFifoParam+0xda>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <DMA_CheckFifoParam+0x70>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e33 	.word	0x08004e33
 8004e24:	08004e2d 	.word	0x08004e2d
 8004e28:	08004e45 	.word	0x08004e45
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
        break;
 8004e30:	e030      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d025      	beq.n	8004e8a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e42:	e022      	b.n	8004e8a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e4c:	d11f      	bne.n	8004e8e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e52:	e01c      	b.n	8004e8e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d902      	bls.n	8004e62 <DMA_CheckFifoParam+0xb6>
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d003      	beq.n	8004e68 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e60:	e018      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
        break;
 8004e66:	e015      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	73fb      	strb	r3, [r7, #15]
    break;
 8004e78:	e00b      	b.n	8004e92 <DMA_CheckFifoParam+0xe6>
        break;
 8004e7a:	bf00      	nop
 8004e7c:	e00a      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e008      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
        break;
 8004e82:	bf00      	nop
 8004e84:	e006      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
        break;
 8004e86:	bf00      	nop
 8004e88:	e004      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
        break;
 8004e8a:	bf00      	nop
 8004e8c:	e002      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
        break;
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <DMA_CheckFifoParam+0xe8>
    break;
 8004e92:	bf00      	nop
    }
  }

  return status;
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop

08004ea4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a38      	ldr	r2, [pc, #224]	; (8004f98 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d022      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a36      	ldr	r2, [pc, #216]	; (8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01d      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a35      	ldr	r2, [pc, #212]	; (8004fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d018      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a33      	ldr	r2, [pc, #204]	; (8004fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a32      	ldr	r2, [pc, #200]	; (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d00e      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a30      	ldr	r2, [pc, #192]	; (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d009      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a2f      	ldr	r2, [pc, #188]	; (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d004      	beq.n	8004f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a2d      	ldr	r2, [pc, #180]	; (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d101      	bne.n	8004f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01a      	beq.n	8004f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	3b08      	subs	r3, #8
 8004f14:	4a28      	ldr	r2, [pc, #160]	; (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4b26      	ldr	r3, [pc, #152]	; (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a24      	ldr	r2, [pc, #144]	; (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f30:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f003 031f 	and.w	r3, r3, #31
 8004f38:	2201      	movs	r2, #1
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f40:	e024      	b.n	8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	3b10      	subs	r3, #16
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	091b      	lsrs	r3, r3, #4
 8004f52:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d806      	bhi.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a1b      	ldr	r2, [pc, #108]	; (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d902      	bls.n	8004f6a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3308      	adds	r3, #8
 8004f68:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	461a      	mov	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f7c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	2201      	movs	r2, #1
 8004f86:	409a      	lsls	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f8c:	bf00      	nop
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	58025408 	.word	0x58025408
 8004f9c:	5802541c 	.word	0x5802541c
 8004fa0:	58025430 	.word	0x58025430
 8004fa4:	58025444 	.word	0x58025444
 8004fa8:	58025458 	.word	0x58025458
 8004fac:	5802546c 	.word	0x5802546c
 8004fb0:	58025480 	.word	0x58025480
 8004fb4:	58025494 	.word	0x58025494
 8004fb8:	cccccccd 	.word	0xcccccccd
 8004fbc:	16009600 	.word	0x16009600
 8004fc0:	58025880 	.word	0x58025880
 8004fc4:	aaaaaaab 	.word	0xaaaaaaab
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	4002040f 	.word	0x4002040f
 8004fd0:	10008200 	.word	0x10008200
 8004fd4:	40020880 	.word	0x40020880

08004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04a      	beq.n	8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b08      	cmp	r3, #8
 8004ff2:	d847      	bhi.n	8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a25      	ldr	r2, [pc, #148]	; (8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d022      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a24      	ldr	r2, [pc, #144]	; (8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d01d      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a22      	ldr	r2, [pc, #136]	; (8005098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d018      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a21      	ldr	r2, [pc, #132]	; (800509c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00e      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d009      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d004      	beq.n	8005044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d101      	bne.n	8005048 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005048:	2300      	movs	r3, #0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a15      	ldr	r2, [pc, #84]	; (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005060:	671a      	str	r2, [r3, #112]	; 0x70
 8005062:	e009      	b.n	8005078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4b14      	ldr	r3, [pc, #80]	; (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a11      	ldr	r2, [pc, #68]	; (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005076:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	3b01      	subs	r3, #1
 800507c:	2201      	movs	r2, #1
 800507e:	409a      	lsls	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	58025408 	.word	0x58025408
 8005094:	5802541c 	.word	0x5802541c
 8005098:	58025430 	.word	0x58025430
 800509c:	58025444 	.word	0x58025444
 80050a0:	58025458 	.word	0x58025458
 80050a4:	5802546c 	.word	0x5802546c
 80050a8:	58025480 	.word	0x58025480
 80050ac:	58025494 	.word	0x58025494
 80050b0:	1600963f 	.word	0x1600963f
 80050b4:	58025940 	.word	0x58025940
 80050b8:	1000823f 	.word	0x1000823f
 80050bc:	40020940 	.word	0x40020940

080050c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	; 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050ce:	4b89      	ldr	r3, [pc, #548]	; (80052f4 <HAL_GPIO_Init+0x234>)
 80050d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050d2:	e194      	b.n	80053fe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	fa01 f303 	lsl.w	r3, r1, r3
 80050e0:	4013      	ands	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8186 	beq.w	80053f8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d00b      	beq.n	800510c <HAL_GPIO_Init+0x4c>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d007      	beq.n	800510c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005100:	2b11      	cmp	r3, #17
 8005102:	d003      	beq.n	800510c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b12      	cmp	r3, #18
 800510a:	d130      	bne.n	800516e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	2203      	movs	r2, #3
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	43db      	mvns	r3, r3
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	4013      	ands	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68da      	ldr	r2, [r3, #12]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	005b      	lsls	r3, r3, #1
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4313      	orrs	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005142:	2201      	movs	r2, #1
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43db      	mvns	r3, r3
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	4013      	ands	r3, r2
 8005150:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	f003 0201 	and.w	r2, r3, #1
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	2203      	movs	r2, #3
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43db      	mvns	r3, r3
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	4013      	ands	r3, r2
 8005184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4313      	orrs	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_Init+0xee>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b12      	cmp	r3, #18
 80051ac:	d123      	bne.n	80051f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	08da      	lsrs	r2, r3, #3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3208      	adds	r2, #8
 80051b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	220f      	movs	r2, #15
 80051c6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ca:	43db      	mvns	r3, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4013      	ands	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	fa02 f303 	lsl.w	r3, r2, r3
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	08da      	lsrs	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3208      	adds	r2, #8
 80051f0:	69b9      	ldr	r1, [r7, #24]
 80051f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	2203      	movs	r2, #3
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	43db      	mvns	r3, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4013      	ands	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f003 0203 	and.w	r2, r3, #3
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80e0 	beq.w	80053f8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005238:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <HAL_GPIO_Init+0x238>)
 800523a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800523e:	4a2e      	ldr	r2, [pc, #184]	; (80052f8 <HAL_GPIO_Init+0x238>)
 8005240:	f043 0302 	orr.w	r3, r3, #2
 8005244:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_GPIO_Init+0x238>)
 800524a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005256:	4a29      	ldr	r2, [pc, #164]	; (80052fc <HAL_GPIO_Init+0x23c>)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	089b      	lsrs	r3, r3, #2
 800525c:	3302      	adds	r3, #2
 800525e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	220f      	movs	r2, #15
 800526e:	fa02 f303 	lsl.w	r3, r2, r3
 8005272:	43db      	mvns	r3, r3
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	4013      	ands	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a20      	ldr	r2, [pc, #128]	; (8005300 <HAL_GPIO_Init+0x240>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d052      	beq.n	8005328 <HAL_GPIO_Init+0x268>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <HAL_GPIO_Init+0x244>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d031      	beq.n	80052ee <HAL_GPIO_Init+0x22e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <HAL_GPIO_Init+0x248>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d02b      	beq.n	80052ea <HAL_GPIO_Init+0x22a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1d      	ldr	r2, [pc, #116]	; (800530c <HAL_GPIO_Init+0x24c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d025      	beq.n	80052e6 <HAL_GPIO_Init+0x226>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1c      	ldr	r2, [pc, #112]	; (8005310 <HAL_GPIO_Init+0x250>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01f      	beq.n	80052e2 <HAL_GPIO_Init+0x222>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <HAL_GPIO_Init+0x254>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d019      	beq.n	80052de <HAL_GPIO_Init+0x21e>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <HAL_GPIO_Init+0x258>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <HAL_GPIO_Init+0x21a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a19      	ldr	r2, [pc, #100]	; (800531c <HAL_GPIO_Init+0x25c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00d      	beq.n	80052d6 <HAL_GPIO_Init+0x216>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a18      	ldr	r2, [pc, #96]	; (8005320 <HAL_GPIO_Init+0x260>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d007      	beq.n	80052d2 <HAL_GPIO_Init+0x212>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a17      	ldr	r2, [pc, #92]	; (8005324 <HAL_GPIO_Init+0x264>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d101      	bne.n	80052ce <HAL_GPIO_Init+0x20e>
 80052ca:	2309      	movs	r3, #9
 80052cc:	e02d      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052ce:	230a      	movs	r3, #10
 80052d0:	e02b      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052d2:	2308      	movs	r3, #8
 80052d4:	e029      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052d6:	2307      	movs	r3, #7
 80052d8:	e027      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052da:	2306      	movs	r3, #6
 80052dc:	e025      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052de:	2305      	movs	r3, #5
 80052e0:	e023      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052e2:	2304      	movs	r3, #4
 80052e4:	e021      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052e6:	2303      	movs	r3, #3
 80052e8:	e01f      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e01d      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e01b      	b.n	800532a <HAL_GPIO_Init+0x26a>
 80052f2:	bf00      	nop
 80052f4:	58000080 	.word	0x58000080
 80052f8:	58024400 	.word	0x58024400
 80052fc:	58000400 	.word	0x58000400
 8005300:	58020000 	.word	0x58020000
 8005304:	58020400 	.word	0x58020400
 8005308:	58020800 	.word	0x58020800
 800530c:	58020c00 	.word	0x58020c00
 8005310:	58021000 	.word	0x58021000
 8005314:	58021400 	.word	0x58021400
 8005318:	58021800 	.word	0x58021800
 800531c:	58021c00 	.word	0x58021c00
 8005320:	58022000 	.word	0x58022000
 8005324:	58022400 	.word	0x58022400
 8005328:	2300      	movs	r3, #0
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	f002 0203 	and.w	r2, r2, #3
 8005330:	0092      	lsls	r2, r2, #2
 8005332:	4093      	lsls	r3, r2
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4313      	orrs	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800533a:	4938      	ldr	r1, [pc, #224]	; (800541c <HAL_GPIO_Init+0x35c>)
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	089b      	lsrs	r3, r3, #2
 8005340:	3302      	adds	r3, #2
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	43db      	mvns	r3, r3
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	4013      	ands	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	43db      	mvns	r3, r3
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	4013      	ands	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800539c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	43db      	mvns	r3, r3
 80053d6:	69ba      	ldr	r2, [r7, #24]
 80053d8:	4013      	ands	r3, r2
 80053da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80053f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	3301      	adds	r3, #1
 80053fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	f47f ae63 	bne.w	80050d4 <HAL_GPIO_Init+0x14>
  }
}
 800540e:	bf00      	nop
 8005410:	bf00      	nop
 8005412:	3724      	adds	r7, #36	; 0x24
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	58000400 	.word	0x58000400

08005420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	887b      	ldrh	r3, [r7, #2]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
 800543c:	e001      	b.n	8005442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005442:	7bfb      	ldrb	r3, [r7, #15]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	807b      	strh	r3, [r7, #2]
 800545c:	4613      	mov	r3, r2
 800545e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005460:	787b      	ldrb	r3, [r7, #1]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005466:	887a      	ldrh	r2, [r7, #2]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800546c:	e003      	b.n	8005476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800546e:	887b      	ldrh	r3, [r7, #2]
 8005470:	041a      	lsls	r2, r3, #16
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	619a      	str	r2, [r3, #24]
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005494:	887a      	ldrh	r2, [r7, #2]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4013      	ands	r3, r2
 800549a:	041a      	lsls	r2, r3, #16
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	43d9      	mvns	r1, r3
 80054a0:	887b      	ldrh	r3, [r7, #2]
 80054a2:	400b      	ands	r3, r1
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	619a      	str	r2, [r3, #24]
}
 80054aa:	bf00      	nop
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4603      	mov	r3, r0
 80054be:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80054c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80054c8:	88fb      	ldrh	r3, [r7, #6]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054da:	88fb      	ldrh	r3, [r7, #6]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f804 	bl	80054ea <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	4603      	mov	r3, r0
 80054f2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005508:	4a08      	ldr	r2, [pc, #32]	; (800552c <HAL_HSEM_FastTake+0x2c>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3320      	adds	r3, #32
 800550e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005512:	4a07      	ldr	r2, [pc, #28]	; (8005530 <HAL_HSEM_FastTake+0x30>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e000      	b.n	800551e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	58026400 	.word	0x58026400
 8005530:	80000300 	.word	0x80000300

08005534 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800553e:	4906      	ldr	r1, [pc, #24]	; (8005558 <HAL_HSEM_Release+0x24>)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	58026400 	.word	0x58026400

0800555c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07f      	b.n	800566e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d106      	bne.n	8005588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7fc fb4e 	bl	8001c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2224      	movs	r2, #36	; 0x24
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d2:	609a      	str	r2, [r3, #8]
 80055d4:	e006      	b.n	80055e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689a      	ldr	r2, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d104      	bne.n	80055f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_I2C_Init+0x11c>)
 8005602:	430b      	orrs	r3, r1
 8005604:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005614:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	ea42 0103 	orr.w	r1, r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	021a      	lsls	r2, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1a      	ldr	r2, [r3, #32]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f042 0201 	orr.w	r2, r2, #1
 800564e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	02008000 	.word	0x02008000

0800567c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	460b      	mov	r3, r1
 800568a:	817b      	strh	r3, [r7, #10]
 800568c:	4613      	mov	r3, r2
 800568e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b20      	cmp	r3, #32
 800569a:	f040 80da 	bne.w	8005852 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_I2C_Master_Transmit+0x30>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e0d3      	b.n	8005854 <HAL_I2C_Master_Transmit+0x1d8>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80056b4:	f7fc fe6c 	bl	8002390 <HAL_GetTick>
 80056b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	2319      	movs	r3, #25
 80056c0:	2201      	movs	r2, #1
 80056c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 fbc6 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0be      	b.n	8005854 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2221      	movs	r2, #33	; 0x21
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2210      	movs	r2, #16
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	893a      	ldrh	r2, [r7, #8]
 80056f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2bff      	cmp	r3, #255	; 0xff
 8005706:	d90e      	bls.n	8005726 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	22ff      	movs	r2, #255	; 0xff
 800570c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005712:	b2da      	uxtb	r2, r3
 8005714:	8979      	ldrh	r1, [r7, #10]
 8005716:	4b51      	ldr	r3, [pc, #324]	; (800585c <HAL_I2C_Master_Transmit+0x1e0>)
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fcbc 	bl	800609c <I2C_TransferConfig>
 8005724:	e06c      	b.n	8005800 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572a:	b29a      	uxth	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005734:	b2da      	uxtb	r2, r3
 8005736:	8979      	ldrh	r1, [r7, #10]
 8005738:	4b48      	ldr	r3, [pc, #288]	; (800585c <HAL_I2C_Master_Transmit+0x1e0>)
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 fcab 	bl	800609c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005746:	e05b      	b.n	8005800 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	6a39      	ldr	r1, [r7, #32]
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 fbc3 	bl	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e07b      	b.n	8005854 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	781a      	ldrb	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d034      	beq.n	8005800 <HAL_I2C_Master_Transmit+0x184>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	2b00      	cmp	r3, #0
 800579c:	d130      	bne.n	8005800 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 fb55 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d001      	beq.n	80057b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e04d      	b.n	8005854 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2bff      	cmp	r3, #255	; 0xff
 80057c0:	d90e      	bls.n	80057e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	22ff      	movs	r2, #255	; 0xff
 80057c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	8979      	ldrh	r1, [r7, #10]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fc5f 	bl	800609c <I2C_TransferConfig>
 80057de:	e00f      	b.n	8005800 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	8979      	ldrh	r1, [r7, #10]
 80057f2:	2300      	movs	r3, #0
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fc4e 	bl	800609c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d19e      	bne.n	8005748 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	6a39      	ldr	r1, [r7, #32]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fba2 	bl	8005f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e01a      	b.n	8005854 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2220      	movs	r2, #32
 8005824:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6859      	ldr	r1, [r3, #4]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_I2C_Master_Transmit+0x1e4>)
 8005832:	400b      	ands	r3, r1
 8005834:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	e000      	b.n	8005854 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005852:	2302      	movs	r3, #2
  }
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	80002000 	.word	0x80002000
 8005860:	fe00e800 	.word	0xfe00e800

08005864 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	4608      	mov	r0, r1
 800586e:	4611      	mov	r1, r2
 8005870:	461a      	mov	r2, r3
 8005872:	4603      	mov	r3, r0
 8005874:	817b      	strh	r3, [r7, #10]
 8005876:	460b      	mov	r3, r1
 8005878:	813b      	strh	r3, [r7, #8]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b20      	cmp	r3, #32
 8005888:	f040 80f9 	bne.w	8005a7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <HAL_I2C_Mem_Write+0x34>
 8005892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d105      	bne.n	80058a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800589e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0ed      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_I2C_Mem_Write+0x4e>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e0e6      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80058ba:	f7fc fd69 	bl	8002390 <HAL_GetTick>
 80058be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	2319      	movs	r3, #25
 80058c6:	2201      	movs	r2, #1
 80058c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 fac3 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e0d1      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2221      	movs	r2, #33	; 0x21
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2240      	movs	r2, #64	; 0x40
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a3a      	ldr	r2, [r7, #32]
 80058f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005904:	88f8      	ldrh	r0, [r7, #6]
 8005906:	893a      	ldrh	r2, [r7, #8]
 8005908:	8979      	ldrh	r1, [r7, #10]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	9301      	str	r3, [sp, #4]
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4603      	mov	r3, r0
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f9d3 	bl	8005cc0 <I2C_RequestMemoryWrite>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e0a9      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	2bff      	cmp	r3, #255	; 0xff
 8005934:	d90e      	bls.n	8005954 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	22ff      	movs	r2, #255	; 0xff
 800593a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005940:	b2da      	uxtb	r2, r3
 8005942:	8979      	ldrh	r1, [r7, #10]
 8005944:	2300      	movs	r3, #0
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fba5 	bl	800609c <I2C_TransferConfig>
 8005952:	e00f      	b.n	8005974 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005958:	b29a      	uxth	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005962:	b2da      	uxtb	r2, r3
 8005964:	8979      	ldrh	r1, [r7, #10]
 8005966:	2300      	movs	r3, #0
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fb94 	bl	800609c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 faad 	bl	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e07b      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	781a      	ldrb	r2, [r3, #0]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d034      	beq.n	8005a2c <HAL_I2C_Mem_Write+0x1c8>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d130      	bne.n	8005a2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	2200      	movs	r2, #0
 80059d2:	2180      	movs	r1, #128	; 0x80
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fa3f 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e04d      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2bff      	cmp	r3, #255	; 0xff
 80059ec:	d90e      	bls.n	8005a0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	22ff      	movs	r2, #255	; 0xff
 80059f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	8979      	ldrh	r1, [r7, #10]
 80059fc:	2300      	movs	r3, #0
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fb49 	bl	800609c <I2C_TransferConfig>
 8005a0a:	e00f      	b.n	8005a2c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	8979      	ldrh	r1, [r7, #10]
 8005a1e:	2300      	movs	r3, #0
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fb38 	bl	800609c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d19e      	bne.n	8005974 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fa8c 	bl	8005f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e01a      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	6859      	ldr	r1, [r3, #4]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <HAL_I2C_Mem_Write+0x224>)
 8005a5e:	400b      	ands	r3, r1
 8005a60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e000      	b.n	8005a80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a7e:	2302      	movs	r3, #2
  }
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	fe00e800 	.word	0xfe00e800

08005a8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b088      	sub	sp, #32
 8005a90:	af02      	add	r7, sp, #8
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	4608      	mov	r0, r1
 8005a96:	4611      	mov	r1, r2
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	817b      	strh	r3, [r7, #10]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	813b      	strh	r3, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	f040 80fd 	bne.w	8005cae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <HAL_I2C_Mem_Read+0x34>
 8005aba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d105      	bne.n	8005acc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0f1      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_I2C_Mem_Read+0x4e>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e0ea      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ae2:	f7fc fc55 	bl	8002390 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	2319      	movs	r3, #25
 8005aee:	2201      	movs	r2, #1
 8005af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f9af 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0d5      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2222      	movs	r2, #34	; 0x22
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2240      	movs	r2, #64	; 0x40
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b2c:	88f8      	ldrh	r0, [r7, #6]
 8005b2e:	893a      	ldrh	r2, [r7, #8]
 8005b30:	8979      	ldrh	r1, [r7, #10]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f913 	bl	8005d68 <I2C_RequestMemoryRead>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d005      	beq.n	8005b54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e0ad      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	2bff      	cmp	r3, #255	; 0xff
 8005b5c:	d90e      	bls.n	8005b7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	22ff      	movs	r2, #255	; 0xff
 8005b62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	8979      	ldrh	r1, [r7, #10]
 8005b6c:	4b52      	ldr	r3, [pc, #328]	; (8005cb8 <HAL_I2C_Mem_Read+0x22c>)
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fa91 	bl	800609c <I2C_TransferConfig>
 8005b7a:	e00f      	b.n	8005b9c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	b2da      	uxtb	r2, r3
 8005b8c:	8979      	ldrh	r1, [r7, #10]
 8005b8e:	4b4a      	ldr	r3, [pc, #296]	; (8005cb8 <HAL_I2C_Mem_Read+0x22c>)
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f000 fa80 	bl	800609c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2104      	movs	r1, #4
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f956 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e07c      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d034      	beq.n	8005c5c <HAL_I2C_Mem_Read+0x1d0>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d130      	bne.n	8005c5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	2200      	movs	r2, #0
 8005c02:	2180      	movs	r1, #128	; 0x80
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f927 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e04d      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2bff      	cmp	r3, #255	; 0xff
 8005c1c:	d90e      	bls.n	8005c3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	22ff      	movs	r2, #255	; 0xff
 8005c22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	8979      	ldrh	r1, [r7, #10]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fa31 	bl	800609c <I2C_TransferConfig>
 8005c3a:	e00f      	b.n	8005c5c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	8979      	ldrh	r1, [r7, #10]
 8005c4e:	2300      	movs	r3, #0
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 fa20 	bl	800609c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d19a      	bne.n	8005b9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f974 	bl	8005f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e01a      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_I2C_Mem_Read+0x230>)
 8005c8e:	400b      	ands	r3, r1
 8005c90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e000      	b.n	8005cb0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005cae:	2302      	movs	r3, #2
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	80002400 	.word	0x80002400
 8005cbc:	fe00e800 	.word	0xfe00e800

08005cc0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	817b      	strh	r3, [r7, #10]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	813b      	strh	r3, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	8979      	ldrh	r1, [r7, #10]
 8005ce0:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <I2C_RequestMemoryWrite+0xa4>)
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f9d7 	bl	800609c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	69b9      	ldr	r1, [r7, #24]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f8f0 	bl	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e02c      	b.n	8005d5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d105      	bne.n	8005d14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d08:	893b      	ldrh	r3, [r7, #8]
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
 8005d12:	e015      	b.n	8005d40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d14:	893b      	ldrh	r3, [r7, #8]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	69b9      	ldr	r1, [r7, #24]
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f8d6 	bl	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e012      	b.n	8005d5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d36:	893b      	ldrh	r3, [r7, #8]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2180      	movs	r1, #128	; 0x80
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 f884 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	80002000 	.word	0x80002000

08005d68 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	4608      	mov	r0, r1
 8005d72:	4611      	mov	r1, r2
 8005d74:	461a      	mov	r2, r3
 8005d76:	4603      	mov	r3, r0
 8005d78:	817b      	strh	r3, [r7, #10]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	813b      	strh	r3, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	8979      	ldrh	r1, [r7, #10]
 8005d88:	4b20      	ldr	r3, [pc, #128]	; (8005e0c <I2C_RequestMemoryRead+0xa4>)
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 f984 	bl	800609c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	69b9      	ldr	r1, [r7, #24]
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f000 f89d 	bl	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e02c      	b.n	8005e02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d105      	bne.n	8005dba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dae:	893b      	ldrh	r3, [r7, #8]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	629a      	str	r2, [r3, #40]	; 0x28
 8005db8:	e015      	b.n	8005de6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005dba:	893b      	ldrh	r3, [r7, #8]
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	69b9      	ldr	r1, [r7, #24]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 f883 	bl	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e012      	b.n	8005e02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ddc:	893b      	ldrh	r3, [r7, #8]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2140      	movs	r1, #64	; 0x40
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f831 	bl	8005e58 <I2C_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	80002000 	.word	0x80002000

08005e10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d103      	bne.n	8005e2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d007      	beq.n	8005e4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	619a      	str	r2, [r3, #24]
  }
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e68:	e022      	b.n	8005eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d01e      	beq.n	8005eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e72:	f7fc fa8d 	bl	8002390 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d113      	bne.n	8005eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8c:	f043 0220 	orr.w	r2, r3, #32
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e00f      	b.n	8005ed0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699a      	ldr	r2, [r3, #24]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	79fb      	ldrb	r3, [r7, #7]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d0cd      	beq.n	8005e6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ee4:	e02c      	b.n	8005f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f000 f870 	bl	8005fd0 <I2C_IsAcknowledgeFailed>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e02a      	b.n	8005f50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d01e      	beq.n	8005f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f02:	f7fc fa45 	bl	8002390 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d302      	bcc.n	8005f18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d113      	bne.n	8005f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e007      	b.n	8005f50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d1cb      	bne.n	8005ee6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f64:	e028      	b.n	8005fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 f830 	bl	8005fd0 <I2C_IsAcknowledgeFailed>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e026      	b.n	8005fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f7a:	f7fc fa09 	bl	8002390 <HAL_GetTick>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	1ad3      	subs	r3, r2, r3
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d302      	bcc.n	8005f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d113      	bne.n	8005fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f94:	f043 0220 	orr.w	r2, r3, #32
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e007      	b.n	8005fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d1cf      	bne.n	8005f66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	f003 0310 	and.w	r3, r3, #16
 8005fe6:	2b10      	cmp	r3, #16
 8005fe8:	d151      	bne.n	800608e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fea:	e022      	b.n	8006032 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d01e      	beq.n	8006032 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ff4:	f7fc f9cc 	bl	8002390 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	429a      	cmp	r2, r3
 8006002:	d302      	bcc.n	800600a <I2C_IsAcknowledgeFailed+0x3a>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d113      	bne.n	8006032 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600e:	f043 0220 	orr.w	r2, r3, #32
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e02e      	b.n	8006090 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	f003 0320 	and.w	r3, r3, #32
 800603c:	2b20      	cmp	r3, #32
 800603e:	d1d5      	bne.n	8005fec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2210      	movs	r2, #16
 8006046:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2220      	movs	r2, #32
 800604e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fedd 	bl	8005e10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6859      	ldr	r1, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <I2C_IsAcknowledgeFailed+0xc8>)
 8006062:	400b      	ands	r3, r1
 8006064:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606a:	f043 0204 	orr.w	r2, r3, #4
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e000      	b.n	8006090 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	fe00e800 	.word	0xfe00e800

0800609c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	460b      	mov	r3, r1
 80060a8:	817b      	strh	r3, [r7, #10]
 80060aa:	4613      	mov	r3, r2
 80060ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	0d5b      	lsrs	r3, r3, #21
 80060b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060bc:	4b0d      	ldr	r3, [pc, #52]	; (80060f4 <I2C_TransferConfig+0x58>)
 80060be:	430b      	orrs	r3, r1
 80060c0:	43db      	mvns	r3, r3
 80060c2:	ea02 0103 	and.w	r1, r2, r3
 80060c6:	897b      	ldrh	r3, [r7, #10]
 80060c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060cc:	7a7b      	ldrb	r3, [r7, #9]
 80060ce:	041b      	lsls	r3, r3, #16
 80060d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	431a      	orrs	r2, r3
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80060e6:	bf00      	nop
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	03ff63ff 	.word	0x03ff63ff

080060f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b20      	cmp	r3, #32
 800610c:	d138      	bne.n	8006180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006118:	2302      	movs	r3, #2
 800611a:	e032      	b.n	8006182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800614a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800617c:	2300      	movs	r3, #0
 800617e:	e000      	b.n	8006182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006180:	2302      	movs	r3, #2
  }
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr

0800618e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d139      	bne.n	8006218 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e033      	b.n	800621a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2224      	movs	r2, #36	; 0x24
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006214:	2300      	movs	r3, #0
 8006216:	e000      	b.n	800621a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006218:	2302      	movs	r3, #2
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr

08006226 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006228:	b08f      	sub	sp, #60	; 0x3c
 800622a:	af0a      	add	r7, sp, #40	; 0x28
 800622c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e116      	b.n	8006466 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d106      	bne.n	8006258 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fb fe4c 	bl	8001ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2203      	movs	r2, #3
 800625c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d102      	bne.n	8006272 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f005 fe9c 	bl	800bfb4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	603b      	str	r3, [r7, #0]
 8006282:	687e      	ldr	r6, [r7, #4]
 8006284:	466d      	mov	r5, sp
 8006286:	f106 0410 	add.w	r4, r6, #16
 800628a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800628c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800628e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006292:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006296:	e885 0003 	stmia.w	r5, {r0, r1}
 800629a:	1d33      	adds	r3, r6, #4
 800629c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800629e:	6838      	ldr	r0, [r7, #0]
 80062a0:	f005 fe1a 	bl	800bed8 <USB_CoreInit>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d005      	beq.n	80062b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2202      	movs	r2, #2
 80062ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e0d7      	b.n	8006466 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f005 fe8a 	bl	800bfd6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e04a      	b.n	800635e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80062c8:	7bfa      	ldrb	r2, [r7, #15]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	1a9b      	subs	r3, r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	333d      	adds	r3, #61	; 0x3d
 80062d8:	2201      	movs	r2, #1
 80062da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062dc:	7bfa      	ldrb	r2, [r7, #15]
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	1a9b      	subs	r3, r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	333c      	adds	r3, #60	; 0x3c
 80062ec:	7bfa      	ldrb	r2, [r7, #15]
 80062ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80062f0:	7bfa      	ldrb	r2, [r7, #15]
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	b298      	uxth	r0, r3
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	3342      	adds	r3, #66	; 0x42
 8006304:	4602      	mov	r2, r0
 8006306:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006308:	7bfa      	ldrb	r2, [r7, #15]
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	4613      	mov	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	333f      	adds	r3, #63	; 0x3f
 8006318:	2200      	movs	r2, #0
 800631a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800631c:	7bfa      	ldrb	r2, [r7, #15]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	3344      	adds	r3, #68	; 0x44
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006330:	7bfa      	ldrb	r2, [r7, #15]
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	3348      	adds	r3, #72	; 0x48
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006344:	7bfa      	ldrb	r2, [r7, #15]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	3350      	adds	r3, #80	; 0x50
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	3301      	adds	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	d3af      	bcc.n	80062c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]
 800636c:	e044      	b.n	80063f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800636e:	7bfa      	ldrb	r2, [r7, #15]
 8006370:	6879      	ldr	r1, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	00db      	lsls	r3, r3, #3
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006384:	7bfa      	ldrb	r2, [r7, #15]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4613      	mov	r3, r2
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006396:	7bfa      	ldrb	r2, [r7, #15]
 8006398:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	1a9b      	subs	r3, r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063b0:	7bfa      	ldrb	r2, [r7, #15]
 80063b2:	6879      	ldr	r1, [r7, #4]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	1a9b      	subs	r3, r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	440b      	add	r3, r1
 80063be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063c6:	7bfa      	ldrb	r2, [r7, #15]
 80063c8:	6879      	ldr	r1, [r7, #4]
 80063ca:	4613      	mov	r3, r2
 80063cc:	00db      	lsls	r3, r3, #3
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	440b      	add	r3, r1
 80063d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063d8:	2200      	movs	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80063dc:	7bfa      	ldrb	r2, [r7, #15]
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	3301      	adds	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
 80063f8:	7bfa      	ldrb	r2, [r7, #15]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d3b5      	bcc.n	800636e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	687e      	ldr	r6, [r7, #4]
 800640a:	466d      	mov	r5, sp
 800640c:	f106 0410 	add.w	r4, r6, #16
 8006410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006418:	e894 0003 	ldmia.w	r4, {r0, r1}
 800641c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006420:	1d33      	adds	r3, r6, #4
 8006422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006424:	6838      	ldr	r0, [r7, #0]
 8006426:	f005 fe01 	bl	800c02c <USB_DevInit>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e014      	b.n	8006466 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b01      	cmp	r3, #1
 8006452:	d102      	bne.n	800645a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f80b 	bl	8006470 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f005 ffa3 	bl	800c3aa <USB_DevDisconnect>

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006470 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	10000003 	.word	0x10000003

080064b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80064c0:	4b29      	ldr	r3, [pc, #164]	; (8006568 <HAL_PWREx_ConfigSupply+0xb0>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	2b06      	cmp	r3, #6
 80064ca:	d00a      	beq.n	80064e2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80064cc:	4b26      	ldr	r3, [pc, #152]	; (8006568 <HAL_PWREx_ConfigSupply+0xb0>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d001      	beq.n	80064de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e040      	b.n	8006560 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e03e      	b.n	8006560 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80064e2:	4b21      	ldr	r3, [pc, #132]	; (8006568 <HAL_PWREx_ConfigSupply+0xb0>)
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80064ea:	491f      	ldr	r1, [pc, #124]	; (8006568 <HAL_PWREx_ConfigSupply+0xb0>)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80064f2:	f7fb ff4d 	bl	8002390 <HAL_GetTick>
 80064f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80064f8:	e009      	b.n	800650e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80064fa:	f7fb ff49 	bl	8002390 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006508:	d901      	bls.n	800650e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e028      	b.n	8006560 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800650e:	4b16      	ldr	r3, [pc, #88]	; (8006568 <HAL_PWREx_ConfigSupply+0xb0>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800651a:	d1ee      	bne.n	80064fa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b1e      	cmp	r3, #30
 8006520:	d008      	beq.n	8006534 <HAL_PWREx_ConfigSupply+0x7c>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b2e      	cmp	r3, #46	; 0x2e
 8006526:	d005      	beq.n	8006534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b1d      	cmp	r3, #29
 800652c:	d002      	beq.n	8006534 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2b2d      	cmp	r3, #45	; 0x2d
 8006532:	d114      	bne.n	800655e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006534:	f7fb ff2c 	bl	8002390 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800653a:	e009      	b.n	8006550 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800653c:	f7fb ff28 	bl	8002390 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654a:	d901      	bls.n	8006550 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e007      	b.n	8006560 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006550:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_PWREx_ConfigSupply+0xb0>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655c:	d1ee      	bne.n	800653c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	58024800 	.word	0x58024800

0800656c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006570:	4b05      	ldr	r3, [pc, #20]	; (8006588 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	4a04      	ldr	r2, [pc, #16]	; (8006588 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800657a:	60d3      	str	r3, [r2, #12]
}
 800657c:	bf00      	nop
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	58024800 	.word	0x58024800

0800658c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08c      	sub	sp, #48	; 0x30
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e3ff      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8087 	beq.w	80066ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ac:	4b99      	ldr	r3, [pc, #612]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065b6:	4b97      	ldr	r3, [pc, #604]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d007      	beq.n	80065d2 <HAL_RCC_OscConfig+0x46>
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	2b18      	cmp	r3, #24
 80065c6:	d110      	bne.n	80065ea <HAL_RCC_OscConfig+0x5e>
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d10b      	bne.n	80065ea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d2:	4b90      	ldr	r3, [pc, #576]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d06c      	beq.n	80066b8 <HAL_RCC_OscConfig+0x12c>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d168      	bne.n	80066b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e3d9      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f2:	d106      	bne.n	8006602 <HAL_RCC_OscConfig+0x76>
 80065f4:	4b87      	ldr	r3, [pc, #540]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a86      	ldr	r2, [pc, #536]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80065fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	e02e      	b.n	8006660 <HAL_RCC_OscConfig+0xd4>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d10c      	bne.n	8006624 <HAL_RCC_OscConfig+0x98>
 800660a:	4b82      	ldr	r3, [pc, #520]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a81      	ldr	r2, [pc, #516]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006610:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	4b7f      	ldr	r3, [pc, #508]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a7e      	ldr	r2, [pc, #504]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800661c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e01d      	b.n	8006660 <HAL_RCC_OscConfig+0xd4>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0xbc>
 800662e:	4b79      	ldr	r3, [pc, #484]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a78      	ldr	r2, [pc, #480]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b76      	ldr	r3, [pc, #472]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a75      	ldr	r2, [pc, #468]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e00b      	b.n	8006660 <HAL_RCC_OscConfig+0xd4>
 8006648:	4b72      	ldr	r3, [pc, #456]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a71      	ldr	r2, [pc, #452]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800664e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4b6f      	ldr	r3, [pc, #444]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a6e      	ldr	r2, [pc, #440]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800665a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800665e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d013      	beq.n	8006690 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006668:	f7fb fe92 	bl	8002390 <HAL_GetTick>
 800666c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006670:	f7fb fe8e 	bl	8002390 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b64      	cmp	r3, #100	; 0x64
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e38d      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006682:	4b64      	ldr	r3, [pc, #400]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0xe4>
 800668e:	e014      	b.n	80066ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006690:	f7fb fe7e 	bl	8002390 <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006698:	f7fb fe7a 	bl	8002390 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	; 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e379      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80066aa:	4b5a      	ldr	r3, [pc, #360]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0x10c>
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 80ae 	beq.w	8006824 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066c8:	4b52      	ldr	r3, [pc, #328]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066d2:	4b50      	ldr	r3, [pc, #320]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d007      	beq.n	80066ee <HAL_RCC_OscConfig+0x162>
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	2b18      	cmp	r3, #24
 80066e2:	d13a      	bne.n	800675a <HAL_RCC_OscConfig+0x1ce>
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d135      	bne.n	800675a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ee:	4b49      	ldr	r3, [pc, #292]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0304 	and.w	r3, r3, #4
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x17a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d101      	bne.n	8006706 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e34b      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	f7fb fe73 	bl	80023f0 <HAL_GetREVID>
 800670a:	4603      	mov	r3, r0
 800670c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006710:	4293      	cmp	r3, r2
 8006712:	d817      	bhi.n	8006744 <HAL_RCC_OscConfig+0x1b8>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d108      	bne.n	800672e <HAL_RCC_OscConfig+0x1a2>
 800671c:	4b3d      	ldr	r3, [pc, #244]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006724:	4a3b      	ldr	r2, [pc, #236]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800672c:	e07a      	b.n	8006824 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800672e:	4b39      	ldr	r3, [pc, #228]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	031b      	lsls	r3, r3, #12
 800673c:	4935      	ldr	r1, [pc, #212]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 800673e:	4313      	orrs	r3, r2
 8006740:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006742:	e06f      	b.n	8006824 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006744:	4b33      	ldr	r3, [pc, #204]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	061b      	lsls	r3, r3, #24
 8006752:	4930      	ldr	r1, [pc, #192]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006754:	4313      	orrs	r3, r2
 8006756:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006758:	e064      	b.n	8006824 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d045      	beq.n	80067ee <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006762:	4b2c      	ldr	r3, [pc, #176]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f023 0219 	bic.w	r2, r3, #25
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	4929      	ldr	r1, [pc, #164]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006770:	4313      	orrs	r3, r2
 8006772:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fb fe0c 	bl	8002390 <HAL_GetTick>
 8006778:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800677c:	f7fb fe08 	bl	8002390 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e307      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800678e:	4b21      	ldr	r3, [pc, #132]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800679a:	f7fb fe29 	bl	80023f0 <HAL_GetREVID>
 800679e:	4603      	mov	r3, r0
 80067a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d817      	bhi.n	80067d8 <HAL_RCC_OscConfig+0x24c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d108      	bne.n	80067c2 <HAL_RCC_OscConfig+0x236>
 80067b0:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80067b8:	4a16      	ldr	r2, [pc, #88]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067be:	6053      	str	r3, [r2, #4]
 80067c0:	e030      	b.n	8006824 <HAL_RCC_OscConfig+0x298>
 80067c2:	4b14      	ldr	r3, [pc, #80]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	031b      	lsls	r3, r3, #12
 80067d0:	4910      	ldr	r1, [pc, #64]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	604b      	str	r3, [r1, #4]
 80067d6:	e025      	b.n	8006824 <HAL_RCC_OscConfig+0x298>
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	061b      	lsls	r3, r3, #24
 80067e6:	490b      	ldr	r1, [pc, #44]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	604b      	str	r3, [r1, #4]
 80067ec:	e01a      	b.n	8006824 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ee:	4b09      	ldr	r3, [pc, #36]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <HAL_RCC_OscConfig+0x288>)
 80067f4:	f023 0301 	bic.w	r3, r3, #1
 80067f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fa:	f7fb fdc9 	bl	8002390 <HAL_GetTick>
 80067fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006800:	e00a      	b.n	8006818 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006802:	f7fb fdc5 	bl	8002390 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	2b02      	cmp	r3, #2
 800680e:	d903      	bls.n	8006818 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e2c4      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
 8006814:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006818:	4ba4      	ldr	r3, [pc, #656]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0304 	and.w	r3, r3, #4
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1ee      	bne.n	8006802 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 80a9 	beq.w	8006984 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006832:	4b9e      	ldr	r3, [pc, #632]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800683a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800683c:	4b9b      	ldr	r3, [pc, #620]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800683e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006840:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d007      	beq.n	8006858 <HAL_RCC_OscConfig+0x2cc>
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b18      	cmp	r3, #24
 800684c:	d13a      	bne.n	80068c4 <HAL_RCC_OscConfig+0x338>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f003 0303 	and.w	r3, r3, #3
 8006854:	2b01      	cmp	r3, #1
 8006856:	d135      	bne.n	80068c4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006858:	4b94      	ldr	r3, [pc, #592]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_RCC_OscConfig+0x2e4>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	2b80      	cmp	r3, #128	; 0x80
 800686a:	d001      	beq.n	8006870 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e296      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006870:	f7fb fdbe 	bl	80023f0 <HAL_GetREVID>
 8006874:	4603      	mov	r3, r0
 8006876:	f241 0203 	movw	r2, #4099	; 0x1003
 800687a:	4293      	cmp	r3, r2
 800687c:	d817      	bhi.n	80068ae <HAL_RCC_OscConfig+0x322>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	2b20      	cmp	r3, #32
 8006884:	d108      	bne.n	8006898 <HAL_RCC_OscConfig+0x30c>
 8006886:	4b89      	ldr	r3, [pc, #548]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800688e:	4a87      	ldr	r2, [pc, #540]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006894:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006896:	e075      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006898:	4b84      	ldr	r3, [pc, #528]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	069b      	lsls	r3, r3, #26
 80068a6:	4981      	ldr	r1, [pc, #516]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068ac:	e06a      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068ae:	4b7f      	ldr	r3, [pc, #508]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	061b      	lsls	r3, r3, #24
 80068bc:	497b      	ldr	r1, [pc, #492]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068c2:	e05f      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d042      	beq.n	8006952 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068cc:	4b77      	ldr	r3, [pc, #476]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a76      	ldr	r2, [pc, #472]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80068d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fb fd5a 	bl	8002390 <HAL_GetTick>
 80068dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068e0:	f7fb fd56 	bl	8002390 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e255      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068f2:	4b6e      	ldr	r3, [pc, #440]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068fe:	f7fb fd77 	bl	80023f0 <HAL_GetREVID>
 8006902:	4603      	mov	r3, r0
 8006904:	f241 0203 	movw	r2, #4099	; 0x1003
 8006908:	4293      	cmp	r3, r2
 800690a:	d817      	bhi.n	800693c <HAL_RCC_OscConfig+0x3b0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	2b20      	cmp	r3, #32
 8006912:	d108      	bne.n	8006926 <HAL_RCC_OscConfig+0x39a>
 8006914:	4b65      	ldr	r3, [pc, #404]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800691c:	4a63      	ldr	r2, [pc, #396]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800691e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006922:	6053      	str	r3, [r2, #4]
 8006924:	e02e      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
 8006926:	4b61      	ldr	r3, [pc, #388]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	069b      	lsls	r3, r3, #26
 8006934:	495d      	ldr	r1, [pc, #372]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006936:	4313      	orrs	r3, r2
 8006938:	604b      	str	r3, [r1, #4]
 800693a:	e023      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
 800693c:	4b5b      	ldr	r3, [pc, #364]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	061b      	lsls	r3, r3, #24
 800694a:	4958      	ldr	r1, [pc, #352]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800694c:	4313      	orrs	r3, r2
 800694e:	60cb      	str	r3, [r1, #12]
 8006950:	e018      	b.n	8006984 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006952:	4b56      	ldr	r3, [pc, #344]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a55      	ldr	r2, [pc, #340]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800695c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695e:	f7fb fd17 	bl	8002390 <HAL_GetTick>
 8006962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006964:	e008      	b.n	8006978 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006966:	f7fb fd13 	bl	8002390 <HAL_GetTick>
 800696a:	4602      	mov	r2, r0
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	2b02      	cmp	r3, #2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e212      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006978:	4b4c      	ldr	r3, [pc, #304]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f0      	bne.n	8006966 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d036      	beq.n	80069fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d019      	beq.n	80069cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006998:	4b44      	ldr	r3, [pc, #272]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800699a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699c:	4a43      	ldr	r2, [pc, #268]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a4:	f7fb fcf4 	bl	8002390 <HAL_GetTick>
 80069a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069aa:	e008      	b.n	80069be <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ac:	f7fb fcf0 	bl	8002390 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e1ef      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069be:	4b3b      	ldr	r3, [pc, #236]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80069c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0f0      	beq.n	80069ac <HAL_RCC_OscConfig+0x420>
 80069ca:	e018      	b.n	80069fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069cc:	4b37      	ldr	r3, [pc, #220]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80069ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d0:	4a36      	ldr	r2, [pc, #216]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d8:	f7fb fcda 	bl	8002390 <HAL_GetTick>
 80069dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069e0:	f7fb fcd6 	bl	8002390 <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e1d5      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 80069f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0320 	and.w	r3, r3, #32
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d036      	beq.n	8006a78 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d019      	beq.n	8006a46 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a12:	4b26      	ldr	r3, [pc, #152]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a25      	ldr	r2, [pc, #148]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a1e:	f7fb fcb7 	bl	8002390 <HAL_GetTick>
 8006a22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a24:	e008      	b.n	8006a38 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a26:	f7fb fcb3 	bl	8002390 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e1b2      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a38:	4b1c      	ldr	r3, [pc, #112]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0f0      	beq.n	8006a26 <HAL_RCC_OscConfig+0x49a>
 8006a44:	e018      	b.n	8006a78 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a46:	4b19      	ldr	r3, [pc, #100]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a18      	ldr	r2, [pc, #96]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a52:	f7fb fc9d 	bl	8002390 <HAL_GetTick>
 8006a56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a5a:	f7fb fc99 	bl	8002390 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e198      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <HAL_RCC_OscConfig+0x520>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f0      	bne.n	8006a5a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 8085 	beq.w	8006b90 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <HAL_RCC_OscConfig+0x524>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <HAL_RCC_OscConfig+0x524>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a92:	f7fb fc7d 	bl	8002390 <HAL_GetTick>
 8006a96:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a98:	e00c      	b.n	8006ab4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a9a:	f7fb fc79 	bl	8002390 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b64      	cmp	r3, #100	; 0x64
 8006aa6:	d905      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e178      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
 8006aac:	58024400 	.word	0x58024400
 8006ab0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ab4:	4b96      	ldr	r3, [pc, #600]	; (8006d10 <HAL_RCC_OscConfig+0x784>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0ec      	beq.n	8006a9a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d106      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x54a>
 8006ac8:	4b92      	ldr	r3, [pc, #584]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006acc:	4a91      	ldr	r2, [pc, #580]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006ace:	f043 0301 	orr.w	r3, r3, #1
 8006ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad4:	e02d      	b.n	8006b32 <HAL_RCC_OscConfig+0x5a6>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x56c>
 8006ade:	4b8d      	ldr	r3, [pc, #564]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	4a8c      	ldr	r2, [pc, #560]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aea:	4b8a      	ldr	r3, [pc, #552]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aee:	4a89      	ldr	r2, [pc, #548]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
 8006af6:	e01c      	b.n	8006b32 <HAL_RCC_OscConfig+0x5a6>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b05      	cmp	r3, #5
 8006afe:	d10c      	bne.n	8006b1a <HAL_RCC_OscConfig+0x58e>
 8006b00:	4b84      	ldr	r3, [pc, #528]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b04:	4a83      	ldr	r2, [pc, #524]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b06:	f043 0304 	orr.w	r3, r3, #4
 8006b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b0c:	4b81      	ldr	r3, [pc, #516]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b10:	4a80      	ldr	r2, [pc, #512]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b12:	f043 0301 	orr.w	r3, r3, #1
 8006b16:	6713      	str	r3, [r2, #112]	; 0x70
 8006b18:	e00b      	b.n	8006b32 <HAL_RCC_OscConfig+0x5a6>
 8006b1a:	4b7e      	ldr	r3, [pc, #504]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1e:	4a7d      	ldr	r2, [pc, #500]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	6713      	str	r3, [r2, #112]	; 0x70
 8006b26:	4b7b      	ldr	r3, [pc, #492]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b2a:	4a7a      	ldr	r2, [pc, #488]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b2c:	f023 0304 	bic.w	r3, r3, #4
 8006b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d015      	beq.n	8006b66 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fb fc29 	bl	8002390 <HAL_GetTick>
 8006b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b40:	e00a      	b.n	8006b58 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b42:	f7fb fc25 	bl	8002390 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e122      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b58:	4b6e      	ldr	r3, [pc, #440]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d0ee      	beq.n	8006b42 <HAL_RCC_OscConfig+0x5b6>
 8006b64:	e014      	b.n	8006b90 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b66:	f7fb fc13 	bl	8002390 <HAL_GetTick>
 8006b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b6c:	e00a      	b.n	8006b84 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b6e:	f7fb fc0f 	bl	8002390 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d901      	bls.n	8006b84 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006b80:	2303      	movs	r3, #3
 8006b82:	e10c      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b84:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b88:	f003 0302 	and.w	r3, r3, #2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1ee      	bne.n	8006b6e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8101 	beq.w	8006d9c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b9a:	4b5e      	ldr	r3, [pc, #376]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ba2:	2b18      	cmp	r3, #24
 8006ba4:	f000 80bc 	beq.w	8006d20 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	f040 8095 	bne.w	8006cdc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bb2:	4b58      	ldr	r3, [pc, #352]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a57      	ldr	r2, [pc, #348]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bbe:	f7fb fbe7 	bl	8002390 <HAL_GetTick>
 8006bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc6:	f7fb fbe3 	bl	8002390 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e0e2      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bd8:	4b4e      	ldr	r3, [pc, #312]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1f0      	bne.n	8006bc6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006be4:	4b4b      	ldr	r3, [pc, #300]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006be8:	4b4b      	ldr	r3, [pc, #300]	; (8006d18 <HAL_RCC_OscConfig+0x78c>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006bf4:	0112      	lsls	r2, r2, #4
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	4946      	ldr	r1, [pc, #280]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	628b      	str	r3, [r1, #40]	; 0x28
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	3b01      	subs	r3, #1
 8006c04:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	025b      	lsls	r3, r3, #9
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	3b01      	subs	r3, #1
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c2e:	4939      	ldr	r1, [pc, #228]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c34:	4b37      	ldr	r3, [pc, #220]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	4a36      	ldr	r2, [pc, #216]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c3a:	f023 0301 	bic.w	r3, r3, #1
 8006c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c40:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c44:	4b35      	ldr	r3, [pc, #212]	; (8006d1c <HAL_RCC_OscConfig+0x790>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c4c:	00d2      	lsls	r2, r2, #3
 8006c4e:	4931      	ldr	r1, [pc, #196]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c54:	4b2f      	ldr	r3, [pc, #188]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f023 020c 	bic.w	r2, r3, #12
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c60:	492c      	ldr	r1, [pc, #176]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c66:	4b2b      	ldr	r3, [pc, #172]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6a:	f023 0202 	bic.w	r2, r3, #2
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c72:	4928      	ldr	r1, [pc, #160]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c78:	4b26      	ldr	r3, [pc, #152]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4a25      	ldr	r2, [pc, #148]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4a22      	ldr	r2, [pc, #136]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c90:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	4a1f      	ldr	r2, [pc, #124]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006ca2:	f043 0301 	orr.w	r3, r3, #1
 8006ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a19      	ldr	r2, [pc, #100]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fb fb6c 	bl	8002390 <HAL_GetTick>
 8006cb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cbc:	f7fb fb68 	bl	8002390 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e067      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cce:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x730>
 8006cda:	e05f      	b.n	8006d9c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0c      	ldr	r2, [pc, #48]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006ce2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fb fb52 	bl	8002390 <HAL_GetTick>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cf0:	f7fb fb4e 	bl	8002390 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e04d      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d02:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <HAL_RCC_OscConfig+0x788>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x764>
 8006d0e:	e045      	b.n	8006d9c <HAL_RCC_OscConfig+0x810>
 8006d10:	58024800 	.word	0x58024800
 8006d14:	58024400 	.word	0x58024400
 8006d18:	fffffc0c 	.word	0xfffffc0c
 8006d1c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006d20:	4b21      	ldr	r3, [pc, #132]	; (8006da8 <HAL_RCC_OscConfig+0x81c>)
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d26:	4b20      	ldr	r3, [pc, #128]	; (8006da8 <HAL_RCC_OscConfig+0x81c>)
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d031      	beq.n	8006d98 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f003 0203 	and.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d12a      	bne.n	8006d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	091b      	lsrs	r3, r3, #4
 8006d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d122      	bne.n	8006d98 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d11a      	bne.n	8006d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	0a5b      	lsrs	r3, r3, #9
 8006d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d111      	bne.n	8006d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	0c1b      	lsrs	r3, r3, #16
 8006d78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d108      	bne.n	8006d98 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	0e1b      	lsrs	r3, r3, #24
 8006d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d001      	beq.n	8006d9c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e000      	b.n	8006d9e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3730      	adds	r7, #48	; 0x30
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	58024400 	.word	0x58024400

08006dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e19c      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc0:	4b8a      	ldr	r3, [pc, #552]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 030f 	and.w	r3, r3, #15
 8006dc8:	683a      	ldr	r2, [r7, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d910      	bls.n	8006df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dce:	4b87      	ldr	r3, [pc, #540]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f023 020f 	bic.w	r2, r3, #15
 8006dd6:	4985      	ldr	r1, [pc, #532]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dde:	4b83      	ldr	r3, [pc, #524]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d001      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e184      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0304 	and.w	r3, r3, #4
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d010      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	4b7b      	ldr	r3, [pc, #492]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d908      	bls.n	8006e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e0c:	4b78      	ldr	r3, [pc, #480]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	4975      	ldr	r1, [pc, #468]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d010      	beq.n	8006e4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695a      	ldr	r2, [r3, #20]
 8006e2e:	4b70      	ldr	r3, [pc, #448]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d908      	bls.n	8006e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e3a:	4b6d      	ldr	r3, [pc, #436]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	496a      	ldr	r1, [pc, #424]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0310 	and.w	r3, r3, #16
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d010      	beq.n	8006e7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699a      	ldr	r2, [r3, #24]
 8006e5c:	4b64      	ldr	r3, [pc, #400]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d908      	bls.n	8006e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e68:	4b61      	ldr	r3, [pc, #388]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e6a:	69db      	ldr	r3, [r3, #28]
 8006e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	495e      	ldr	r1, [pc, #376]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d010      	beq.n	8006ea8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	4b59      	ldr	r3, [pc, #356]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d908      	bls.n	8006ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e96:	4b56      	ldr	r3, [pc, #344]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	4953      	ldr	r1, [pc, #332]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d010      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	4b4d      	ldr	r3, [pc, #308]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d908      	bls.n	8006ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ec4:	4b4a      	ldr	r3, [pc, #296]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	f023 020f 	bic.w	r2, r3, #15
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	4947      	ldr	r1, [pc, #284]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d055      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006ee2:	4b43      	ldr	r3, [pc, #268]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	4940      	ldr	r1, [pc, #256]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b02      	cmp	r3, #2
 8006efa:	d107      	bne.n	8006f0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006efc:	4b3c      	ldr	r3, [pc, #240]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d121      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e0f6      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d107      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f14:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d115      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0ea      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f2c:	4b30      	ldr	r3, [pc, #192]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d109      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e0de      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0d6      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f4c:	4b28      	ldr	r3, [pc, #160]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f023 0207 	bic.w	r2, r3, #7
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4925      	ldr	r1, [pc, #148]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f5e:	f7fb fa17 	bl	8002390 <HAL_GetTick>
 8006f62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f64:	e00a      	b.n	8006f7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f66:	f7fb fa13 	bl	8002390 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d901      	bls.n	8006f7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	e0be      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f7c:	4b1c      	ldr	r3, [pc, #112]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d1eb      	bne.n	8006f66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d010      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68da      	ldr	r2, [r3, #12]
 8006f9e:	4b14      	ldr	r3, [pc, #80]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d208      	bcs.n	8006fbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006faa:	4b11      	ldr	r3, [pc, #68]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f023 020f 	bic.w	r2, r3, #15
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	490e      	ldr	r1, [pc, #56]	; (8006ff0 <HAL_RCC_ClockConfig+0x244>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fbc:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	683a      	ldr	r2, [r7, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d214      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fca:	4b08      	ldr	r3, [pc, #32]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f023 020f 	bic.w	r2, r3, #15
 8006fd2:	4906      	ldr	r1, [pc, #24]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fda:	4b04      	ldr	r3, [pc, #16]	; (8006fec <HAL_RCC_ClockConfig+0x240>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d005      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e086      	b.n	80070fa <HAL_RCC_ClockConfig+0x34e>
 8006fec:	52002000 	.word	0x52002000
 8006ff0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	691a      	ldr	r2, [r3, #16]
 8007004:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800700c:	429a      	cmp	r2, r3
 800700e:	d208      	bcs.n	8007022 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007010:	4b3c      	ldr	r3, [pc, #240]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	4939      	ldr	r1, [pc, #228]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800701e:	4313      	orrs	r3, r2
 8007020:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d010      	beq.n	8007050 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695a      	ldr	r2, [r3, #20]
 8007032:	4b34      	ldr	r3, [pc, #208]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800703a:	429a      	cmp	r2, r3
 800703c:	d208      	bcs.n	8007050 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	492e      	ldr	r1, [pc, #184]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800704c:	4313      	orrs	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0310 	and.w	r3, r3, #16
 8007058:	2b00      	cmp	r3, #0
 800705a:	d010      	beq.n	800707e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	699a      	ldr	r2, [r3, #24]
 8007060:	4b28      	ldr	r3, [pc, #160]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007068:	429a      	cmp	r2, r3
 800706a:	d208      	bcs.n	800707e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800706c:	4b25      	ldr	r3, [pc, #148]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	4922      	ldr	r1, [pc, #136]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800707a:	4313      	orrs	r3, r2
 800707c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0320 	and.w	r3, r3, #32
 8007086:	2b00      	cmp	r3, #0
 8007088:	d010      	beq.n	80070ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69da      	ldr	r2, [r3, #28]
 800708e:	4b1d      	ldr	r3, [pc, #116]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007096:	429a      	cmp	r2, r3
 8007098:	d208      	bcs.n	80070ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800709a:	4b1a      	ldr	r3, [pc, #104]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	4917      	ldr	r1, [pc, #92]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 80070a8:	4313      	orrs	r3, r2
 80070aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80070ac:	f000 f834 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 80070b0:	4602      	mov	r2, r0
 80070b2:	4b14      	ldr	r3, [pc, #80]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	0a1b      	lsrs	r3, r3, #8
 80070b8:	f003 030f 	and.w	r3, r3, #15
 80070bc:	4912      	ldr	r1, [pc, #72]	; (8007108 <HAL_RCC_ClockConfig+0x35c>)
 80070be:	5ccb      	ldrb	r3, [r1, r3]
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	fa22 f303 	lsr.w	r3, r2, r3
 80070c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070ca:	4b0e      	ldr	r3, [pc, #56]	; (8007104 <HAL_RCC_ClockConfig+0x358>)
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	4a0d      	ldr	r2, [pc, #52]	; (8007108 <HAL_RCC_ClockConfig+0x35c>)
 80070d4:	5cd3      	ldrb	r3, [r2, r3]
 80070d6:	f003 031f 	and.w	r3, r3, #31
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <HAL_RCC_ClockConfig+0x360>)
 80070e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070e4:	4a0a      	ldr	r2, [pc, #40]	; (8007110 <HAL_RCC_ClockConfig+0x364>)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <HAL_RCC_ClockConfig+0x368>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fb f904 	bl	80022fc <HAL_InitTick>
 80070f4:	4603      	mov	r3, r0
 80070f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
 8007108:	0800f190 	.word	0x0800f190
 800710c:	24000004 	.word	0x24000004
 8007110:	24000000 	.word	0x24000000
 8007114:	24000018 	.word	0x24000018

08007118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800711e:	4bb3      	ldr	r3, [pc, #716]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007126:	2b18      	cmp	r3, #24
 8007128:	f200 8155 	bhi.w	80073d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800712c:	a201      	add	r2, pc, #4	; (adr r2, 8007134 <HAL_RCC_GetSysClockFreq+0x1c>)
 800712e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007132:	bf00      	nop
 8007134:	08007199 	.word	0x08007199
 8007138:	080073d7 	.word	0x080073d7
 800713c:	080073d7 	.word	0x080073d7
 8007140:	080073d7 	.word	0x080073d7
 8007144:	080073d7 	.word	0x080073d7
 8007148:	080073d7 	.word	0x080073d7
 800714c:	080073d7 	.word	0x080073d7
 8007150:	080073d7 	.word	0x080073d7
 8007154:	080071bf 	.word	0x080071bf
 8007158:	080073d7 	.word	0x080073d7
 800715c:	080073d7 	.word	0x080073d7
 8007160:	080073d7 	.word	0x080073d7
 8007164:	080073d7 	.word	0x080073d7
 8007168:	080073d7 	.word	0x080073d7
 800716c:	080073d7 	.word	0x080073d7
 8007170:	080073d7 	.word	0x080073d7
 8007174:	080071c5 	.word	0x080071c5
 8007178:	080073d7 	.word	0x080073d7
 800717c:	080073d7 	.word	0x080073d7
 8007180:	080073d7 	.word	0x080073d7
 8007184:	080073d7 	.word	0x080073d7
 8007188:	080073d7 	.word	0x080073d7
 800718c:	080073d7 	.word	0x080073d7
 8007190:	080073d7 	.word	0x080073d7
 8007194:	080071cb 	.word	0x080071cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007198:	4b94      	ldr	r3, [pc, #592]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071a4:	4b91      	ldr	r3, [pc, #580]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	08db      	lsrs	r3, r3, #3
 80071aa:	f003 0303 	and.w	r3, r3, #3
 80071ae:	4a90      	ldr	r2, [pc, #576]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071b0:	fa22 f303 	lsr.w	r3, r2, r3
 80071b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80071b6:	e111      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80071b8:	4b8d      	ldr	r3, [pc, #564]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80071ba:	61bb      	str	r3, [r7, #24]
    break;
 80071bc:	e10e      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80071be:	4b8d      	ldr	r3, [pc, #564]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071c0:	61bb      	str	r3, [r7, #24]
    break;
 80071c2:	e10b      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80071c4:	4b8c      	ldr	r3, [pc, #560]	; (80073f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80071c6:	61bb      	str	r3, [r7, #24]
    break;
 80071c8:	e108      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071ca:	4b88      	ldr	r3, [pc, #544]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071d4:	4b85      	ldr	r3, [pc, #532]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	091b      	lsrs	r3, r3, #4
 80071da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071e0:	4b82      	ldr	r3, [pc, #520]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	f003 0301 	and.w	r3, r3, #1
 80071e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071ea:	4b80      	ldr	r3, [pc, #512]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ee:	08db      	lsrs	r3, r3, #3
 80071f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	ee07 3a90 	vmov	s15, r3
 80071fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007202:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80e1 	beq.w	80073d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b02      	cmp	r3, #2
 8007212:	f000 8083 	beq.w	800731c <HAL_RCC_GetSysClockFreq+0x204>
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	2b02      	cmp	r3, #2
 800721a:	f200 80a1 	bhi.w	8007360 <HAL_RCC_GetSysClockFreq+0x248>
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x114>
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d056      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800722a:	e099      	b.n	8007360 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800722c:	4b6f      	ldr	r3, [pc, #444]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0320 	and.w	r3, r3, #32
 8007234:	2b00      	cmp	r3, #0
 8007236:	d02d      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007238:	4b6c      	ldr	r3, [pc, #432]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	08db      	lsrs	r3, r3, #3
 800723e:	f003 0303 	and.w	r3, r3, #3
 8007242:	4a6b      	ldr	r2, [pc, #428]	; (80073f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
 8007248:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007262:	4b62      	ldr	r3, [pc, #392]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726a:	ee07 3a90 	vmov	s15, r3
 800726e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007272:	ed97 6a02 	vldr	s12, [r7, #8]
 8007276:	eddf 5a61 	vldr	s11, [pc, #388]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800727a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800727e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800728e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007292:	e087      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007400 <HAL_RCC_GetSysClockFreq+0x2e8>
 80072a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a6:	4b51      	ldr	r3, [pc, #324]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80072ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80072be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072d6:	e065      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	ee07 3a90 	vmov	s15, r3
 80072de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007404 <HAL_RCC_GetSysClockFreq+0x2ec>
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ea:	4b40      	ldr	r3, [pc, #256]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80072fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800730e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800731a:	e043      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007408 <HAL_RCC_GetSysClockFreq+0x2f0>
 800732a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800732e:	4b2f      	ldr	r3, [pc, #188]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800733e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007342:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800734e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800735e:	e021      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007404 <HAL_RCC_GetSysClockFreq+0x2ec>
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b1e      	ldr	r3, [pc, #120]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a02 	vldr	s12, [r7, #8]
 8007386:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80073fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a8:	0a5b      	lsrs	r3, r3, #9
 80073aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ae:	3301      	adds	r3, #1
 80073b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	ee07 3a90 	vmov	s15, r3
 80073b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073c8:	ee17 3a90 	vmov	r3, s15
 80073cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80073ce:	e005      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]
    break;
 80073d4:	e002      	b.n	80073dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80073d6:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073d8:	61bb      	str	r3, [r7, #24]
    break;
 80073da:	bf00      	nop
  }

  return sysclockfreq;
 80073dc:	69bb      	ldr	r3, [r7, #24]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3724      	adds	r7, #36	; 0x24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	58024400 	.word	0x58024400
 80073f0:	03d09000 	.word	0x03d09000
 80073f4:	003d0900 	.word	0x003d0900
 80073f8:	007a1200 	.word	0x007a1200
 80073fc:	46000000 	.word	0x46000000
 8007400:	4c742400 	.word	0x4c742400
 8007404:	4a742400 	.word	0x4a742400
 8007408:	4af42400 	.word	0x4af42400

0800740c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007412:	f7ff fe81 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 8007416:	4602      	mov	r2, r0
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <HAL_RCC_GetHCLKFreq+0x50>)
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	0a1b      	lsrs	r3, r3, #8
 800741e:	f003 030f 	and.w	r3, r3, #15
 8007422:	490f      	ldr	r1, [pc, #60]	; (8007460 <HAL_RCC_GetHCLKFreq+0x54>)
 8007424:	5ccb      	ldrb	r3, [r1, r3]
 8007426:	f003 031f 	and.w	r3, r3, #31
 800742a:	fa22 f303 	lsr.w	r3, r2, r3
 800742e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <HAL_RCC_GetHCLKFreq+0x50>)
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	4a09      	ldr	r2, [pc, #36]	; (8007460 <HAL_RCC_GetHCLKFreq+0x54>)
 800743a:	5cd3      	ldrb	r3, [r2, r3]
 800743c:	f003 031f 	and.w	r3, r3, #31
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	4a07      	ldr	r2, [pc, #28]	; (8007464 <HAL_RCC_GetHCLKFreq+0x58>)
 8007448:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800744a:	4a07      	ldr	r2, [pc, #28]	; (8007468 <HAL_RCC_GetHCLKFreq+0x5c>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007450:	4b04      	ldr	r3, [pc, #16]	; (8007464 <HAL_RCC_GetHCLKFreq+0x58>)
 8007452:	681b      	ldr	r3, [r3, #0]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	58024400 	.word	0x58024400
 8007460:	0800f190 	.word	0x0800f190
 8007464:	24000004 	.word	0x24000004
 8007468:	24000000 	.word	0x24000000

0800746c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007470:	f7ff ffcc 	bl	800740c <HAL_RCC_GetHCLKFreq>
 8007474:	4602      	mov	r2, r0
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	091b      	lsrs	r3, r3, #4
 800747c:	f003 0307 	and.w	r3, r3, #7
 8007480:	4904      	ldr	r1, [pc, #16]	; (8007494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007482:	5ccb      	ldrb	r3, [r1, r3]
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800748c:	4618      	mov	r0, r3
 800748e:	bd80      	pop	{r7, pc}
 8007490:	58024400 	.word	0x58024400
 8007494:	0800f190 	.word	0x0800f190

08007498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800749c:	f7ff ffb6 	bl	800740c <HAL_RCC_GetHCLKFreq>
 80074a0:	4602      	mov	r2, r0
 80074a2:	4b06      	ldr	r3, [pc, #24]	; (80074bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	f003 0307 	and.w	r3, r3, #7
 80074ac:	4904      	ldr	r1, [pc, #16]	; (80074c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80074ae:	5ccb      	ldrb	r3, [r1, r3]
 80074b0:	f003 031f 	and.w	r3, r3, #31
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	58024400 	.word	0x58024400
 80074c0:	0800f190 	.word	0x0800f190

080074c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074cc:	2300      	movs	r3, #0
 80074ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074d0:	2300      	movs	r3, #0
 80074d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d03f      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074e8:	d02a      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80074ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80074ee:	d824      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074f4:	d018      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074fa:	d81e      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007504:	d007      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007506:	e018      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007508:	4bab      	ldr	r3, [pc, #684]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	4aaa      	ldr	r2, [pc, #680]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800750e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007512:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007514:	e015      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	3304      	adds	r3, #4
 800751a:	2102      	movs	r1, #2
 800751c:	4618      	mov	r0, r3
 800751e:	f001 fff3 	bl	8009508 <RCCEx_PLL2_Config>
 8007522:	4603      	mov	r3, r0
 8007524:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007526:	e00c      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3324      	adds	r3, #36	; 0x24
 800752c:	2102      	movs	r1, #2
 800752e:	4618      	mov	r0, r3
 8007530:	f002 f89c 	bl	800966c <RCCEx_PLL3_Config>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007538:	e003      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
      break;
 800753e:	e000      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007542:	7dfb      	ldrb	r3, [r7, #23]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d109      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007548:	4b9b      	ldr	r3, [pc, #620]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007554:	4998      	ldr	r1, [pc, #608]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007556:	4313      	orrs	r3, r2
 8007558:	650b      	str	r3, [r1, #80]	; 0x50
 800755a:	e001      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007568:	2b00      	cmp	r3, #0
 800756a:	d03d      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	2b04      	cmp	r3, #4
 8007572:	d826      	bhi.n	80075c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	08007591 	.word	0x08007591
 8007580:	0800759f 	.word	0x0800759f
 8007584:	080075b1 	.word	0x080075b1
 8007588:	080075c9 	.word	0x080075c9
 800758c:	080075c9 	.word	0x080075c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007590:	4b89      	ldr	r3, [pc, #548]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4a88      	ldr	r2, [pc, #544]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800759a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800759c:	e015      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	3304      	adds	r3, #4
 80075a2:	2100      	movs	r1, #0
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 ffaf 	bl	8009508 <RCCEx_PLL2_Config>
 80075aa:	4603      	mov	r3, r0
 80075ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ae:	e00c      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	3324      	adds	r3, #36	; 0x24
 80075b4:	2100      	movs	r1, #0
 80075b6:	4618      	mov	r0, r3
 80075b8:	f002 f858 	bl	800966c <RCCEx_PLL3_Config>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075c0:	e003      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]
      break;
 80075c6:	e000      	b.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80075c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d109      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075d0:	4b79      	ldr	r3, [pc, #484]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d4:	f023 0207 	bic.w	r2, r3, #7
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	4976      	ldr	r1, [pc, #472]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	650b      	str	r3, [r1, #80]	; 0x50
 80075e2:	e001      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d042      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075fc:	d02b      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80075fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007602:	d825      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007604:	2bc0      	cmp	r3, #192	; 0xc0
 8007606:	d028      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007608:	2bc0      	cmp	r3, #192	; 0xc0
 800760a:	d821      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800760c:	2b80      	cmp	r3, #128	; 0x80
 800760e:	d016      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007610:	2b80      	cmp	r3, #128	; 0x80
 8007612:	d81d      	bhi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	d007      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800761c:	e018      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800761e:	4b66      	ldr	r3, [pc, #408]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	4a65      	ldr	r2, [pc, #404]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007628:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800762a:	e017      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3304      	adds	r3, #4
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f001 ff68 	bl	8009508 <RCCEx_PLL2_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800763c:	e00e      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3324      	adds	r3, #36	; 0x24
 8007642:	2100      	movs	r1, #0
 8007644:	4618      	mov	r0, r3
 8007646:	f002 f811 	bl	800966c <RCCEx_PLL3_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800764e:	e005      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	75fb      	strb	r3, [r7, #23]
      break;
 8007654:	e002      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007656:	bf00      	nop
 8007658:	e000      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800765a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800765c:	7dfb      	ldrb	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007662:	4b55      	ldr	r3, [pc, #340]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007666:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766e:	4952      	ldr	r1, [pc, #328]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007670:	4313      	orrs	r3, r2
 8007672:	650b      	str	r3, [r1, #80]	; 0x50
 8007674:	e001      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007676:	7dfb      	ldrb	r3, [r7, #23]
 8007678:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007682:	2b00      	cmp	r3, #0
 8007684:	d049      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800768c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007690:	d030      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007692:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007696:	d82a      	bhi.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007698:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800769c:	d02c      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800769e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80076a2:	d824      	bhi.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80076a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076a8:	d018      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80076aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076ae:	d81e      	bhi.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80076b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80076b8:	d007      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80076ba:	e018      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076bc:	4b3e      	ldr	r3, [pc, #248]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a3d      	ldr	r2, [pc, #244]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076c8:	e017      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3304      	adds	r3, #4
 80076ce:	2100      	movs	r1, #0
 80076d0:	4618      	mov	r0, r3
 80076d2:	f001 ff19 	bl	8009508 <RCCEx_PLL2_Config>
 80076d6:	4603      	mov	r3, r0
 80076d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076da:	e00e      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3324      	adds	r3, #36	; 0x24
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 ffc2 	bl	800966c <RCCEx_PLL3_Config>
 80076e8:	4603      	mov	r3, r0
 80076ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076ec:	e005      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
      break;
 80076f2:	e002      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80076f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10a      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007700:	4b2d      	ldr	r3, [pc, #180]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800770e:	492a      	ldr	r1, [pc, #168]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007710:	4313      	orrs	r3, r2
 8007712:	658b      	str	r3, [r1, #88]	; 0x58
 8007714:	e001      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	7dfb      	ldrb	r3, [r7, #23]
 8007718:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007722:	2b00      	cmp	r3, #0
 8007724:	d04c      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800772c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007730:	d030      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007732:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007736:	d82a      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800773c:	d02c      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800773e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007742:	d824      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007748:	d018      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800774a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800774e:	d81e      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007758:	d007      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800775a:	e018      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800775c:	4b16      	ldr	r3, [pc, #88]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007768:	e017      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	3304      	adds	r3, #4
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f001 fec9 	bl	8009508 <RCCEx_PLL2_Config>
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800777a:	e00e      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3324      	adds	r3, #36	; 0x24
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f001 ff72 	bl	800966c <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800778c:	e005      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	75fb      	strb	r3, [r7, #23]
      break;
 8007792:	e002      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007794:	bf00      	nop
 8007796:	e000      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80077a0:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077ae:	4902      	ldr	r1, [pc, #8]	; (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	658b      	str	r3, [r1, #88]	; 0x58
 80077b4:	e004      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80077b6:	bf00      	nop
 80077b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077bc:	7dfb      	ldrb	r3, [r7, #23]
 80077be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d032      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077d0:	2b30      	cmp	r3, #48	; 0x30
 80077d2:	d01c      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80077d4:	2b30      	cmp	r3, #48	; 0x30
 80077d6:	d817      	bhi.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80077d8:	2b20      	cmp	r3, #32
 80077da:	d00c      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d813      	bhi.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d016      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80077e4:	2b10      	cmp	r3, #16
 80077e6:	d10f      	bne.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077e8:	4baf      	ldr	r3, [pc, #700]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	4aae      	ldr	r2, [pc, #696]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80077f4:	e00e      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	3304      	adds	r3, #4
 80077fa:	2102      	movs	r1, #2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fe83 	bl	8009508 <RCCEx_PLL2_Config>
 8007802:	4603      	mov	r3, r0
 8007804:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007806:	e005      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
      break;
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007814:	7dfb      	ldrb	r3, [r7, #23]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d109      	bne.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800781a:	4ba3      	ldr	r3, [pc, #652]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800781c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007826:	49a0      	ldr	r1, [pc, #640]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007828:	4313      	orrs	r3, r2
 800782a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800782c:	e001      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782e:	7dfb      	ldrb	r3, [r7, #23]
 8007830:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800783a:	2b00      	cmp	r3, #0
 800783c:	d047      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007842:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007846:	d030      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007848:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800784c:	d82a      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800784e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007852:	d02c      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007854:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007858:	d824      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800785a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800785e:	d018      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007864:	d81e      	bhi.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d003      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800786a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800786e:	d007      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007870:	e018      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007872:	4b8d      	ldr	r3, [pc, #564]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	4a8c      	ldr	r2, [pc, #560]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800787c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800787e:	e017      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3304      	adds	r3, #4
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f001 fe3e 	bl	8009508 <RCCEx_PLL2_Config>
 800788c:	4603      	mov	r3, r0
 800788e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007890:	e00e      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3324      	adds	r3, #36	; 0x24
 8007896:	2100      	movs	r1, #0
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fee7 	bl	800966c <RCCEx_PLL3_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80078a2:	e005      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	75fb      	strb	r3, [r7, #23]
      break;
 80078a8:	e002      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80078ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078b0:	7dfb      	ldrb	r3, [r7, #23]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078b6:	4b7c      	ldr	r3, [pc, #496]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c2:	4979      	ldr	r1, [pc, #484]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	650b      	str	r3, [r1, #80]	; 0x50
 80078c8:	e001      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ca:	7dfb      	ldrb	r3, [r7, #23]
 80078cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d049      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078e2:	d02e      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80078e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078e8:	d828      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078ee:	d02a      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80078f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078f4:	d822      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80078f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078fa:	d026      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80078fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007900:	d81c      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007906:	d010      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007908:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800790c:	d816      	bhi.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d01d      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007916:	d111      	bne.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	3304      	adds	r3, #4
 800791c:	2101      	movs	r1, #1
 800791e:	4618      	mov	r0, r3
 8007920:	f001 fdf2 	bl	8009508 <RCCEx_PLL2_Config>
 8007924:	4603      	mov	r3, r0
 8007926:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007928:	e012      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3324      	adds	r3, #36	; 0x24
 800792e:	2101      	movs	r1, #1
 8007930:	4618      	mov	r0, r3
 8007932:	f001 fe9b 	bl	800966c <RCCEx_PLL3_Config>
 8007936:	4603      	mov	r3, r0
 8007938:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800793a:	e009      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	75fb      	strb	r3, [r7, #23]
      break;
 8007940:	e006      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007942:	bf00      	nop
 8007944:	e004      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007946:	bf00      	nop
 8007948:	e002      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800794a:	bf00      	nop
 800794c:	e000      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800794e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007956:	4b54      	ldr	r3, [pc, #336]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800795a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007962:	4951      	ldr	r1, [pc, #324]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007964:	4313      	orrs	r3, r2
 8007966:	650b      	str	r3, [r1, #80]	; 0x50
 8007968:	e001      	b.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d04b      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007984:	d02e      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007986:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800798a:	d828      	bhi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d02a      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007996:	d822      	bhi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007998:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800799c:	d026      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800799e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80079a2:	d81c      	bhi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80079a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a8:	d010      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80079aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079ae:	d816      	bhi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01d      	beq.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80079b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079b8:	d111      	bne.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3304      	adds	r3, #4
 80079be:	2101      	movs	r1, #1
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 fda1 	bl	8009508 <RCCEx_PLL2_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079ca:	e012      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3324      	adds	r3, #36	; 0x24
 80079d0:	2101      	movs	r1, #1
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fe4a 	bl	800966c <RCCEx_PLL3_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079dc:	e009      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	75fb      	strb	r3, [r7, #23]
      break;
 80079e2:	e006      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079e4:	bf00      	nop
 80079e6:	e004      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079e8:	bf00      	nop
 80079ea:	e002      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079ec:	bf00      	nop
 80079ee:	e000      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80079f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079f8:	4b2b      	ldr	r3, [pc, #172]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80079fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a06:	4928      	ldr	r1, [pc, #160]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	658b      	str	r3, [r1, #88]	; 0x58
 8007a0c:	e001      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
 8007a10:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d02f      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a26:	d00e      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a2c:	d814      	bhi.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d015      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a36:	d10f      	bne.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a38:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a1a      	ldr	r2, [pc, #104]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a44:	e00c      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	2101      	movs	r1, #1
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 fd5b 	bl	8009508 <RCCEx_PLL2_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a56:	e003      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a5c:	e000      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d109      	bne.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a72:	490d      	ldr	r1, [pc, #52]	; (8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	650b      	str	r3, [r1, #80]	; 0x50
 8007a78:	e001      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d033      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d81c      	bhi.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007ad3 	.word	0x08007ad3
 8007a9c:	08007aad 	.word	0x08007aad
 8007aa0:	08007abb 	.word	0x08007abb
 8007aa4:	08007ad3 	.word	0x08007ad3
 8007aa8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aac:	4bb8      	ldr	r3, [pc, #736]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	4ab7      	ldr	r2, [pc, #732]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ab8:	e00c      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	2102      	movs	r1, #2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f001 fd21 	bl	8009508 <RCCEx_PLL2_Config>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007aca:	e003      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	75fb      	strb	r3, [r7, #23]
      break;
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d109      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ada:	4bad      	ldr	r3, [pc, #692]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	f023 0203 	bic.w	r2, r3, #3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ae6:	49aa      	ldr	r1, [pc, #680]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007aec:	e001      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 8086 	beq.w	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b00:	4ba4      	ldr	r3, [pc, #656]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4aa3      	ldr	r2, [pc, #652]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b0c:	f7fa fc40 	bl	8002390 <HAL_GetTick>
 8007b10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b12:	e009      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b14:	f7fa fc3c 	bl	8002390 <HAL_GetTick>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b64      	cmp	r3, #100	; 0x64
 8007b20:	d902      	bls.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007b22:	2303      	movs	r3, #3
 8007b24:	75fb      	strb	r3, [r7, #23]
        break;
 8007b26:	e005      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b28:	4b9a      	ldr	r3, [pc, #616]	; (8007d94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0ef      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d166      	bne.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b3a:	4b95      	ldr	r3, [pc, #596]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b44:	4053      	eors	r3, r2
 8007b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d013      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b4e:	4b90      	ldr	r3, [pc, #576]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b58:	4b8d      	ldr	r3, [pc, #564]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5c:	4a8c      	ldr	r2, [pc, #560]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b64:	4b8a      	ldr	r3, [pc, #552]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b68:	4a89      	ldr	r2, [pc, #548]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b70:	4a87      	ldr	r2, [pc, #540]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b80:	d115      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b82:	f7fa fc05 	bl	8002390 <HAL_GetTick>
 8007b86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b88:	e00b      	b.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b8a:	f7fa fc01 	bl	8002390 <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d902      	bls.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	75fb      	strb	r3, [r7, #23]
            break;
 8007ba0:	e005      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ba2:	4b7b      	ldr	r3, [pc, #492]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0ed      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d126      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bc2:	d10d      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007bc4:	4b72      	ldr	r3, [pc, #456]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bd2:	0919      	lsrs	r1, r3, #4
 8007bd4:	4b70      	ldr	r3, [pc, #448]	; (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007bd6:	400b      	ands	r3, r1
 8007bd8:	496d      	ldr	r1, [pc, #436]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	610b      	str	r3, [r1, #16]
 8007bde:	e005      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007be0:	4b6b      	ldr	r3, [pc, #428]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	4a6a      	ldr	r2, [pc, #424]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007be6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bea:	6113      	str	r3, [r2, #16]
 8007bec:	4b68      	ldr	r3, [pc, #416]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bfa:	4965      	ldr	r1, [pc, #404]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	670b      	str	r3, [r1, #112]	; 0x70
 8007c00:	e004      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	75bb      	strb	r3, [r7, #22]
 8007c06:	e001      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d07e      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c1c:	2b28      	cmp	r3, #40	; 0x28
 8007c1e:	d867      	bhi.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007c20:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007cf7 	.word	0x08007cf7
 8007c2c:	08007cf1 	.word	0x08007cf1
 8007c30:	08007cf1 	.word	0x08007cf1
 8007c34:	08007cf1 	.word	0x08007cf1
 8007c38:	08007cf1 	.word	0x08007cf1
 8007c3c:	08007cf1 	.word	0x08007cf1
 8007c40:	08007cf1 	.word	0x08007cf1
 8007c44:	08007cf1 	.word	0x08007cf1
 8007c48:	08007ccd 	.word	0x08007ccd
 8007c4c:	08007cf1 	.word	0x08007cf1
 8007c50:	08007cf1 	.word	0x08007cf1
 8007c54:	08007cf1 	.word	0x08007cf1
 8007c58:	08007cf1 	.word	0x08007cf1
 8007c5c:	08007cf1 	.word	0x08007cf1
 8007c60:	08007cf1 	.word	0x08007cf1
 8007c64:	08007cf1 	.word	0x08007cf1
 8007c68:	08007cdf 	.word	0x08007cdf
 8007c6c:	08007cf1 	.word	0x08007cf1
 8007c70:	08007cf1 	.word	0x08007cf1
 8007c74:	08007cf1 	.word	0x08007cf1
 8007c78:	08007cf1 	.word	0x08007cf1
 8007c7c:	08007cf1 	.word	0x08007cf1
 8007c80:	08007cf1 	.word	0x08007cf1
 8007c84:	08007cf1 	.word	0x08007cf1
 8007c88:	08007cf7 	.word	0x08007cf7
 8007c8c:	08007cf1 	.word	0x08007cf1
 8007c90:	08007cf1 	.word	0x08007cf1
 8007c94:	08007cf1 	.word	0x08007cf1
 8007c98:	08007cf1 	.word	0x08007cf1
 8007c9c:	08007cf1 	.word	0x08007cf1
 8007ca0:	08007cf1 	.word	0x08007cf1
 8007ca4:	08007cf1 	.word	0x08007cf1
 8007ca8:	08007cf7 	.word	0x08007cf7
 8007cac:	08007cf1 	.word	0x08007cf1
 8007cb0:	08007cf1 	.word	0x08007cf1
 8007cb4:	08007cf1 	.word	0x08007cf1
 8007cb8:	08007cf1 	.word	0x08007cf1
 8007cbc:	08007cf1 	.word	0x08007cf1
 8007cc0:	08007cf1 	.word	0x08007cf1
 8007cc4:	08007cf1 	.word	0x08007cf1
 8007cc8:	08007cf7 	.word	0x08007cf7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3304      	adds	r3, #4
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f001 fc18 	bl	8009508 <RCCEx_PLL2_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cdc:	e00c      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3324      	adds	r3, #36	; 0x24
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 fcc1 	bl	800966c <RCCEx_PLL3_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cee:	e003      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007cf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d109      	bne.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cfe:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d0a:	4921      	ldr	r1, [pc, #132]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	654b      	str	r3, [r1, #84]	; 0x54
 8007d10:	e001      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d03e      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d820      	bhi.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007d2a:	a201      	add	r2, pc, #4	; (adr r2, 8007d30 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d73 	.word	0x08007d73
 8007d34:	08007d49 	.word	0x08007d49
 8007d38:	08007d5b 	.word	0x08007d5b
 8007d3c:	08007d73 	.word	0x08007d73
 8007d40:	08007d73 	.word	0x08007d73
 8007d44:	08007d73 	.word	0x08007d73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3304      	adds	r3, #4
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 fbda 	bl	8009508 <RCCEx_PLL2_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d58:	e00c      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3324      	adds	r3, #36	; 0x24
 8007d5e:	2101      	movs	r1, #1
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 fc83 	bl	800966c <RCCEx_PLL3_Config>
 8007d66:	4603      	mov	r3, r0
 8007d68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d6a:	e003      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d70:	e000      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007d72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d110      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d7a:	4b05      	ldr	r3, [pc, #20]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d7e:	f023 0207 	bic.w	r2, r3, #7
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d86:	4902      	ldr	r1, [pc, #8]	; (8007d90 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d8c:	e008      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007d8e:	bf00      	nop
 8007d90:	58024400 	.word	0x58024400
 8007d94:	58024800 	.word	0x58024800
 8007d98:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d039      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d820      	bhi.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007dff 	.word	0x08007dff
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007de7 	.word	0x08007de7
 8007dc8:	08007dff 	.word	0x08007dff
 8007dcc:	08007dff 	.word	0x08007dff
 8007dd0:	08007dff 	.word	0x08007dff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	2101      	movs	r1, #1
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f001 fb94 	bl	8009508 <RCCEx_PLL2_Config>
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007de4:	e00c      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	3324      	adds	r3, #36	; 0x24
 8007dea:	2101      	movs	r1, #1
 8007dec:	4618      	mov	r0, r3
 8007dee:	f001 fc3d 	bl	800966c <RCCEx_PLL3_Config>
 8007df2:	4603      	mov	r3, r0
 8007df4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007df6:	e003      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007dfc:	e000      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10a      	bne.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e06:	4bb7      	ldr	r3, [pc, #732]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e0a:	f023 0207 	bic.w	r2, r3, #7
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e14:	49b3      	ldr	r1, [pc, #716]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	658b      	str	r3, [r1, #88]	; 0x58
 8007e1a:	e001      	b.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
 8007e1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d04b      	beq.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e36:	d02e      	beq.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e3c:	d828      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e42:	d02a      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e48:	d822      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e4e:	d026      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007e50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e54:	d81c      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e5a:	d010      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e60:	d816      	bhi.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01d      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e6a:	d111      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	2100      	movs	r1, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f001 fb48 	bl	8009508 <RCCEx_PLL2_Config>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e7c:	e012      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3324      	adds	r3, #36	; 0x24
 8007e82:	2102      	movs	r1, #2
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fbf1 	bl	800966c <RCCEx_PLL3_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e8e:	e009      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	75fb      	strb	r3, [r7, #23]
      break;
 8007e94:	e006      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e96:	bf00      	nop
 8007e98:	e004      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e9a:	bf00      	nop
 8007e9c:	e002      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007e9e:	bf00      	nop
 8007ea0:	e000      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ea4:	7dfb      	ldrb	r3, [r7, #23]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007eaa:	4b8e      	ldr	r3, [pc, #568]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007eb8:	498a      	ldr	r1, [pc, #552]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	654b      	str	r3, [r1, #84]	; 0x54
 8007ebe:	e001      	b.n	8007ec4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d04b      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ed6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007eda:	d02e      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007edc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ee0:	d828      	bhi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ee6:	d02a      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eec:	d822      	bhi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007eee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef2:	d026      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007ef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ef8:	d81c      	bhi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007efe:	d010      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f04:	d816      	bhi.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01d      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f0e:	d111      	bne.n	8007f34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	3304      	adds	r3, #4
 8007f14:	2100      	movs	r1, #0
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 faf6 	bl	8009508 <RCCEx_PLL2_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f20:	e012      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3324      	adds	r3, #36	; 0x24
 8007f26:	2102      	movs	r1, #2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 fb9f 	bl	800966c <RCCEx_PLL3_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f32:	e009      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	75fb      	strb	r3, [r7, #23]
      break;
 8007f38:	e006      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f3a:	bf00      	nop
 8007f3c:	e004      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f3e:	bf00      	nop
 8007f40:	e002      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f42:	bf00      	nop
 8007f44:	e000      	b.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007f46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10a      	bne.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f4e:	4b65      	ldr	r3, [pc, #404]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f5c:	4961      	ldr	r1, [pc, #388]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	658b      	str	r3, [r1, #88]	; 0x58
 8007f62:	e001      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f64:	7dfb      	ldrb	r3, [r7, #23]
 8007f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d04b      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f7e:	d02e      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007f80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f84:	d828      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f8a:	d02a      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f90:	d822      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f96:	d026      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007f98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f9c:	d81c      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007f9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fa2:	d010      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fa8:	d816      	bhi.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01d      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fb2:	d111      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	2100      	movs	r1, #0
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f001 faa4 	bl	8009508 <RCCEx_PLL2_Config>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fc4:	e012      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3324      	adds	r3, #36	; 0x24
 8007fca:	2102      	movs	r1, #2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fb4d 	bl	800966c <RCCEx_PLL3_Config>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fd6:	e009      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	75fb      	strb	r3, [r7, #23]
      break;
 8007fdc:	e006      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fde:	bf00      	nop
 8007fe0:	e004      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fe2:	bf00      	nop
 8007fe4:	e002      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fe6:	bf00      	nop
 8007fe8:	e000      	b.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ff2:	4b3c      	ldr	r3, [pc, #240]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008000:	4938      	ldr	r1, [pc, #224]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008002:	4313      	orrs	r3, r2
 8008004:	658b      	str	r3, [r1, #88]	; 0x58
 8008006:	e001      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008008:	7dfb      	ldrb	r3, [r7, #23]
 800800a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0308 	and.w	r3, r3, #8
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01a      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800801e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008022:	d10a      	bne.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	2102      	movs	r1, #2
 800802a:	4618      	mov	r0, r3
 800802c:	f001 fb1e 	bl	800966c <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800803a:	4b2a      	ldr	r3, [pc, #168]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800803c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008048:	4926      	ldr	r1, [pc, #152]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800804a:	4313      	orrs	r3, r2
 800804c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0310 	and.w	r3, r3, #16
 8008056:	2b00      	cmp	r3, #0
 8008058:	d01a      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008064:	d10a      	bne.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3324      	adds	r3, #36	; 0x24
 800806a:	2102      	movs	r1, #2
 800806c:	4618      	mov	r0, r3
 800806e:	f001 fafd 	bl	800966c <RCCEx_PLL3_Config>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d001      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800807c:	4b19      	ldr	r3, [pc, #100]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800807e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800808a:	4916      	ldr	r1, [pc, #88]	; (80080e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800808c:	4313      	orrs	r3, r2
 800808e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d036      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080a6:	d01f      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80080a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080ac:	d817      	bhi.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80080b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080b6:	d009      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80080b8:	e011      	b.n	80080de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3304      	adds	r3, #4
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 fa21 	bl	8009508 <RCCEx_PLL2_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080ca:	e00e      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3324      	adds	r3, #36	; 0x24
 80080d0:	2102      	movs	r1, #2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 faca 	bl	800966c <RCCEx_PLL3_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080dc:	e005      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	75fb      	strb	r3, [r7, #23]
      break;
 80080e2:	e002      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80080e4:	58024400 	.word	0x58024400
      break;
 80080e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080f0:	4b93      	ldr	r3, [pc, #588]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080fe:	4990      	ldr	r1, [pc, #576]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008100:	4313      	orrs	r3, r2
 8008102:	658b      	str	r3, [r1, #88]	; 0x58
 8008104:	e001      	b.n	800810a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d033      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800811c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008120:	d01c      	beq.n	800815c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008122:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008126:	d816      	bhi.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812c:	d003      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800812e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008132:	d007      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008134:	e00f      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008136:	4b82      	ldr	r3, [pc, #520]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	4a81      	ldr	r2, [pc, #516]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800813c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008140:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008142:	e00c      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3324      	adds	r3, #36	; 0x24
 8008148:	2101      	movs	r1, #1
 800814a:	4618      	mov	r0, r3
 800814c:	f001 fa8e 	bl	800966c <RCCEx_PLL3_Config>
 8008150:	4603      	mov	r3, r0
 8008152:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008154:	e003      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008156:	2301      	movs	r3, #1
 8008158:	75fb      	strb	r3, [r7, #23]
      break;
 800815a:	e000      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800815c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10a      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008164:	4b76      	ldr	r3, [pc, #472]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008168:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008172:	4973      	ldr	r1, [pc, #460]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	654b      	str	r3, [r1, #84]	; 0x54
 8008178:	e001      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
 800817c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008186:	2b00      	cmp	r3, #0
 8008188:	d029      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008196:	d007      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008198:	e00f      	b.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800819a:	4b69      	ldr	r3, [pc, #420]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	4a68      	ldr	r2, [pc, #416]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80081a6:	e00b      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	2102      	movs	r1, #2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 f9aa 	bl	8009508 <RCCEx_PLL2_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80081b8:	e002      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	75fb      	strb	r3, [r7, #23]
      break;
 80081be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081c0:	7dfb      	ldrb	r3, [r7, #23]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d109      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081c6:	4b5e      	ldr	r3, [pc, #376]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d2:	495b      	ldr	r1, [pc, #364]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081d8:	e001      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d00a      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3324      	adds	r3, #36	; 0x24
 80081ee:	2102      	movs	r1, #2
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 fa3b 	bl	800966c <RCCEx_PLL3_Config>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d030      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008214:	d017      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800821a:	d811      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800821c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008220:	d013      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008226:	d80b      	bhi.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d010      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800822c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008230:	d106      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008232:	4b43      	ldr	r3, [pc, #268]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	4a42      	ldr	r2, [pc, #264]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800823e:	e007      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	75fb      	strb	r3, [r7, #23]
      break;
 8008244:	e004      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008246:	bf00      	nop
 8008248:	e002      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800824e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008250:	7dfb      	ldrb	r3, [r7, #23]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d109      	bne.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008256:	4b3a      	ldr	r3, [pc, #232]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008262:	4937      	ldr	r1, [pc, #220]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008264:	4313      	orrs	r3, r2
 8008266:	654b      	str	r3, [r1, #84]	; 0x54
 8008268:	e001      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826a:	7dfb      	ldrb	r3, [r7, #23]
 800826c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008276:	2b00      	cmp	r3, #0
 8008278:	d008      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800827a:	4b31      	ldr	r3, [pc, #196]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800827c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008286:	492e      	ldr	r1, [pc, #184]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008288:	4313      	orrs	r3, r2
 800828a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d009      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008298:	4b29      	ldr	r3, [pc, #164]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80082a6:	4926      	ldr	r1, [pc, #152]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082a8:	4313      	orrs	r3, r2
 80082aa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80082b8:	4b21      	ldr	r3, [pc, #132]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c4:	491e      	ldr	r1, [pc, #120]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00d      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082d6:	4b1a      	ldr	r3, [pc, #104]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	4a19      	ldr	r2, [pc, #100]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082e0:	6113      	str	r3, [r2, #16]
 80082e2:	4b17      	ldr	r3, [pc, #92]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082e4:	691a      	ldr	r2, [r3, #16]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80082ec:	4914      	ldr	r1, [pc, #80]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082ee:	4313      	orrs	r3, r2
 80082f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da08      	bge.n	800830c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082fa:	4b11      	ldr	r3, [pc, #68]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80082fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008306:	490e      	ldr	r1, [pc, #56]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008308:	4313      	orrs	r3, r2
 800830a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d009      	beq.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008318:	4b09      	ldr	r3, [pc, #36]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008326:	4906      	ldr	r1, [pc, #24]	; (8008340 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008328:	4313      	orrs	r3, r2
 800832a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800832c:	7dbb      	ldrb	r3, [r7, #22]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	e000      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
}
 8008338:	4618      	mov	r0, r3
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	58024400 	.word	0x58024400

08008344 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b090      	sub	sp, #64	; 0x40
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008352:	f040 8095 	bne.w	8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008356:	4bae      	ldr	r3, [pc, #696]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	633b      	str	r3, [r7, #48]	; 0x30
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	2b04      	cmp	r3, #4
 8008364:	f200 8088 	bhi.w	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008385 	.word	0x08008385
 8008374:	080083ad 	.word	0x080083ad
 8008378:	080083d5 	.word	0x080083d5
 800837c:	08008471 	.word	0x08008471
 8008380:	080083fd 	.word	0x080083fd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008384:	4ba2      	ldr	r3, [pc, #648]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008390:	d108      	bne.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008396:	4618      	mov	r0, r3
 8008398:	f000 ff64 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800839c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083a0:	f000 bc95 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083a8:	f000 bc91 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083ac:	4b98      	ldr	r3, [pc, #608]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083b8:	d108      	bne.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083ba:	f107 0318 	add.w	r3, r7, #24
 80083be:	4618      	mov	r0, r3
 80083c0:	f000 fca8 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083c8:	f000 bc81 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083d0:	f000 bc7d 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083d4:	4b8e      	ldr	r3, [pc, #568]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083e0:	d108      	bne.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083e2:	f107 030c 	add.w	r3, r7, #12
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 fde8 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80083f0:	f000 bc6d 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80083f8:	f000 bc69 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80083fc:	4b84      	ldr	r3, [pc, #528]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008400:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008404:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008406:	4b82      	ldr	r3, [pc, #520]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0304 	and.w	r3, r3, #4
 800840e:	2b04      	cmp	r3, #4
 8008410:	d10c      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	2b00      	cmp	r3, #0
 8008416:	d109      	bne.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008418:	4b7d      	ldr	r3, [pc, #500]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	08db      	lsrs	r3, r3, #3
 800841e:	f003 0303 	and.w	r3, r3, #3
 8008422:	4a7c      	ldr	r2, [pc, #496]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008424:	fa22 f303 	lsr.w	r3, r2, r3
 8008428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800842a:	e01f      	b.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800842c:	4b78      	ldr	r3, [pc, #480]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008438:	d106      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800843a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008440:	d102      	bne.n	8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008442:	4b75      	ldr	r3, [pc, #468]	; (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008446:	e011      	b.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008448:	4b71      	ldr	r3, [pc, #452]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008454:	d106      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8008456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800845c:	d102      	bne.n	8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800845e:	4b6f      	ldr	r3, [pc, #444]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008462:	e003      	b.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008468:	f000 bc31 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800846c:	f000 bc2f 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008470:	4b6b      	ldr	r3, [pc, #428]	; (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008474:	f000 bc2b 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008478:	2300      	movs	r3, #0
 800847a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800847c:	f000 bc27 	b.w	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008486:	f040 8095 	bne.w	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800848a:	4b61      	ldr	r3, [pc, #388]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800848c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008492:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849a:	d04d      	beq.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a2:	f200 8084 	bhi.w	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	2bc0      	cmp	r3, #192	; 0xc0
 80084aa:	d07d      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80084ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ae:	2bc0      	cmp	r3, #192	; 0xc0
 80084b0:	d87d      	bhi.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80084b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b4:	2b80      	cmp	r3, #128	; 0x80
 80084b6:	d02d      	beq.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	2b80      	cmp	r3, #128	; 0x80
 80084bc:	d877      	bhi.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d003      	beq.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	d012      	beq.n	80084f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80084ca:	e070      	b.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084cc:	4b50      	ldr	r3, [pc, #320]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084d8:	d107      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fec0 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80084e8:	e3f1      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80084ee:	e3ee      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084f0:	4b47      	ldr	r3, [pc, #284]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084fc:	d107      	bne.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084fe:	f107 0318 	add.w	r3, r7, #24
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fc06 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800850c:	e3df      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008512:	e3dc      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008514:	4b3e      	ldr	r3, [pc, #248]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800851c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008520:	d107      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008522:	f107 030c 	add.w	r3, r7, #12
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fd48 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008530:	e3cd      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008536:	e3ca      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008538:	4b35      	ldr	r3, [pc, #212]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800853a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800853c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008540:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008542:	4b33      	ldr	r3, [pc, #204]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0304 	and.w	r3, r3, #4
 800854a:	2b04      	cmp	r3, #4
 800854c:	d10c      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800854e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008550:	2b00      	cmp	r3, #0
 8008552:	d109      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008554:	4b2e      	ldr	r3, [pc, #184]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	08db      	lsrs	r3, r3, #3
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	4a2d      	ldr	r2, [pc, #180]	; (8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008560:	fa22 f303 	lsr.w	r3, r2, r3
 8008564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008566:	e01e      	b.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008568:	4b29      	ldr	r3, [pc, #164]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008574:	d106      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800857c:	d102      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800857e:	4b26      	ldr	r3, [pc, #152]	; (8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008582:	e010      	b.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008584:	4b22      	ldr	r3, [pc, #136]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008590:	d106      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8008592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008598:	d102      	bne.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800859a:	4b20      	ldr	r3, [pc, #128]	; (800861c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800859c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800859e:	e002      	b.n	80085a6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80085a0:	2300      	movs	r3, #0
 80085a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80085a4:	e393      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80085a6:	e392      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80085a8:	4b1d      	ldr	r3, [pc, #116]	; (8008620 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80085aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085ac:	e38f      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80085b2:	e38c      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ba:	f040 80a7 	bne.w	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80085be:	4b14      	ldr	r3, [pc, #80]	; (8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80085c6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80085c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085ce:	d05f      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085d6:	f200 8096 	bhi.w	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085e0:	f000 808e 	beq.w	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 80085e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80085ea:	f200 808c 	bhi.w	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085f4:	d03a      	beq.n	800866c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085fc:	f200 8083 	bhi.w	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00e      	beq.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800860c:	d01c      	beq.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800860e:	e07a      	b.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008610:	58024400 	.word	0x58024400
 8008614:	03d09000 	.word	0x03d09000
 8008618:	003d0900 	.word	0x003d0900
 800861c:	007a1200 	.word	0x007a1200
 8008620:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008624:	4baa      	ldr	r3, [pc, #680]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008630:	d107      	bne.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fe14 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008640:	e345      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008646:	e342      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008648:	4ba1      	ldr	r3, [pc, #644]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008654:	d107      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008656:	f107 0318 	add.w	r3, r7, #24
 800865a:	4618      	mov	r0, r3
 800865c:	f000 fb5a 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008664:	e333      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800866a:	e330      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800866c:	4b98      	ldr	r3, [pc, #608]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008678:	d107      	bne.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867a:	f107 030c 	add.w	r3, r7, #12
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fc9c 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008688:	e321      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800868e:	e31e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008690:	4b8f      	ldr	r3, [pc, #572]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008698:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800869a:	4b8d      	ldr	r3, [pc, #564]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d10c      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d109      	bne.n	80086c0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80086ac:	4b88      	ldr	r3, [pc, #544]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	08db      	lsrs	r3, r3, #3
 80086b2:	f003 0303 	and.w	r3, r3, #3
 80086b6:	4a87      	ldr	r2, [pc, #540]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80086b8:	fa22 f303 	lsr.w	r3, r2, r3
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086be:	e01e      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086c0:	4b83      	ldr	r3, [pc, #524]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086cc:	d106      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086d4:	d102      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80086d6:	4b80      	ldr	r3, [pc, #512]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80086d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086da:	e010      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086dc:	4b7c      	ldr	r3, [pc, #496]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086e8:	d106      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80086ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f0:	d102      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80086f2:	4b7a      	ldr	r3, [pc, #488]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086f6:	e002      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80086fc:	e2e7      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80086fe:	e2e6      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008700:	4b77      	ldr	r3, [pc, #476]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008704:	e2e3      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800870a:	e2e0      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008712:	f040 809c 	bne.w	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8008716:	4b6e      	ldr	r3, [pc, #440]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800871e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008726:	d054      	beq.n	80087d2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800872e:	f200 808b 	bhi.w	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008738:	f000 8083 	beq.w	8008842 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008742:	f200 8081 	bhi.w	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008748:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800874c:	d02f      	beq.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008754:	d878      	bhi.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	2b00      	cmp	r3, #0
 800875a:	d004      	beq.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008762:	d012      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8008764:	e070      	b.n	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008766:	4b5a      	ldr	r3, [pc, #360]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008772:	d107      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fd73 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008782:	e2a4      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008788:	e2a1      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800878a:	4b51      	ldr	r3, [pc, #324]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008796:	d107      	bne.n	80087a8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008798:	f107 0318 	add.w	r3, r7, #24
 800879c:	4618      	mov	r0, r3
 800879e:	f000 fab9 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80087a6:	e292      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087ac:	e28f      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ae:	4b48      	ldr	r3, [pc, #288]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ba:	d107      	bne.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 fbfb 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80087ca:	e280      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80087cc:	2300      	movs	r3, #0
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087d0:	e27d      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087d2:	4b3f      	ldr	r3, [pc, #252]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087da:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087dc:	4b3c      	ldr	r3, [pc, #240]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b04      	cmp	r3, #4
 80087e6:	d10c      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d109      	bne.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087ee:	4b38      	ldr	r3, [pc, #224]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	08db      	lsrs	r3, r3, #3
 80087f4:	f003 0303 	and.w	r3, r3, #3
 80087f8:	4a36      	ldr	r2, [pc, #216]	; (80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80087fa:	fa22 f303 	lsr.w	r3, r2, r3
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008800:	e01e      	b.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008802:	4b33      	ldr	r3, [pc, #204]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800880e:	d106      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8008810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008816:	d102      	bne.n	800881e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008818:	4b2f      	ldr	r3, [pc, #188]	; (80088d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800881a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800881c:	e010      	b.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800881e:	4b2c      	ldr	r3, [pc, #176]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800882a:	d106      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008832:	d102      	bne.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008834:	4b29      	ldr	r3, [pc, #164]	; (80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008838:	e002      	b.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800883a:	2300      	movs	r3, #0
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800883e:	e246      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008840:	e245      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008842:	4b27      	ldr	r3, [pc, #156]	; (80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008844:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008846:	e242      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800884c:	e23f      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008854:	f040 80a8 	bne.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8008858:	4b1d      	ldr	r3, [pc, #116]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800885a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008860:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008864:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008868:	d060      	beq.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 800886a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008870:	f200 8097 	bhi.w	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800887a:	f000 808f 	beq.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008884:	f200 808d 	bhi.w	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800888e:	d03b      	beq.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008896:	f200 8084 	bhi.w	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	2b00      	cmp	r3, #0
 800889e:	d004      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a6:	d01d      	beq.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80088a8:	e07b      	b.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088aa:	4b09      	ldr	r3, [pc, #36]	; (80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b6:	d107      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fcd1 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80088c6:	e202      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088cc:	e1ff      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80088ce:	bf00      	nop
 80088d0:	58024400 	.word	0x58024400
 80088d4:	03d09000 	.word	0x03d09000
 80088d8:	003d0900 	.word	0x003d0900
 80088dc:	007a1200 	.word	0x007a1200
 80088e0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e4:	4ba3      	ldr	r3, [pc, #652]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088f0:	d107      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f2:	f107 0318 	add.w	r3, r7, #24
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 fa0c 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008900:	e1e5      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008906:	e1e2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008908:	4b9a      	ldr	r3, [pc, #616]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008914:	d107      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008916:	f107 030c 	add.w	r3, r7, #12
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fb4e 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008924:	e1d3      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800892a:	e1d0      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800892c:	4b91      	ldr	r3, [pc, #580]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800892e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008934:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008936:	4b8f      	ldr	r3, [pc, #572]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	2b04      	cmp	r3, #4
 8008940:	d10c      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	2b00      	cmp	r3, #0
 8008946:	d109      	bne.n	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008948:	4b8a      	ldr	r3, [pc, #552]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	08db      	lsrs	r3, r3, #3
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	4a89      	ldr	r2, [pc, #548]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800895a:	e01e      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800895c:	4b85      	ldr	r3, [pc, #532]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008968:	d106      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008970:	d102      	bne.n	8008978 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008972:	4b82      	ldr	r3, [pc, #520]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008976:	e010      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008978:	4b7e      	ldr	r3, [pc, #504]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008984:	d106      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8008986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008988:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800898c:	d102      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800898e:	4b7c      	ldr	r3, [pc, #496]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008992:	e002      	b.n	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008998:	e199      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800899a:	e198      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800899c:	4b79      	ldr	r3, [pc, #484]	; (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089a0:	e195      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089a6:	e192      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80089ae:	d173      	bne.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80089b0:	4b70      	ldr	r3, [pc, #448]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80089b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c0:	d02f      	beq.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089c8:	d863      	bhi.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d004      	beq.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d6:	d012      	beq.n	80089fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 80089d8:	e05b      	b.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089da:	4b66      	ldr	r3, [pc, #408]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e6:	d107      	bne.n	80089f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e8:	f107 0318 	add.w	r3, r7, #24
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 f991 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80089f6:	e16a      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089fc:	e167      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80089fe:	4b5d      	ldr	r3, [pc, #372]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0c:	f107 030c 	add.w	r3, r7, #12
 8008a10:	4618      	mov	r0, r3
 8008a12:	f000 fad3 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008a1a:	e158      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a20:	e155      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008a22:	4b54      	ldr	r3, [pc, #336]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008a2a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a2c:	4b51      	ldr	r3, [pc, #324]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d10c      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d109      	bne.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a3e:	4b4d      	ldr	r3, [pc, #308]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	08db      	lsrs	r3, r3, #3
 8008a44:	f003 0303 	and.w	r3, r3, #3
 8008a48:	4a4b      	ldr	r2, [pc, #300]	; (8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a50:	e01e      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a52:	4b48      	ldr	r3, [pc, #288]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a5e:	d106      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a66:	d102      	bne.n	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008a68:	4b44      	ldr	r3, [pc, #272]	; (8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a6c:	e010      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a6e:	4b41      	ldr	r3, [pc, #260]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a7a:	d106      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a82:	d102      	bne.n	8008a8a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008a84:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008a8e:	e11e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008a90:	e11d      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a96:	e11a      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a9e:	d133      	bne.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8008aa0:	4b34      	ldr	r3, [pc, #208]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008aa8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8008ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ab6:	d012      	beq.n	8008ade <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008ab8:	e023      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ac6:	d107      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008acc:	4618      	mov	r0, r3
 8008ace:	f000 fbc9 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ad6:	e0fa      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008adc:	e0f7      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ade:	4b25      	ldr	r3, [pc, #148]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aea:	d107      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008aec:	f107 0318 	add.w	r3, r7, #24
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f90f 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008afa:	e0e8      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b00:	e0e5      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008b06:	e0e2      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b0e:	f040 808f 	bne.w	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008b12:	4b18      	ldr	r3, [pc, #96]	; (8008b74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8008b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008b1a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b22:	d075      	beq.n	8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b2a:	d87e      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b32:	d060      	beq.n	8008bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3a:	d876      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b42:	d045      	beq.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8008b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b4a:	d86e      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b52:	d02b      	beq.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8008b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b5a:	d866      	bhi.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d004      	beq.n	8008b6c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b68:	d00e      	beq.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8008b6a:	e05e      	b.n	8008c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008b6c:	f000 f8bc 	bl	8008ce8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008b70:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008b72:	e0ac      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8008b74:	58024400 	.word	0x58024400
 8008b78:	03d09000 	.word	0x03d09000
 8008b7c:	003d0900 	.word	0x003d0900
 8008b80:	007a1200 	.word	0x007a1200
 8008b84:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b88:	4b53      	ldr	r3, [pc, #332]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b94:	d107      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b96:	f107 0318 	add.w	r3, r7, #24
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f8ba 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008ba4:	e093      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008baa:	e090      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bac:	4b4a      	ldr	r3, [pc, #296]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb8:	d107      	bne.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bba:	f107 030c 	add.w	r3, r7, #12
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 f9fc 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bc8:	e081      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bce:	e07e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008bd0:	4b41      	ldr	r3, [pc, #260]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b04      	cmp	r3, #4
 8008bda:	d109      	bne.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	08db      	lsrs	r3, r3, #3
 8008be2:	f003 0303 	and.w	r3, r3, #3
 8008be6:	4a3d      	ldr	r2, [pc, #244]	; (8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008be8:	fa22 f303 	lsr.w	r3, r2, r3
 8008bec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008bee:	e06e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008bf4:	e06b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008bf6:	4b38      	ldr	r3, [pc, #224]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c02:	d102      	bne.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8008c04:	4b36      	ldr	r3, [pc, #216]	; (8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008c08:	e061      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c0e:	e05e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c10:	4b31      	ldr	r3, [pc, #196]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c1c:	d102      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8008c1e:	4b31      	ldr	r3, [pc, #196]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c22:	e054      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c24:	2300      	movs	r3, #0
 8008c26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c28:	e051      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c2e:	e04e      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c36:	d148      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8008c38:	4b27      	ldr	r3, [pc, #156]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c40:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c48:	d02a      	beq.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c50:	d838      	bhi.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d004      	beq.n	8008c62 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c5e:	d00d      	beq.n	8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8008c60:	e030      	b.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c62:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c6e:	d102      	bne.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8008c70:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c74:	e02b      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c76:	2300      	movs	r3, #0
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c7a:	e028      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c7c:	4b16      	ldr	r3, [pc, #88]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c88:	d107      	bne.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fae8 	bl	8009264 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008c98:	e019      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008c9e:	e016      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008ca0:	4b0d      	ldr	r3, [pc, #52]	; (8008cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cac:	d107      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cae:	f107 0318 	add.w	r3, r7, #24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f82e 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8008cbc:	e007      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc2:	e004      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008cc8:	e001      	b.n	8008cce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3740      	adds	r7, #64	; 0x40
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	03d09000 	.word	0x03d09000
 8008ce0:	003d0900 	.word	0x003d0900
 8008ce4:	007a1200 	.word	0x007a1200

08008ce8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008cec:	f7fe fb8e 	bl	800740c <HAL_RCC_GetHCLKFreq>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	091b      	lsrs	r3, r3, #4
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	4904      	ldr	r1, [pc, #16]	; (8008d10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cfe:	5ccb      	ldrb	r3, [r1, r3]
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	0800f190 	.word	0x0800f190

08008d14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b089      	sub	sp, #36	; 0x24
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d1c:	4ba1      	ldr	r3, [pc, #644]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d20:	f003 0303 	and.w	r3, r3, #3
 8008d24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008d26:	4b9f      	ldr	r3, [pc, #636]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d2a:	0b1b      	lsrs	r3, r3, #12
 8008d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008d32:	4b9c      	ldr	r3, [pc, #624]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d36:	091b      	lsrs	r3, r3, #4
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008d3e:	4b99      	ldr	r3, [pc, #612]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d42:	08db      	lsrs	r3, r3, #3
 8008d44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	fb02 f303 	mul.w	r3, r2, r3
 8008d4e:	ee07 3a90 	vmov	s15, r3
 8008d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8111 	beq.w	8008f84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	f000 8083 	beq.w	8008e70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	f200 80a1 	bhi.w	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d056      	beq.n	8008e2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d7e:	e099      	b.n	8008eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d80:	4b88      	ldr	r3, [pc, #544]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d02d      	beq.n	8008de8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d8c:	4b85      	ldr	r3, [pc, #532]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	08db      	lsrs	r3, r3, #3
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	4a84      	ldr	r2, [pc, #528]	; (8008fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
 8008d9c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	ee07 3a90 	vmov	s15, r3
 8008da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	ee07 3a90 	vmov	s15, r3
 8008dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db6:	4b7b      	ldr	r3, [pc, #492]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dbe:	ee07 3a90 	vmov	s15, r3
 8008dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008de2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008de6:	e087      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dfa:	4b6a      	ldr	r3, [pc, #424]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e2a:	e065      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	ee07 3a90 	vmov	s15, r3
 8008e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3e:	4b59      	ldr	r3, [pc, #356]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e6e:	e043      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e82:	4b48      	ldr	r3, [pc, #288]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8a:	ee07 3a90 	vmov	s15, r3
 8008e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008eb2:	e021      	b.n	8008ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ebe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec6:	4b37      	ldr	r3, [pc, #220]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008fac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ef6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ef8:	4b2a      	ldr	r3, [pc, #168]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	0a5b      	lsrs	r3, r3, #9
 8008efe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f12:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f1e:	ee17 2a90 	vmov	r2, s15
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008f26:	4b1f      	ldr	r3, [pc, #124]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f4c:	ee17 2a90 	vmov	r2, s15
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008f54:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f58:	0e1b      	lsrs	r3, r3, #24
 8008f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f5e:	ee07 3a90 	vmov	s15, r3
 8008f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f7a:	ee17 2a90 	vmov	r2, s15
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f82:	e008      	b.n	8008f96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	609a      	str	r2, [r3, #8]
}
 8008f96:	bf00      	nop
 8008f98:	3724      	adds	r7, #36	; 0x24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	58024400 	.word	0x58024400
 8008fa8:	03d09000 	.word	0x03d09000
 8008fac:	46000000 	.word	0x46000000
 8008fb0:	4c742400 	.word	0x4c742400
 8008fb4:	4a742400 	.word	0x4a742400
 8008fb8:	4af42400 	.word	0x4af42400

08008fbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b089      	sub	sp, #36	; 0x24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fc4:	4ba1      	ldr	r3, [pc, #644]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008fce:	4b9f      	ldr	r3, [pc, #636]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd2:	0d1b      	lsrs	r3, r3, #20
 8008fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008fda:	4b9c      	ldr	r3, [pc, #624]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	0a1b      	lsrs	r3, r3, #8
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008fe6:	4b99      	ldr	r3, [pc, #612]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fea:	08db      	lsrs	r3, r3, #3
 8008fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	fb02 f303 	mul.w	r3, r2, r3
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	f000 8111 	beq.w	800922c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b02      	cmp	r3, #2
 800900e:	f000 8083 	beq.w	8009118 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b02      	cmp	r3, #2
 8009016:	f200 80a1 	bhi.w	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d003      	beq.n	8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d056      	beq.n	80090d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009026:	e099      	b.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009028:	4b88      	ldr	r3, [pc, #544]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0320 	and.w	r3, r3, #32
 8009030:	2b00      	cmp	r3, #0
 8009032:	d02d      	beq.n	8009090 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009034:	4b85      	ldr	r3, [pc, #532]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	08db      	lsrs	r3, r3, #3
 800903a:	f003 0303 	and.w	r3, r3, #3
 800903e:	4a84      	ldr	r2, [pc, #528]	; (8009250 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009040:	fa22 f303 	lsr.w	r3, r2, r3
 8009044:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	ee07 3a90 	vmov	s15, r3
 800904c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	ee07 3a90 	vmov	s15, r3
 8009056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800905a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800905e:	4b7b      	ldr	r3, [pc, #492]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800906e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800907a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800907e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800908a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800908e:	e087      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009258 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800909e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090a2:	4b6a      	ldr	r3, [pc, #424]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090aa:	ee07 3a90 	vmov	s15, r3
 80090ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80090b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090d2:	e065      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	ee07 3a90 	vmov	s15, r3
 80090da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800925c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	4b59      	ldr	r3, [pc, #356]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800910a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800910e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009112:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009116:	e043      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	ee07 3a90 	vmov	s15, r3
 800911e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009122:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009260 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800912a:	4b48      	ldr	r3, [pc, #288]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009132:	ee07 3a90 	vmov	s15, r3
 8009136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800913a:	ed97 6a03 	vldr	s12, [r7, #12]
 800913e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800914a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800914e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800915a:	e021      	b.n	80091a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800925c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800916a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800916e:	4b37      	ldr	r3, [pc, #220]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009176:	ee07 3a90 	vmov	s15, r3
 800917a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800917e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009182:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009254 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800918a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800918e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800919e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80091a0:	4b2a      	ldr	r3, [pc, #168]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a4:	0a5b      	lsrs	r3, r3, #9
 80091a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80091be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091c6:	ee17 2a90 	vmov	r2, s15
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80091ce:	4b1f      	ldr	r3, [pc, #124]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	0c1b      	lsrs	r3, r3, #16
 80091d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d8:	ee07 3a90 	vmov	s15, r3
 80091dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f4:	ee17 2a90 	vmov	r2, s15
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80091fc:	4b13      	ldr	r3, [pc, #76]	; (800924c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009200:	0e1b      	lsrs	r3, r3, #24
 8009202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009206:	ee07 3a90 	vmov	s15, r3
 800920a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009216:	edd7 6a07 	vldr	s13, [r7, #28]
 800921a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800921e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009222:	ee17 2a90 	vmov	r2, s15
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800922a:	e008      	b.n	800923e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2200      	movs	r2, #0
 800923c:	609a      	str	r2, [r3, #8]
}
 800923e:	bf00      	nop
 8009240:	3724      	adds	r7, #36	; 0x24
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	58024400 	.word	0x58024400
 8009250:	03d09000 	.word	0x03d09000
 8009254:	46000000 	.word	0x46000000
 8009258:	4c742400 	.word	0x4c742400
 800925c:	4a742400 	.word	0x4a742400
 8009260:	4af42400 	.word	0x4af42400

08009264 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009264:	b480      	push	{r7}
 8009266:	b089      	sub	sp, #36	; 0x24
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800926c:	4ba0      	ldr	r3, [pc, #640]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800926e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009270:	f003 0303 	and.w	r3, r3, #3
 8009274:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009276:	4b9e      	ldr	r3, [pc, #632]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	091b      	lsrs	r3, r3, #4
 800927c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009280:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009282:	4b9b      	ldr	r3, [pc, #620]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	f003 0301 	and.w	r3, r3, #1
 800928a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800928c:	4b98      	ldr	r3, [pc, #608]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800928e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009290:	08db      	lsrs	r3, r3, #3
 8009292:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	fb02 f303 	mul.w	r3, r2, r3
 800929c:	ee07 3a90 	vmov	s15, r3
 80092a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8111 	beq.w	80094d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	f000 8083 	beq.w	80093be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	f200 80a1 	bhi.w	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80092c0:	69bb      	ldr	r3, [r7, #24]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d056      	beq.n	800937a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80092cc:	e099      	b.n	8009402 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092ce:	4b88      	ldr	r3, [pc, #544]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0320 	and.w	r3, r3, #32
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d02d      	beq.n	8009336 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80092da:	4b85      	ldr	r3, [pc, #532]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	08db      	lsrs	r3, r3, #3
 80092e0:	f003 0303 	and.w	r3, r3, #3
 80092e4:	4a83      	ldr	r2, [pc, #524]	; (80094f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80092e6:	fa22 f303 	lsr.w	r3, r2, r3
 80092ea:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009304:	4b7a      	ldr	r3, [pc, #488]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800930c:	ee07 3a90 	vmov	s15, r3
 8009310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009314:	ed97 6a03 	vldr	s12, [r7, #12]
 8009318:	eddf 5a77 	vldr	s11, [pc, #476]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800931c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800932c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009330:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009334:	e087      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	ee07 3a90 	vmov	s15, r3
 800933c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009340:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009348:	4b69      	ldr	r3, [pc, #420]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800934a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009350:	ee07 3a90 	vmov	s15, r3
 8009354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009358:	ed97 6a03 	vldr	s12, [r7, #12]
 800935c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800936c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009374:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009378:	e065      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	ee07 3a90 	vmov	s15, r3
 8009380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009384:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009500 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009388:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938c:	4b58      	ldr	r3, [pc, #352]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800938e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800939c:	ed97 6a03 	vldr	s12, [r7, #12]
 80093a0:	eddf 5a55 	vldr	s11, [pc, #340]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80093bc:	e043      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	ee07 3a90 	vmov	s15, r3
 80093c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093c8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009504 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80093cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093d0:	4b47      	ldr	r3, [pc, #284]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093d8:	ee07 3a90 	vmov	s15, r3
 80093dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093e4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009400:	e021      	b.n	8009446 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	ee07 3a90 	vmov	s15, r3
 8009408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800940c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80094fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009410:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009414:	4b36      	ldr	r3, [pc, #216]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800941c:	ee07 3a90 	vmov	s15, r3
 8009420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009424:	ed97 6a03 	vldr	s12, [r7, #12]
 8009428:	eddf 5a33 	vldr	s11, [pc, #204]	; 80094f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800942c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009430:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009434:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009438:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800943c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009440:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009444:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009446:	4b2a      	ldr	r3, [pc, #168]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	0a5b      	lsrs	r3, r3, #9
 800944c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009450:	ee07 3a90 	vmov	s15, r3
 8009454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800945c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009460:	edd7 6a07 	vldr	s13, [r7, #28]
 8009464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800946c:	ee17 2a90 	vmov	r2, s15
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009474:	4b1e      	ldr	r3, [pc, #120]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009478:	0c1b      	lsrs	r3, r3, #16
 800947a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800947e:	ee07 3a90 	vmov	s15, r3
 8009482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800948a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800948e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800949a:	ee17 2a90 	vmov	r2, s15
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80094a2:	4b13      	ldr	r3, [pc, #76]	; (80094f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a6:	0e1b      	lsrs	r3, r3, #24
 80094a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80094c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c8:	ee17 2a90 	vmov	r2, s15
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80094d0:	e008      	b.n	80094e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	609a      	str	r2, [r3, #8]
}
 80094e4:	bf00      	nop
 80094e6:	3724      	adds	r7, #36	; 0x24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	58024400 	.word	0x58024400
 80094f4:	03d09000 	.word	0x03d09000
 80094f8:	46000000 	.word	0x46000000
 80094fc:	4c742400 	.word	0x4c742400
 8009500:	4a742400 	.word	0x4a742400
 8009504:	4af42400 	.word	0x4af42400

08009508 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009516:	4b53      	ldr	r3, [pc, #332]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	2b03      	cmp	r3, #3
 8009520:	d101      	bne.n	8009526 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e099      	b.n	800965a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009526:	4b4f      	ldr	r3, [pc, #316]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a4e      	ldr	r2, [pc, #312]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800952c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009532:	f7f8 ff2d 	bl	8002390 <HAL_GetTick>
 8009536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009538:	e008      	b.n	800954c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800953a:	f7f8 ff29 	bl	8002390 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d901      	bls.n	800954c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e086      	b.n	800965a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800954c:	4b45      	ldr	r3, [pc, #276]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1f0      	bne.n	800953a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009558:	4b42      	ldr	r3, [pc, #264]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	031b      	lsls	r3, r3, #12
 8009566:	493f      	ldr	r1, [pc, #252]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009568:	4313      	orrs	r3, r2
 800956a:	628b      	str	r3, [r1, #40]	; 0x28
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	3b01      	subs	r3, #1
 8009572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	3b01      	subs	r3, #1
 800957c:	025b      	lsls	r3, r3, #9
 800957e:	b29b      	uxth	r3, r3
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	3b01      	subs	r3, #1
 8009588:	041b      	lsls	r3, r3, #16
 800958a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	3b01      	subs	r3, #1
 8009596:	061b      	lsls	r3, r3, #24
 8009598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800959c:	4931      	ldr	r1, [pc, #196]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80095a2:	4b30      	ldr	r3, [pc, #192]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	492d      	ldr	r1, [pc, #180]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095b0:	4313      	orrs	r3, r2
 80095b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80095b4:	4b2b      	ldr	r3, [pc, #172]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	f023 0220 	bic.w	r2, r3, #32
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	4928      	ldr	r1, [pc, #160]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80095c6:	4b27      	ldr	r3, [pc, #156]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ca:	4a26      	ldr	r2, [pc, #152]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095cc:	f023 0310 	bic.w	r3, r3, #16
 80095d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80095d2:	4b24      	ldr	r3, [pc, #144]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095d6:	4b24      	ldr	r3, [pc, #144]	; (8009668 <RCCEx_PLL2_Config+0x160>)
 80095d8:	4013      	ands	r3, r2
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	69d2      	ldr	r2, [r2, #28]
 80095de:	00d2      	lsls	r2, r2, #3
 80095e0:	4920      	ldr	r1, [pc, #128]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095e2:	4313      	orrs	r3, r2
 80095e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80095e6:	4b1f      	ldr	r3, [pc, #124]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	4a1e      	ldr	r2, [pc, #120]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095ec:	f043 0310 	orr.w	r3, r3, #16
 80095f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d106      	bne.n	8009606 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80095f8:	4b1a      	ldr	r3, [pc, #104]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	4a19      	ldr	r2, [pc, #100]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 80095fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009604:	e00f      	b.n	8009626 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d106      	bne.n	800961a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800960c:	4b15      	ldr	r3, [pc, #84]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	4a14      	ldr	r2, [pc, #80]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009618:	e005      	b.n	8009626 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800961a:	4b12      	ldr	r3, [pc, #72]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800961c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961e:	4a11      	ldr	r2, [pc, #68]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009624:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009626:	4b0f      	ldr	r3, [pc, #60]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a0e      	ldr	r2, [pc, #56]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800962c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009632:	f7f8 fead 	bl	8002390 <HAL_GetTick>
 8009636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009638:	e008      	b.n	800964c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800963a:	f7f8 fea9 	bl	8002390 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	2b02      	cmp	r3, #2
 8009646:	d901      	bls.n	800964c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e006      	b.n	800965a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800964c:	4b05      	ldr	r3, [pc, #20]	; (8009664 <RCCEx_PLL2_Config+0x15c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0f0      	beq.n	800963a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009658:	7bfb      	ldrb	r3, [r7, #15]
}
 800965a:	4618      	mov	r0, r3
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	58024400 	.word	0x58024400
 8009668:	ffff0007 	.word	0xffff0007

0800966c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800967a:	4b53      	ldr	r3, [pc, #332]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967e:	f003 0303 	and.w	r3, r3, #3
 8009682:	2b03      	cmp	r3, #3
 8009684:	d101      	bne.n	800968a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009686:	2301      	movs	r3, #1
 8009688:	e099      	b.n	80097be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800968a:	4b4f      	ldr	r3, [pc, #316]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a4e      	ldr	r2, [pc, #312]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009696:	f7f8 fe7b 	bl	8002390 <HAL_GetTick>
 800969a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800969c:	e008      	b.n	80096b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800969e:	f7f8 fe77 	bl	8002390 <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d901      	bls.n	80096b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e086      	b.n	80097be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80096b0:	4b45      	ldr	r3, [pc, #276]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f0      	bne.n	800969e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80096bc:	4b42      	ldr	r3, [pc, #264]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80096be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	051b      	lsls	r3, r3, #20
 80096ca:	493f      	ldr	r1, [pc, #252]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	628b      	str	r3, [r1, #40]	; 0x28
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	3b01      	subs	r3, #1
 80096d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	3b01      	subs	r3, #1
 80096e0:	025b      	lsls	r3, r3, #9
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	431a      	orrs	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	3b01      	subs	r3, #1
 80096ec:	041b      	lsls	r3, r3, #16
 80096ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80096f2:	431a      	orrs	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	3b01      	subs	r3, #1
 80096fa:	061b      	lsls	r3, r3, #24
 80096fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009700:	4931      	ldr	r1, [pc, #196]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009702:	4313      	orrs	r3, r2
 8009704:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009706:	4b30      	ldr	r3, [pc, #192]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800970a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	695b      	ldr	r3, [r3, #20]
 8009712:	492d      	ldr	r1, [pc, #180]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009714:	4313      	orrs	r3, r2
 8009716:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009718:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800971a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	4928      	ldr	r1, [pc, #160]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009726:	4313      	orrs	r3, r2
 8009728:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800972a:	4b27      	ldr	r3, [pc, #156]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800972c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972e:	4a26      	ldr	r2, [pc, #152]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009736:	4b24      	ldr	r3, [pc, #144]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800973a:	4b24      	ldr	r3, [pc, #144]	; (80097cc <RCCEx_PLL3_Config+0x160>)
 800973c:	4013      	ands	r3, r2
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	69d2      	ldr	r2, [r2, #28]
 8009742:	00d2      	lsls	r2, r2, #3
 8009744:	4920      	ldr	r1, [pc, #128]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009746:	4313      	orrs	r3, r2
 8009748:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800974a:	4b1f      	ldr	r3, [pc, #124]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800974e:	4a1e      	ldr	r2, [pc, #120]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009754:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d106      	bne.n	800976a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800975c:	4b1a      	ldr	r3, [pc, #104]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009760:	4a19      	ldr	r2, [pc, #100]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009762:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009766:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009768:	e00f      	b.n	800978a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d106      	bne.n	800977e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009770:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009774:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009776:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800977a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800977c:	e005      	b.n	800978a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800977e:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	4a11      	ldr	r2, [pc, #68]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009784:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009788:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800978a:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a0e      	ldr	r2, [pc, #56]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 8009790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009796:	f7f8 fdfb 	bl	8002390 <HAL_GetTick>
 800979a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800979c:	e008      	b.n	80097b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800979e:	f7f8 fdf7 	bl	8002390 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d901      	bls.n	80097b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	e006      	b.n	80097be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <RCCEx_PLL3_Config+0x15c>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0f0      	beq.n	800979e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	58024400 	.word	0x58024400
 80097cc:	ffff0007 	.word	0xffff0007

080097d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d101      	bne.n	80097e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	e049      	b.n	8009876 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d106      	bne.n	80097fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f7f8 fa7a 	bl	8001cf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2202      	movs	r2, #2
 8009800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	3304      	adds	r3, #4
 800980c:	4619      	mov	r1, r3
 800980e:	4610      	mov	r0, r2
 8009810:	f000 fd5c 	bl	800a2cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b01      	cmp	r3, #1
 8009892:	d001      	beq.n	8009898 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e04f      	b.n	8009938 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2202      	movs	r2, #2
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68da      	ldr	r2, [r3, #12]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f042 0201 	orr.w	r2, r2, #1
 80098ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a23      	ldr	r2, [pc, #140]	; (8009944 <HAL_TIM_Base_Start_IT+0xc4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d01d      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0x76>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c2:	d018      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0x76>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a1f      	ldr	r2, [pc, #124]	; (8009948 <HAL_TIM_Base_Start_IT+0xc8>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d013      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0x76>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a1e      	ldr	r2, [pc, #120]	; (800994c <HAL_TIM_Base_Start_IT+0xcc>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d00e      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0x76>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a1c      	ldr	r2, [pc, #112]	; (8009950 <HAL_TIM_Base_Start_IT+0xd0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d009      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0x76>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a1b      	ldr	r2, [pc, #108]	; (8009954 <HAL_TIM_Base_Start_IT+0xd4>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d004      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0x76>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a19      	ldr	r2, [pc, #100]	; (8009958 <HAL_TIM_Base_Start_IT+0xd8>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d115      	bne.n	8009922 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689a      	ldr	r2, [r3, #8]
 80098fc:	4b17      	ldr	r3, [pc, #92]	; (800995c <HAL_TIM_Base_Start_IT+0xdc>)
 80098fe:	4013      	ands	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b06      	cmp	r3, #6
 8009906:	d015      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0xb4>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800990e:	d011      	beq.n	8009934 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f042 0201 	orr.w	r2, r2, #1
 800991e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009920:	e008      	b.n	8009934 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f042 0201 	orr.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	e000      	b.n	8009936 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009934:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	40010000 	.word	0x40010000
 8009948:	40000400 	.word	0x40000400
 800994c:	40000800 	.word	0x40000800
 8009950:	40000c00 	.word	0x40000c00
 8009954:	40010400 	.word	0x40010400
 8009958:	40001800 	.word	0x40001800
 800995c:	00010007 	.word	0x00010007

08009960 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e049      	b.n	8009a06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d106      	bne.n	800998c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 f841 	bl	8009a0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3304      	adds	r3, #4
 800999c:	4619      	mov	r1, r3
 800999e:	4610      	mov	r0, r2
 80099a0:	f000 fc94 	bl	800a2cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009a0e:	b480      	push	{r7}
 8009a10:	b083      	sub	sp, #12
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009a16:	bf00      	nop
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <HAL_TIM_PWM_Start+0x24>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	bf14      	ite	ne
 8009a40:	2301      	movne	r3, #1
 8009a42:	2300      	moveq	r3, #0
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	e03c      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	d109      	bne.n	8009a62 <HAL_TIM_PWM_Start+0x3e>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	bf14      	ite	ne
 8009a5a:	2301      	movne	r3, #1
 8009a5c:	2300      	moveq	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	e02f      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d109      	bne.n	8009a7c <HAL_TIM_PWM_Start+0x58>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	bf14      	ite	ne
 8009a74:	2301      	movne	r3, #1
 8009a76:	2300      	moveq	r3, #0
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	e022      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2b0c      	cmp	r3, #12
 8009a80:	d109      	bne.n	8009a96 <HAL_TIM_PWM_Start+0x72>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	bf14      	ite	ne
 8009a8e:	2301      	movne	r3, #1
 8009a90:	2300      	moveq	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	e015      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b10      	cmp	r3, #16
 8009a9a:	d109      	bne.n	8009ab0 <HAL_TIM_PWM_Start+0x8c>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	bf14      	ite	ne
 8009aa8:	2301      	movne	r3, #1
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	e008      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	bf14      	ite	ne
 8009abc:	2301      	movne	r3, #1
 8009abe:	2300      	moveq	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e09c      	b.n	8009c04 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <HAL_TIM_PWM_Start+0xb6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ad8:	e023      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d104      	bne.n	8009aea <HAL_TIM_PWM_Start+0xc6>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ae8:	e01b      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d104      	bne.n	8009afa <HAL_TIM_PWM_Start+0xd6>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009af8:	e013      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b0c      	cmp	r3, #12
 8009afe:	d104      	bne.n	8009b0a <HAL_TIM_PWM_Start+0xe6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b08:	e00b      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b10      	cmp	r3, #16
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIM_PWM_Start+0xf6>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b18:	e003      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2201      	movs	r2, #1
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f000 ffd4 	bl	800aad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a35      	ldr	r2, [pc, #212]	; (8009c0c <HAL_TIM_PWM_Start+0x1e8>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d013      	beq.n	8009b62 <HAL_TIM_PWM_Start+0x13e>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a34      	ldr	r2, [pc, #208]	; (8009c10 <HAL_TIM_PWM_Start+0x1ec>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00e      	beq.n	8009b62 <HAL_TIM_PWM_Start+0x13e>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a32      	ldr	r2, [pc, #200]	; (8009c14 <HAL_TIM_PWM_Start+0x1f0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d009      	beq.n	8009b62 <HAL_TIM_PWM_Start+0x13e>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a31      	ldr	r2, [pc, #196]	; (8009c18 <HAL_TIM_PWM_Start+0x1f4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d004      	beq.n	8009b62 <HAL_TIM_PWM_Start+0x13e>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a2f      	ldr	r2, [pc, #188]	; (8009c1c <HAL_TIM_PWM_Start+0x1f8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d101      	bne.n	8009b66 <HAL_TIM_PWM_Start+0x142>
 8009b62:	2301      	movs	r3, #1
 8009b64:	e000      	b.n	8009b68 <HAL_TIM_PWM_Start+0x144>
 8009b66:	2300      	movs	r3, #0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d007      	beq.n	8009b7c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b7a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a22      	ldr	r2, [pc, #136]	; (8009c0c <HAL_TIM_PWM_Start+0x1e8>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d01d      	beq.n	8009bc2 <HAL_TIM_PWM_Start+0x19e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b8e:	d018      	beq.n	8009bc2 <HAL_TIM_PWM_Start+0x19e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a22      	ldr	r2, [pc, #136]	; (8009c20 <HAL_TIM_PWM_Start+0x1fc>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d013      	beq.n	8009bc2 <HAL_TIM_PWM_Start+0x19e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a21      	ldr	r2, [pc, #132]	; (8009c24 <HAL_TIM_PWM_Start+0x200>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00e      	beq.n	8009bc2 <HAL_TIM_PWM_Start+0x19e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1f      	ldr	r2, [pc, #124]	; (8009c28 <HAL_TIM_PWM_Start+0x204>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d009      	beq.n	8009bc2 <HAL_TIM_PWM_Start+0x19e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a17      	ldr	r2, [pc, #92]	; (8009c10 <HAL_TIM_PWM_Start+0x1ec>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d004      	beq.n	8009bc2 <HAL_TIM_PWM_Start+0x19e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a1b      	ldr	r2, [pc, #108]	; (8009c2c <HAL_TIM_PWM_Start+0x208>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d115      	bne.n	8009bee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	4b19      	ldr	r3, [pc, #100]	; (8009c30 <HAL_TIM_PWM_Start+0x20c>)
 8009bca:	4013      	ands	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b06      	cmp	r3, #6
 8009bd2:	d015      	beq.n	8009c00 <HAL_TIM_PWM_Start+0x1dc>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bda:	d011      	beq.n	8009c00 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bec:	e008      	b.n	8009c00 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0201 	orr.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	e000      	b.n	8009c02 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	40010000 	.word	0x40010000
 8009c10:	40010400 	.word	0x40010400
 8009c14:	40014000 	.word	0x40014000
 8009c18:	40014400 	.word	0x40014400
 8009c1c:	40014800 	.word	0x40014800
 8009c20:	40000400 	.word	0x40000400
 8009c24:	40000800 	.word	0x40000800
 8009c28:	40000c00 	.word	0x40000c00
 8009c2c:	40001800 	.word	0x40001800
 8009c30:	00010007 	.word	0x00010007

08009c34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b082      	sub	sp, #8
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	691b      	ldr	r3, [r3, #16]
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	d122      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68db      	ldr	r3, [r3, #12]
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d11b      	bne.n	8009c90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f06f 0202 	mvn.w	r2, #2
 8009c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d003      	beq.n	8009c7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fb0a 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009c7c:	e005      	b.n	8009c8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fafc 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fb0d 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d122      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d11b      	bne.n	8009ce4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f06f 0204 	mvn.w	r2, #4
 8009cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2202      	movs	r2, #2
 8009cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fae0 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009cd0:	e005      	b.n	8009cde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fad2 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fae3 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	691b      	ldr	r3, [r3, #16]
 8009cea:	f003 0308 	and.w	r3, r3, #8
 8009cee:	2b08      	cmp	r3, #8
 8009cf0:	d122      	bne.n	8009d38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f003 0308 	and.w	r3, r3, #8
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d11b      	bne.n	8009d38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f06f 0208 	mvn.w	r2, #8
 8009d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2204      	movs	r2, #4
 8009d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	69db      	ldr	r3, [r3, #28]
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 fab6 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009d24:	e005      	b.n	8009d32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 faa8 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fab9 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	f003 0310 	and.w	r3, r3, #16
 8009d42:	2b10      	cmp	r3, #16
 8009d44:	d122      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	f003 0310 	and.w	r3, r3, #16
 8009d50:	2b10      	cmp	r3, #16
 8009d52:	d11b      	bne.n	8009d8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f06f 0210 	mvn.w	r2, #16
 8009d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2208      	movs	r2, #8
 8009d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fa8c 	bl	800a290 <HAL_TIM_IC_CaptureCallback>
 8009d78:	e005      	b.n	8009d86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fa7e 	bl	800a27c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fa8f 	bl	800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	691b      	ldr	r3, [r3, #16]
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d10e      	bne.n	8009db8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d107      	bne.n	8009db8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f06f 0201 	mvn.w	r2, #1
 8009db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7f7 fb7c 	bl	80014b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc2:	2b80      	cmp	r3, #128	; 0x80
 8009dc4:	d10e      	bne.n	8009de4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68db      	ldr	r3, [r3, #12]
 8009dcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd0:	2b80      	cmp	r3, #128	; 0x80
 8009dd2:	d107      	bne.n	8009de4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ddc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 ffb0 	bl	800ad44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009df2:	d10e      	bne.n	8009e12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfe:	2b80      	cmp	r3, #128	; 0x80
 8009e00:	d107      	bne.n	8009e12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 ffa3 	bl	800ad58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1c:	2b40      	cmp	r3, #64	; 0x40
 8009e1e:	d10e      	bne.n	8009e3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2a:	2b40      	cmp	r3, #64	; 0x40
 8009e2c:	d107      	bne.n	8009e3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa3d 	bl	800a2b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	f003 0320 	and.w	r3, r3, #32
 8009e48:	2b20      	cmp	r3, #32
 8009e4a:	d10e      	bne.n	8009e6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f003 0320 	and.w	r3, r3, #32
 8009e56:	2b20      	cmp	r3, #32
 8009e58:	d107      	bne.n	8009e6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f06f 0220 	mvn.w	r2, #32
 8009e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 ff63 	bl	800ad30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e6a:	bf00      	nop
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	60b9      	str	r1, [r7, #8]
 8009e7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d101      	bne.n	8009e8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009e8a:	2302      	movs	r3, #2
 8009e8c:	e0fd      	b.n	800a08a <HAL_TIM_PWM_ConfigChannel+0x216>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b14      	cmp	r3, #20
 8009e9a:	f200 80f0 	bhi.w	800a07e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009e9e:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea4:	08009ef9 	.word	0x08009ef9
 8009ea8:	0800a07f 	.word	0x0800a07f
 8009eac:	0800a07f 	.word	0x0800a07f
 8009eb0:	0800a07f 	.word	0x0800a07f
 8009eb4:	08009f39 	.word	0x08009f39
 8009eb8:	0800a07f 	.word	0x0800a07f
 8009ebc:	0800a07f 	.word	0x0800a07f
 8009ec0:	0800a07f 	.word	0x0800a07f
 8009ec4:	08009f7b 	.word	0x08009f7b
 8009ec8:	0800a07f 	.word	0x0800a07f
 8009ecc:	0800a07f 	.word	0x0800a07f
 8009ed0:	0800a07f 	.word	0x0800a07f
 8009ed4:	08009fbb 	.word	0x08009fbb
 8009ed8:	0800a07f 	.word	0x0800a07f
 8009edc:	0800a07f 	.word	0x0800a07f
 8009ee0:	0800a07f 	.word	0x0800a07f
 8009ee4:	08009ffd 	.word	0x08009ffd
 8009ee8:	0800a07f 	.word	0x0800a07f
 8009eec:	0800a07f 	.word	0x0800a07f
 8009ef0:	0800a07f 	.word	0x0800a07f
 8009ef4:	0800a03d 	.word	0x0800a03d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68b9      	ldr	r1, [r7, #8]
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fa7e 	bl	800a400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	699a      	ldr	r2, [r3, #24]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0208 	orr.w	r2, r2, #8
 8009f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699a      	ldr	r2, [r3, #24]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 0204 	bic.w	r2, r2, #4
 8009f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	6999      	ldr	r1, [r3, #24]
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	691a      	ldr	r2, [r3, #16]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	619a      	str	r2, [r3, #24]
      break;
 8009f36:	e0a3      	b.n	800a080 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 faee 	bl	800a520 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	699a      	ldr	r2, [r3, #24]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	699a      	ldr	r2, [r3, #24]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	6999      	ldr	r1, [r3, #24]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	021a      	lsls	r2, r3, #8
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	430a      	orrs	r2, r1
 8009f76:	619a      	str	r2, [r3, #24]
      break;
 8009f78:	e082      	b.n	800a080 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68b9      	ldr	r1, [r7, #8]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f000 fb57 	bl	800a634 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	69da      	ldr	r2, [r3, #28]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f042 0208 	orr.w	r2, r2, #8
 8009f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f022 0204 	bic.w	r2, r2, #4
 8009fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69d9      	ldr	r1, [r3, #28]
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	691a      	ldr	r2, [r3, #16]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	61da      	str	r2, [r3, #28]
      break;
 8009fb8:	e062      	b.n	800a080 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f000 fbbd 	bl	800a740 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	69da      	ldr	r2, [r3, #28]
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	69da      	ldr	r2, [r3, #28]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	69d9      	ldr	r1, [r3, #28]
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	021a      	lsls	r2, r3, #8
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	61da      	str	r2, [r3, #28]
      break;
 8009ffa:	e041      	b.n	800a080 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68b9      	ldr	r1, [r7, #8]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 fc04 	bl	800a810 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0208 	orr.w	r2, r2, #8
 800a016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0204 	bic.w	r2, r2, #4
 800a026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	691a      	ldr	r2, [r3, #16]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a03a:	e021      	b.n	800a080 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68b9      	ldr	r1, [r7, #8]
 800a042:	4618      	mov	r0, r3
 800a044:	f000 fc46 	bl	800a8d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	021a      	lsls	r2, r3, #8
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a07c:	e000      	b.n	800a080 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a07e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop

0800a094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d101      	bne.n	800a0ac <HAL_TIM_ConfigClockSource+0x18>
 800a0a8:	2302      	movs	r3, #2
 800a0aa:	e0db      	b.n	800a264 <HAL_TIM_ConfigClockSource+0x1d0>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	4b69      	ldr	r3, [pc, #420]	; (800a26c <HAL_TIM_ConfigClockSource+0x1d8>)
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a63      	ldr	r2, [pc, #396]	; (800a270 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	f000 80a9 	beq.w	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a0e8:	4a61      	ldr	r2, [pc, #388]	; (800a270 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	f200 80ae 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a0f0:	4a60      	ldr	r2, [pc, #384]	; (800a274 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	f000 80a1 	beq.w	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a0f8:	4a5e      	ldr	r2, [pc, #376]	; (800a274 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	f200 80a6 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a100:	4a5d      	ldr	r2, [pc, #372]	; (800a278 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a102:	4293      	cmp	r3, r2
 800a104:	f000 8099 	beq.w	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a108:	4a5b      	ldr	r2, [pc, #364]	; (800a278 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	f200 809e 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a110:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a114:	f000 8091 	beq.w	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a118:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a11c:	f200 8096 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a124:	f000 8089 	beq.w	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12c:	f200 808e 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a134:	d03e      	beq.n	800a1b4 <HAL_TIM_ConfigClockSource+0x120>
 800a136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a13a:	f200 8087 	bhi.w	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a142:	f000 8085 	beq.w	800a250 <HAL_TIM_ConfigClockSource+0x1bc>
 800a146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a14a:	d87f      	bhi.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a14c:	2b70      	cmp	r3, #112	; 0x70
 800a14e:	d01a      	beq.n	800a186 <HAL_TIM_ConfigClockSource+0xf2>
 800a150:	2b70      	cmp	r3, #112	; 0x70
 800a152:	d87b      	bhi.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a154:	2b60      	cmp	r3, #96	; 0x60
 800a156:	d050      	beq.n	800a1fa <HAL_TIM_ConfigClockSource+0x166>
 800a158:	2b60      	cmp	r3, #96	; 0x60
 800a15a:	d877      	bhi.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a15c:	2b50      	cmp	r3, #80	; 0x50
 800a15e:	d03c      	beq.n	800a1da <HAL_TIM_ConfigClockSource+0x146>
 800a160:	2b50      	cmp	r3, #80	; 0x50
 800a162:	d873      	bhi.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a164:	2b40      	cmp	r3, #64	; 0x40
 800a166:	d058      	beq.n	800a21a <HAL_TIM_ConfigClockSource+0x186>
 800a168:	2b40      	cmp	r3, #64	; 0x40
 800a16a:	d86f      	bhi.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a16c:	2b30      	cmp	r3, #48	; 0x30
 800a16e:	d064      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a170:	2b30      	cmp	r3, #48	; 0x30
 800a172:	d86b      	bhi.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a174:	2b20      	cmp	r3, #32
 800a176:	d060      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a178:	2b20      	cmp	r3, #32
 800a17a:	d867      	bhi.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d05c      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
 800a180:	2b10      	cmp	r3, #16
 800a182:	d05a      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a184:	e062      	b.n	800a24c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6818      	ldr	r0, [r3, #0]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	6899      	ldr	r1, [r3, #8]
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f000 fc7f 	bl	800aa98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a1a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	609a      	str	r2, [r3, #8]
      break;
 800a1b2:	e04e      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6818      	ldr	r0, [r3, #0]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	6899      	ldr	r1, [r3, #8]
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685a      	ldr	r2, [r3, #4]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f000 fc68 	bl	800aa98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	689a      	ldr	r2, [r3, #8]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1d6:	609a      	str	r2, [r3, #8]
      break;
 800a1d8:	e03b      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6818      	ldr	r0, [r3, #0]
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	6859      	ldr	r1, [r3, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f000 fbd8 	bl	800a99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	2150      	movs	r1, #80	; 0x50
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fc32 	bl	800aa5c <TIM_ITRx_SetConfig>
      break;
 800a1f8:	e02b      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6818      	ldr	r0, [r3, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	6859      	ldr	r1, [r3, #4]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	461a      	mov	r2, r3
 800a208:	f000 fbf7 	bl	800a9fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2160      	movs	r1, #96	; 0x60
 800a212:	4618      	mov	r0, r3
 800a214:	f000 fc22 	bl	800aa5c <TIM_ITRx_SetConfig>
      break;
 800a218:	e01b      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6859      	ldr	r1, [r3, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	461a      	mov	r2, r3
 800a228:	f000 fbb8 	bl	800a99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2140      	movs	r1, #64	; 0x40
 800a232:	4618      	mov	r0, r3
 800a234:	f000 fc12 	bl	800aa5c <TIM_ITRx_SetConfig>
      break;
 800a238:	e00b      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4619      	mov	r1, r3
 800a244:	4610      	mov	r0, r2
 800a246:	f000 fc09 	bl	800aa5c <TIM_ITRx_SetConfig>
        break;
 800a24a:	e002      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a24c:	bf00      	nop
 800a24e:	e000      	b.n	800a252 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800a250:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	ffceff88 	.word	0xffceff88
 800a270:	00100040 	.word	0x00100040
 800a274:	00100030 	.word	0x00100030
 800a278:	00100020 	.word	0x00100020

0800a27c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a40      	ldr	r2, [pc, #256]	; (800a3e0 <TIM_Base_SetConfig+0x114>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d013      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2ea:	d00f      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	4a3d      	ldr	r2, [pc, #244]	; (800a3e4 <TIM_Base_SetConfig+0x118>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d00b      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a3c      	ldr	r2, [pc, #240]	; (800a3e8 <TIM_Base_SetConfig+0x11c>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d007      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a3b      	ldr	r2, [pc, #236]	; (800a3ec <TIM_Base_SetConfig+0x120>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d003      	beq.n	800a30c <TIM_Base_SetConfig+0x40>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a3a      	ldr	r2, [pc, #232]	; (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d108      	bne.n	800a31e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a2f      	ldr	r2, [pc, #188]	; (800a3e0 <TIM_Base_SetConfig+0x114>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d01f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a32c:	d01b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	4a2c      	ldr	r2, [pc, #176]	; (800a3e4 <TIM_Base_SetConfig+0x118>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d017      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4a2b      	ldr	r2, [pc, #172]	; (800a3e8 <TIM_Base_SetConfig+0x11c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d013      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	4a2a      	ldr	r2, [pc, #168]	; (800a3ec <TIM_Base_SetConfig+0x120>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d00f      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a29      	ldr	r2, [pc, #164]	; (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d00b      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	4a28      	ldr	r2, [pc, #160]	; (800a3f4 <TIM_Base_SetConfig+0x128>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d007      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	4a27      	ldr	r2, [pc, #156]	; (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d003      	beq.n	800a366 <TIM_Base_SetConfig+0x9a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	4a26      	ldr	r2, [pc, #152]	; (800a3fc <TIM_Base_SetConfig+0x130>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d108      	bne.n	800a378 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a36c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68fa      	ldr	r2, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	68fa      	ldr	r2, [r7, #12]
 800a38a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689a      	ldr	r2, [r3, #8]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a10      	ldr	r2, [pc, #64]	; (800a3e0 <TIM_Base_SetConfig+0x114>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d00f      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	4a12      	ldr	r2, [pc, #72]	; (800a3f0 <TIM_Base_SetConfig+0x124>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00b      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a11      	ldr	r2, [pc, #68]	; (800a3f4 <TIM_Base_SetConfig+0x128>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d007      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a10      	ldr	r2, [pc, #64]	; (800a3f8 <TIM_Base_SetConfig+0x12c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d003      	beq.n	800a3c4 <TIM_Base_SetConfig+0xf8>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a0f      	ldr	r2, [pc, #60]	; (800a3fc <TIM_Base_SetConfig+0x130>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d103      	bne.n	800a3cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	691a      	ldr	r2, [r3, #16]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	615a      	str	r2, [r3, #20]
}
 800a3d2:	bf00      	nop
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40010000 	.word	0x40010000
 800a3e4:	40000400 	.word	0x40000400
 800a3e8:	40000800 	.word	0x40000800
 800a3ec:	40000c00 	.word	0x40000c00
 800a3f0:	40010400 	.word	0x40010400
 800a3f4:	40014000 	.word	0x40014000
 800a3f8:	40014400 	.word	0x40014400
 800a3fc:	40014800 	.word	0x40014800

0800a400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	f023 0201 	bic.w	r2, r3, #1
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	699b      	ldr	r3, [r3, #24]
 800a426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	4b37      	ldr	r3, [pc, #220]	; (800a508 <TIM_OC1_SetConfig+0x108>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f023 0303 	bic.w	r3, r3, #3
 800a436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68fa      	ldr	r2, [r7, #12]
 800a43e:	4313      	orrs	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f023 0302 	bic.w	r3, r3, #2
 800a448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	697a      	ldr	r2, [r7, #20]
 800a450:	4313      	orrs	r3, r2
 800a452:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a2d      	ldr	r2, [pc, #180]	; (800a50c <TIM_OC1_SetConfig+0x10c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d00f      	beq.n	800a47c <TIM_OC1_SetConfig+0x7c>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a2c      	ldr	r2, [pc, #176]	; (800a510 <TIM_OC1_SetConfig+0x110>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d00b      	beq.n	800a47c <TIM_OC1_SetConfig+0x7c>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a2b      	ldr	r2, [pc, #172]	; (800a514 <TIM_OC1_SetConfig+0x114>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d007      	beq.n	800a47c <TIM_OC1_SetConfig+0x7c>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a2a      	ldr	r2, [pc, #168]	; (800a518 <TIM_OC1_SetConfig+0x118>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d003      	beq.n	800a47c <TIM_OC1_SetConfig+0x7c>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a29      	ldr	r2, [pc, #164]	; (800a51c <TIM_OC1_SetConfig+0x11c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d10c      	bne.n	800a496 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f023 0308 	bic.w	r3, r3, #8
 800a482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	f023 0304 	bic.w	r3, r3, #4
 800a494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a1c      	ldr	r2, [pc, #112]	; (800a50c <TIM_OC1_SetConfig+0x10c>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d00f      	beq.n	800a4be <TIM_OC1_SetConfig+0xbe>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a1b      	ldr	r2, [pc, #108]	; (800a510 <TIM_OC1_SetConfig+0x110>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d00b      	beq.n	800a4be <TIM_OC1_SetConfig+0xbe>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a1a      	ldr	r2, [pc, #104]	; (800a514 <TIM_OC1_SetConfig+0x114>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d007      	beq.n	800a4be <TIM_OC1_SetConfig+0xbe>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a19      	ldr	r2, [pc, #100]	; (800a518 <TIM_OC1_SetConfig+0x118>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d003      	beq.n	800a4be <TIM_OC1_SetConfig+0xbe>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a18      	ldr	r2, [pc, #96]	; (800a51c <TIM_OC1_SetConfig+0x11c>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d111      	bne.n	800a4e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	621a      	str	r2, [r3, #32]
}
 800a4fc:	bf00      	nop
 800a4fe:	371c      	adds	r7, #28
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	fffeff8f 	.word	0xfffeff8f
 800a50c:	40010000 	.word	0x40010000
 800a510:	40010400 	.word	0x40010400
 800a514:	40014000 	.word	0x40014000
 800a518:	40014400 	.word	0x40014400
 800a51c:	40014800 	.word	0x40014800

0800a520 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	f023 0210 	bic.w	r2, r3, #16
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	4b34      	ldr	r3, [pc, #208]	; (800a61c <TIM_OC2_SetConfig+0xfc>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	021b      	lsls	r3, r3, #8
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4313      	orrs	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f023 0320 	bic.w	r3, r3, #32
 800a56a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	011b      	lsls	r3, r3, #4
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	4313      	orrs	r3, r2
 800a576:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a29      	ldr	r2, [pc, #164]	; (800a620 <TIM_OC2_SetConfig+0x100>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d003      	beq.n	800a588 <TIM_OC2_SetConfig+0x68>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a28      	ldr	r2, [pc, #160]	; (800a624 <TIM_OC2_SetConfig+0x104>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d10d      	bne.n	800a5a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a58e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	4313      	orrs	r3, r2
 800a59a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a1e      	ldr	r2, [pc, #120]	; (800a620 <TIM_OC2_SetConfig+0x100>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d00f      	beq.n	800a5cc <TIM_OC2_SetConfig+0xac>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a1d      	ldr	r2, [pc, #116]	; (800a624 <TIM_OC2_SetConfig+0x104>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d00b      	beq.n	800a5cc <TIM_OC2_SetConfig+0xac>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a1c      	ldr	r2, [pc, #112]	; (800a628 <TIM_OC2_SetConfig+0x108>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d007      	beq.n	800a5cc <TIM_OC2_SetConfig+0xac>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a1b      	ldr	r2, [pc, #108]	; (800a62c <TIM_OC2_SetConfig+0x10c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d003      	beq.n	800a5cc <TIM_OC2_SetConfig+0xac>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a1a      	ldr	r2, [pc, #104]	; (800a630 <TIM_OC2_SetConfig+0x110>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d113      	bne.n	800a5f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a5d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a5da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	693a      	ldr	r2, [r7, #16]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	699b      	ldr	r3, [r3, #24]
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	685a      	ldr	r2, [r3, #4]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	621a      	str	r2, [r3, #32]
}
 800a60e:	bf00      	nop
 800a610:	371c      	adds	r7, #28
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	feff8fff 	.word	0xfeff8fff
 800a620:	40010000 	.word	0x40010000
 800a624:	40010400 	.word	0x40010400
 800a628:	40014000 	.word	0x40014000
 800a62c:	40014400 	.word	0x40014400
 800a630:	40014800 	.word	0x40014800

0800a634 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a634:	b480      	push	{r7}
 800a636:	b087      	sub	sp, #28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	69db      	ldr	r3, [r3, #28]
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0303 	bic.w	r3, r3, #3
 800a66a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	4313      	orrs	r3, r2
 800a674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a67c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	021b      	lsls	r3, r3, #8
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	4313      	orrs	r3, r2
 800a688:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a27      	ldr	r2, [pc, #156]	; (800a72c <TIM_OC3_SetConfig+0xf8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d003      	beq.n	800a69a <TIM_OC3_SetConfig+0x66>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	4a26      	ldr	r2, [pc, #152]	; (800a730 <TIM_OC3_SetConfig+0xfc>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d10d      	bne.n	800a6b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a6a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	021b      	lsls	r3, r3, #8
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a6b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4a1c      	ldr	r2, [pc, #112]	; (800a72c <TIM_OC3_SetConfig+0xf8>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d00f      	beq.n	800a6de <TIM_OC3_SetConfig+0xaa>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a1b      	ldr	r2, [pc, #108]	; (800a730 <TIM_OC3_SetConfig+0xfc>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d00b      	beq.n	800a6de <TIM_OC3_SetConfig+0xaa>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4a1a      	ldr	r2, [pc, #104]	; (800a734 <TIM_OC3_SetConfig+0x100>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d007      	beq.n	800a6de <TIM_OC3_SetConfig+0xaa>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a19      	ldr	r2, [pc, #100]	; (800a738 <TIM_OC3_SetConfig+0x104>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d003      	beq.n	800a6de <TIM_OC3_SetConfig+0xaa>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a18      	ldr	r2, [pc, #96]	; (800a73c <TIM_OC3_SetConfig+0x108>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d113      	bne.n	800a706 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a6ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	011b      	lsls	r3, r3, #4
 800a6f4:	693a      	ldr	r2, [r7, #16]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	699b      	ldr	r3, [r3, #24]
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4313      	orrs	r3, r2
 800a704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	693a      	ldr	r2, [r7, #16]
 800a70a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	621a      	str	r2, [r3, #32]
}
 800a720:	bf00      	nop
 800a722:	371c      	adds	r7, #28
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	40010000 	.word	0x40010000
 800a730:	40010400 	.word	0x40010400
 800a734:	40014000 	.word	0x40014000
 800a738:	40014400 	.word	0x40014400
 800a73c:	40014800 	.word	0x40014800

0800a740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a740:	b480      	push	{r7}
 800a742:	b087      	sub	sp, #28
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6a1b      	ldr	r3, [r3, #32]
 800a74e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6a1b      	ldr	r3, [r3, #32]
 800a75a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a76e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	021b      	lsls	r3, r3, #8
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	4313      	orrs	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a78a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	031b      	lsls	r3, r3, #12
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	4313      	orrs	r3, r2
 800a796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a18      	ldr	r2, [pc, #96]	; (800a7fc <TIM_OC4_SetConfig+0xbc>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00f      	beq.n	800a7c0 <TIM_OC4_SetConfig+0x80>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a17      	ldr	r2, [pc, #92]	; (800a800 <TIM_OC4_SetConfig+0xc0>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00b      	beq.n	800a7c0 <TIM_OC4_SetConfig+0x80>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a16      	ldr	r2, [pc, #88]	; (800a804 <TIM_OC4_SetConfig+0xc4>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d007      	beq.n	800a7c0 <TIM_OC4_SetConfig+0x80>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a15      	ldr	r2, [pc, #84]	; (800a808 <TIM_OC4_SetConfig+0xc8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d003      	beq.n	800a7c0 <TIM_OC4_SetConfig+0x80>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a14      	ldr	r2, [pc, #80]	; (800a80c <TIM_OC4_SetConfig+0xcc>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d109      	bne.n	800a7d4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a7c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	019b      	lsls	r3, r3, #6
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	697a      	ldr	r2, [r7, #20]
 800a7d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	685a      	ldr	r2, [r3, #4]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	621a      	str	r2, [r3, #32]
}
 800a7ee:	bf00      	nop
 800a7f0:	371c      	adds	r7, #28
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	40010000 	.word	0x40010000
 800a800:	40010400 	.word	0x40010400
 800a804:	40014000 	.word	0x40014000
 800a808:	40014400 	.word	0x40014400
 800a80c:	40014800 	.word	0x40014800

0800a810 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a83e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a850:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	041b      	lsls	r3, r3, #16
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a17      	ldr	r2, [pc, #92]	; (800a8c0 <TIM_OC5_SetConfig+0xb0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d00f      	beq.n	800a886 <TIM_OC5_SetConfig+0x76>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a16      	ldr	r2, [pc, #88]	; (800a8c4 <TIM_OC5_SetConfig+0xb4>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d00b      	beq.n	800a886 <TIM_OC5_SetConfig+0x76>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <TIM_OC5_SetConfig+0xb8>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d007      	beq.n	800a886 <TIM_OC5_SetConfig+0x76>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4a14      	ldr	r2, [pc, #80]	; (800a8cc <TIM_OC5_SetConfig+0xbc>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d003      	beq.n	800a886 <TIM_OC5_SetConfig+0x76>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4a13      	ldr	r2, [pc, #76]	; (800a8d0 <TIM_OC5_SetConfig+0xc0>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d109      	bne.n	800a89a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a88c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	695b      	ldr	r3, [r3, #20]
 800a892:	021b      	lsls	r3, r3, #8
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	4313      	orrs	r3, r2
 800a898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68fa      	ldr	r2, [r7, #12]
 800a8a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	621a      	str	r2, [r3, #32]
}
 800a8b4:	bf00      	nop
 800a8b6:	371c      	adds	r7, #28
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr
 800a8c0:	40010000 	.word	0x40010000
 800a8c4:	40010400 	.word	0x40010400
 800a8c8:	40014000 	.word	0x40014000
 800a8cc:	40014400 	.word	0x40014400
 800a8d0:	40014800 	.word	0x40014800

0800a8d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a1b      	ldr	r3, [r3, #32]
 800a8ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	051b      	lsls	r3, r3, #20
 800a91e:	693a      	ldr	r2, [r7, #16]
 800a920:	4313      	orrs	r3, r2
 800a922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a18      	ldr	r2, [pc, #96]	; (800a988 <TIM_OC6_SetConfig+0xb4>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00f      	beq.n	800a94c <TIM_OC6_SetConfig+0x78>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a17      	ldr	r2, [pc, #92]	; (800a98c <TIM_OC6_SetConfig+0xb8>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d00b      	beq.n	800a94c <TIM_OC6_SetConfig+0x78>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a16      	ldr	r2, [pc, #88]	; (800a990 <TIM_OC6_SetConfig+0xbc>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d007      	beq.n	800a94c <TIM_OC6_SetConfig+0x78>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a15      	ldr	r2, [pc, #84]	; (800a994 <TIM_OC6_SetConfig+0xc0>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d003      	beq.n	800a94c <TIM_OC6_SetConfig+0x78>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a14      	ldr	r2, [pc, #80]	; (800a998 <TIM_OC6_SetConfig+0xc4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d109      	bne.n	800a960 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a952:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	695b      	ldr	r3, [r3, #20]
 800a958:	029b      	lsls	r3, r3, #10
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	693a      	ldr	r2, [r7, #16]
 800a978:	621a      	str	r2, [r3, #32]
}
 800a97a:	bf00      	nop
 800a97c:	371c      	adds	r7, #28
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	40010000 	.word	0x40010000
 800a98c:	40010400 	.word	0x40010400
 800a990:	40014000 	.word	0x40014000
 800a994:	40014400 	.word	0x40014400
 800a998:	40014800 	.word	0x40014800

0800a99c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	f023 0201 	bic.w	r2, r3, #1
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f023 030a 	bic.w	r3, r3, #10
 800a9d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	621a      	str	r2, [r3, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b087      	sub	sp, #28
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	60b9      	str	r1, [r7, #8]
 800aa04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0210 	bic.w	r2, r3, #16
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	031b      	lsls	r3, r3, #12
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	011b      	lsls	r3, r3, #4
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
	...

0800aa5c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	4b09      	ldr	r3, [pc, #36]	; (800aa94 <TIM_ITRx_SetConfig+0x38>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa74:	683a      	ldr	r2, [r7, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	f043 0307 	orr.w	r3, r3, #7
 800aa7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	609a      	str	r2, [r3, #8]
}
 800aa86:	bf00      	nop
 800aa88:	3714      	adds	r7, #20
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	ffcfff8f 	.word	0xffcfff8f

0800aa98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b087      	sub	sp, #28
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	60f8      	str	r0, [r7, #12]
 800aaa0:	60b9      	str	r1, [r7, #8]
 800aaa2:	607a      	str	r2, [r7, #4]
 800aaa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	021a      	lsls	r2, r3, #8
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	431a      	orrs	r2, r3
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	697a      	ldr	r2, [r7, #20]
 800aaca:	609a      	str	r2, [r3, #8]
}
 800aacc:	bf00      	nop
 800aace:	371c      	adds	r7, #28
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f003 031f 	and.w	r3, r3, #31
 800aaea:	2201      	movs	r2, #1
 800aaec:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6a1a      	ldr	r2, [r3, #32]
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	43db      	mvns	r3, r3
 800aafa:	401a      	ands	r2, r3
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6a1a      	ldr	r2, [r3, #32]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f003 031f 	and.w	r3, r3, #31
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab10:	431a      	orrs	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	621a      	str	r2, [r3, #32]
}
 800ab16:	bf00      	nop
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d101      	bne.n	800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab38:	2302      	movs	r3, #2
 800ab3a:	e068      	b.n	800ac0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2201      	movs	r2, #1
 800ab40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2202      	movs	r2, #2
 800ab48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a2e      	ldr	r2, [pc, #184]	; (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d004      	beq.n	800ab70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a2d      	ldr	r2, [pc, #180]	; (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d108      	bne.n	800ab82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a1e      	ldr	r2, [pc, #120]	; (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d01d      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abae:	d018      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a1b      	ldr	r2, [pc, #108]	; (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d013      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a1a      	ldr	r2, [pc, #104]	; (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d00e      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a18      	ldr	r2, [pc, #96]	; (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d009      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a13      	ldr	r2, [pc, #76]	; (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d004      	beq.n	800abe2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a14      	ldr	r2, [pc, #80]	; (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d10c      	bne.n	800abfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3714      	adds	r7, #20
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	40010000 	.word	0x40010000
 800ac20:	40010400 	.word	0x40010400
 800ac24:	40000400 	.word	0x40000400
 800ac28:	40000800 	.word	0x40000800
 800ac2c:	40000c00 	.word	0x40000c00
 800ac30:	40001800 	.word	0x40001800

0800ac34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e065      	b.n	800ad1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	689b      	ldr	r3, [r3, #8]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	691b      	ldr	r3, [r3, #16]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	695b      	ldr	r3, [r3, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	041b      	lsls	r3, r3, #16
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a16      	ldr	r2, [pc, #88]	; (800ad28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d004      	beq.n	800acde <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a14      	ldr	r2, [pc, #80]	; (800ad2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d115      	bne.n	800ad0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace8:	051b      	lsls	r3, r3, #20
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	69db      	ldr	r3, [r3, #28]
 800acf8:	4313      	orrs	r3, r2
 800acfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	6a1b      	ldr	r3, [r3, #32]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68fa      	ldr	r2, [r7, #12]
 800ad10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3714      	adds	r7, #20
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr
 800ad28:	40010000 	.word	0x40010000
 800ad2c:	40010400 	.word	0x40010400

0800ad30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e042      	b.n	800ae04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d106      	bne.n	800ad96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7f7 f847 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2224      	movs	r2, #36	; 0x24
 800ad9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f022 0201 	bic.w	r2, r2, #1
 800adac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 f8c2 	bl	800af38 <UART_SetConfig>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d101      	bne.n	800adbe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e022      	b.n	800ae04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d002      	beq.n	800adcc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fe16 	bl	800b9f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685a      	ldr	r2, [r3, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	689a      	ldr	r2, [r3, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800adea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f042 0201 	orr.w	r2, r2, #1
 800adfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 fe9d 	bl	800bb3c <UART_CheckIdleState>
 800ae02:	4603      	mov	r3, r0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af02      	add	r7, sp, #8
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	603b      	str	r3, [r7, #0]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	f040 8083 	bne.w	800af2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <HAL_UART_Transmit+0x28>
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d101      	bne.n	800ae38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e07b      	b.n	800af30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d101      	bne.n	800ae46 <HAL_UART_Transmit+0x3a>
 800ae42:	2302      	movs	r3, #2
 800ae44:	e074      	b.n	800af30 <HAL_UART_Transmit+0x124>
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2221      	movs	r2, #33	; 0x21
 800ae5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae5e:	f7f7 fa97 	bl	8002390 <HAL_GetTick>
 800ae62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	88fa      	ldrh	r2, [r7, #6]
 800ae68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	88fa      	ldrh	r2, [r7, #6]
 800ae70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae7c:	d108      	bne.n	800ae90 <HAL_UART_Transmit+0x84>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d104      	bne.n	800ae90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	61bb      	str	r3, [r7, #24]
 800ae8e:	e003      	b.n	800ae98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae94:	2300      	movs	r3, #0
 800ae96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800aea0:	e02c      	b.n	800aefc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	9300      	str	r3, [sp, #0]
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2180      	movs	r1, #128	; 0x80
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 fe90 	bl	800bbd2 <UART_WaitOnFlagUntilTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e039      	b.n	800af30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10b      	bne.n	800aeda <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aed0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	3302      	adds	r3, #2
 800aed6:	61bb      	str	r3, [r7, #24]
 800aed8:	e007      	b.n	800aeea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	3301      	adds	r3, #1
 800aee8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	3b01      	subs	r3, #1
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800af02:	b29b      	uxth	r3, r3
 800af04:	2b00      	cmp	r3, #0
 800af06:	d1cc      	bne.n	800aea2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	2200      	movs	r2, #0
 800af10:	2140      	movs	r1, #64	; 0x40
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 fe5d 	bl	800bbd2 <UART_WaitOnFlagUntilTimeout>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e006      	b.n	800af30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2220      	movs	r2, #32
 800af26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	e000      	b.n	800af30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800af2e:	2302      	movs	r3, #2
  }
}
 800af30:	4618      	mov	r0, r3
 800af32:	3720      	adds	r7, #32
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}

0800af38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af38:	b5b0      	push	{r4, r5, r7, lr}
 800af3a:	b08e      	sub	sp, #56	; 0x38
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	689a      	ldr	r2, [r3, #8]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	691b      	ldr	r3, [r3, #16]
 800af4e:	431a      	orrs	r2, r3
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	431a      	orrs	r2, r3
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	69db      	ldr	r3, [r3, #28]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	4bbf      	ldr	r3, [pc, #764]	; (800b264 <UART_SetConfig+0x32c>)
 800af66:	4013      	ands	r3, r2
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	6812      	ldr	r2, [r2, #0]
 800af6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af6e:	430b      	orrs	r3, r1
 800af70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68da      	ldr	r2, [r3, #12]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	430a      	orrs	r2, r1
 800af86:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4ab5      	ldr	r2, [pc, #724]	; (800b268 <UART_SetConfig+0x330>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d004      	beq.n	800afa2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af9e:	4313      	orrs	r3, r2
 800afa0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	4bb0      	ldr	r3, [pc, #704]	; (800b26c <UART_SetConfig+0x334>)
 800afaa:	4013      	ands	r3, r2
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	6812      	ldr	r2, [r2, #0]
 800afb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800afb2:	430b      	orrs	r3, r1
 800afb4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	f023 010f 	bic.w	r1, r3, #15
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	430a      	orrs	r2, r1
 800afca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4aa7      	ldr	r2, [pc, #668]	; (800b270 <UART_SetConfig+0x338>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d176      	bne.n	800b0c4 <UART_SetConfig+0x18c>
 800afd6:	4ba7      	ldr	r3, [pc, #668]	; (800b274 <UART_SetConfig+0x33c>)
 800afd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afde:	2b28      	cmp	r3, #40	; 0x28
 800afe0:	d86c      	bhi.n	800b0bc <UART_SetConfig+0x184>
 800afe2:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <UART_SetConfig+0xb0>)
 800afe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe8:	0800b08d 	.word	0x0800b08d
 800afec:	0800b0bd 	.word	0x0800b0bd
 800aff0:	0800b0bd 	.word	0x0800b0bd
 800aff4:	0800b0bd 	.word	0x0800b0bd
 800aff8:	0800b0bd 	.word	0x0800b0bd
 800affc:	0800b0bd 	.word	0x0800b0bd
 800b000:	0800b0bd 	.word	0x0800b0bd
 800b004:	0800b0bd 	.word	0x0800b0bd
 800b008:	0800b095 	.word	0x0800b095
 800b00c:	0800b0bd 	.word	0x0800b0bd
 800b010:	0800b0bd 	.word	0x0800b0bd
 800b014:	0800b0bd 	.word	0x0800b0bd
 800b018:	0800b0bd 	.word	0x0800b0bd
 800b01c:	0800b0bd 	.word	0x0800b0bd
 800b020:	0800b0bd 	.word	0x0800b0bd
 800b024:	0800b0bd 	.word	0x0800b0bd
 800b028:	0800b09d 	.word	0x0800b09d
 800b02c:	0800b0bd 	.word	0x0800b0bd
 800b030:	0800b0bd 	.word	0x0800b0bd
 800b034:	0800b0bd 	.word	0x0800b0bd
 800b038:	0800b0bd 	.word	0x0800b0bd
 800b03c:	0800b0bd 	.word	0x0800b0bd
 800b040:	0800b0bd 	.word	0x0800b0bd
 800b044:	0800b0bd 	.word	0x0800b0bd
 800b048:	0800b0a5 	.word	0x0800b0a5
 800b04c:	0800b0bd 	.word	0x0800b0bd
 800b050:	0800b0bd 	.word	0x0800b0bd
 800b054:	0800b0bd 	.word	0x0800b0bd
 800b058:	0800b0bd 	.word	0x0800b0bd
 800b05c:	0800b0bd 	.word	0x0800b0bd
 800b060:	0800b0bd 	.word	0x0800b0bd
 800b064:	0800b0bd 	.word	0x0800b0bd
 800b068:	0800b0ad 	.word	0x0800b0ad
 800b06c:	0800b0bd 	.word	0x0800b0bd
 800b070:	0800b0bd 	.word	0x0800b0bd
 800b074:	0800b0bd 	.word	0x0800b0bd
 800b078:	0800b0bd 	.word	0x0800b0bd
 800b07c:	0800b0bd 	.word	0x0800b0bd
 800b080:	0800b0bd 	.word	0x0800b0bd
 800b084:	0800b0bd 	.word	0x0800b0bd
 800b088:	0800b0b5 	.word	0x0800b0b5
 800b08c:	2301      	movs	r3, #1
 800b08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b092:	e222      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b094:	2304      	movs	r3, #4
 800b096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b09a:	e21e      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b09c:	2308      	movs	r3, #8
 800b09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a2:	e21a      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b0a4:	2310      	movs	r3, #16
 800b0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0aa:	e216      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b0ac:	2320      	movs	r3, #32
 800b0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0b2:	e212      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b0b4:	2340      	movs	r3, #64	; 0x40
 800b0b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0ba:	e20e      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b0bc:	2380      	movs	r3, #128	; 0x80
 800b0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0c2:	e20a      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a6b      	ldr	r2, [pc, #428]	; (800b278 <UART_SetConfig+0x340>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d130      	bne.n	800b130 <UART_SetConfig+0x1f8>
 800b0ce:	4b69      	ldr	r3, [pc, #420]	; (800b274 <UART_SetConfig+0x33c>)
 800b0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d2:	f003 0307 	and.w	r3, r3, #7
 800b0d6:	2b05      	cmp	r3, #5
 800b0d8:	d826      	bhi.n	800b128 <UART_SetConfig+0x1f0>
 800b0da:	a201      	add	r2, pc, #4	; (adr r2, 800b0e0 <UART_SetConfig+0x1a8>)
 800b0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e0:	0800b0f9 	.word	0x0800b0f9
 800b0e4:	0800b101 	.word	0x0800b101
 800b0e8:	0800b109 	.word	0x0800b109
 800b0ec:	0800b111 	.word	0x0800b111
 800b0f0:	0800b119 	.word	0x0800b119
 800b0f4:	0800b121 	.word	0x0800b121
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0fe:	e1ec      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b100:	2304      	movs	r3, #4
 800b102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b106:	e1e8      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b108:	2308      	movs	r3, #8
 800b10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b10e:	e1e4      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b110:	2310      	movs	r3, #16
 800b112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b116:	e1e0      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b118:	2320      	movs	r3, #32
 800b11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b11e:	e1dc      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b120:	2340      	movs	r3, #64	; 0x40
 800b122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b126:	e1d8      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b128:	2380      	movs	r3, #128	; 0x80
 800b12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b12e:	e1d4      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a51      	ldr	r2, [pc, #324]	; (800b27c <UART_SetConfig+0x344>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d130      	bne.n	800b19c <UART_SetConfig+0x264>
 800b13a:	4b4e      	ldr	r3, [pc, #312]	; (800b274 <UART_SetConfig+0x33c>)
 800b13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b13e:	f003 0307 	and.w	r3, r3, #7
 800b142:	2b05      	cmp	r3, #5
 800b144:	d826      	bhi.n	800b194 <UART_SetConfig+0x25c>
 800b146:	a201      	add	r2, pc, #4	; (adr r2, 800b14c <UART_SetConfig+0x214>)
 800b148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b14c:	0800b165 	.word	0x0800b165
 800b150:	0800b16d 	.word	0x0800b16d
 800b154:	0800b175 	.word	0x0800b175
 800b158:	0800b17d 	.word	0x0800b17d
 800b15c:	0800b185 	.word	0x0800b185
 800b160:	0800b18d 	.word	0x0800b18d
 800b164:	2300      	movs	r3, #0
 800b166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16a:	e1b6      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b16c:	2304      	movs	r3, #4
 800b16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b172:	e1b2      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b174:	2308      	movs	r3, #8
 800b176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b17a:	e1ae      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b17c:	2310      	movs	r3, #16
 800b17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b182:	e1aa      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b184:	2320      	movs	r3, #32
 800b186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18a:	e1a6      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b18c:	2340      	movs	r3, #64	; 0x40
 800b18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b192:	e1a2      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b194:	2380      	movs	r3, #128	; 0x80
 800b196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19a:	e19e      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a37      	ldr	r2, [pc, #220]	; (800b280 <UART_SetConfig+0x348>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d130      	bne.n	800b208 <UART_SetConfig+0x2d0>
 800b1a6:	4b33      	ldr	r3, [pc, #204]	; (800b274 <UART_SetConfig+0x33c>)
 800b1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1aa:	f003 0307 	and.w	r3, r3, #7
 800b1ae:	2b05      	cmp	r3, #5
 800b1b0:	d826      	bhi.n	800b200 <UART_SetConfig+0x2c8>
 800b1b2:	a201      	add	r2, pc, #4	; (adr r2, 800b1b8 <UART_SetConfig+0x280>)
 800b1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b8:	0800b1d1 	.word	0x0800b1d1
 800b1bc:	0800b1d9 	.word	0x0800b1d9
 800b1c0:	0800b1e1 	.word	0x0800b1e1
 800b1c4:	0800b1e9 	.word	0x0800b1e9
 800b1c8:	0800b1f1 	.word	0x0800b1f1
 800b1cc:	0800b1f9 	.word	0x0800b1f9
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d6:	e180      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b1d8:	2304      	movs	r3, #4
 800b1da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1de:	e17c      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b1e0:	2308      	movs	r3, #8
 800b1e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e6:	e178      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b1e8:	2310      	movs	r3, #16
 800b1ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ee:	e174      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b1f0:	2320      	movs	r3, #32
 800b1f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f6:	e170      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b1f8:	2340      	movs	r3, #64	; 0x40
 800b1fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fe:	e16c      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b200:	2380      	movs	r3, #128	; 0x80
 800b202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b206:	e168      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a1d      	ldr	r2, [pc, #116]	; (800b284 <UART_SetConfig+0x34c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d142      	bne.n	800b298 <UART_SetConfig+0x360>
 800b212:	4b18      	ldr	r3, [pc, #96]	; (800b274 <UART_SetConfig+0x33c>)
 800b214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b216:	f003 0307 	and.w	r3, r3, #7
 800b21a:	2b05      	cmp	r3, #5
 800b21c:	d838      	bhi.n	800b290 <UART_SetConfig+0x358>
 800b21e:	a201      	add	r2, pc, #4	; (adr r2, 800b224 <UART_SetConfig+0x2ec>)
 800b220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b224:	0800b23d 	.word	0x0800b23d
 800b228:	0800b245 	.word	0x0800b245
 800b22c:	0800b24d 	.word	0x0800b24d
 800b230:	0800b255 	.word	0x0800b255
 800b234:	0800b25d 	.word	0x0800b25d
 800b238:	0800b289 	.word	0x0800b289
 800b23c:	2300      	movs	r3, #0
 800b23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b242:	e14a      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b244:	2304      	movs	r3, #4
 800b246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24a:	e146      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b24c:	2308      	movs	r3, #8
 800b24e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b252:	e142      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b254:	2310      	movs	r3, #16
 800b256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25a:	e13e      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b25c:	2320      	movs	r3, #32
 800b25e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b262:	e13a      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b264:	cfff69f3 	.word	0xcfff69f3
 800b268:	58000c00 	.word	0x58000c00
 800b26c:	11fff4ff 	.word	0x11fff4ff
 800b270:	40011000 	.word	0x40011000
 800b274:	58024400 	.word	0x58024400
 800b278:	40004400 	.word	0x40004400
 800b27c:	40004800 	.word	0x40004800
 800b280:	40004c00 	.word	0x40004c00
 800b284:	40005000 	.word	0x40005000
 800b288:	2340      	movs	r3, #64	; 0x40
 800b28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b28e:	e124      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b290:	2380      	movs	r3, #128	; 0x80
 800b292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b296:	e120      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4acc      	ldr	r2, [pc, #816]	; (800b5d0 <UART_SetConfig+0x698>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d176      	bne.n	800b390 <UART_SetConfig+0x458>
 800b2a2:	4bcc      	ldr	r3, [pc, #816]	; (800b5d4 <UART_SetConfig+0x69c>)
 800b2a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2aa:	2b28      	cmp	r3, #40	; 0x28
 800b2ac:	d86c      	bhi.n	800b388 <UART_SetConfig+0x450>
 800b2ae:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <UART_SetConfig+0x37c>)
 800b2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b4:	0800b359 	.word	0x0800b359
 800b2b8:	0800b389 	.word	0x0800b389
 800b2bc:	0800b389 	.word	0x0800b389
 800b2c0:	0800b389 	.word	0x0800b389
 800b2c4:	0800b389 	.word	0x0800b389
 800b2c8:	0800b389 	.word	0x0800b389
 800b2cc:	0800b389 	.word	0x0800b389
 800b2d0:	0800b389 	.word	0x0800b389
 800b2d4:	0800b361 	.word	0x0800b361
 800b2d8:	0800b389 	.word	0x0800b389
 800b2dc:	0800b389 	.word	0x0800b389
 800b2e0:	0800b389 	.word	0x0800b389
 800b2e4:	0800b389 	.word	0x0800b389
 800b2e8:	0800b389 	.word	0x0800b389
 800b2ec:	0800b389 	.word	0x0800b389
 800b2f0:	0800b389 	.word	0x0800b389
 800b2f4:	0800b369 	.word	0x0800b369
 800b2f8:	0800b389 	.word	0x0800b389
 800b2fc:	0800b389 	.word	0x0800b389
 800b300:	0800b389 	.word	0x0800b389
 800b304:	0800b389 	.word	0x0800b389
 800b308:	0800b389 	.word	0x0800b389
 800b30c:	0800b389 	.word	0x0800b389
 800b310:	0800b389 	.word	0x0800b389
 800b314:	0800b371 	.word	0x0800b371
 800b318:	0800b389 	.word	0x0800b389
 800b31c:	0800b389 	.word	0x0800b389
 800b320:	0800b389 	.word	0x0800b389
 800b324:	0800b389 	.word	0x0800b389
 800b328:	0800b389 	.word	0x0800b389
 800b32c:	0800b389 	.word	0x0800b389
 800b330:	0800b389 	.word	0x0800b389
 800b334:	0800b379 	.word	0x0800b379
 800b338:	0800b389 	.word	0x0800b389
 800b33c:	0800b389 	.word	0x0800b389
 800b340:	0800b389 	.word	0x0800b389
 800b344:	0800b389 	.word	0x0800b389
 800b348:	0800b389 	.word	0x0800b389
 800b34c:	0800b389 	.word	0x0800b389
 800b350:	0800b389 	.word	0x0800b389
 800b354:	0800b381 	.word	0x0800b381
 800b358:	2301      	movs	r3, #1
 800b35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b35e:	e0bc      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b360:	2304      	movs	r3, #4
 800b362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b366:	e0b8      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b368:	2308      	movs	r3, #8
 800b36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b36e:	e0b4      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b370:	2310      	movs	r3, #16
 800b372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b376:	e0b0      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b378:	2320      	movs	r3, #32
 800b37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b37e:	e0ac      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b380:	2340      	movs	r3, #64	; 0x40
 800b382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b386:	e0a8      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b388:	2380      	movs	r3, #128	; 0x80
 800b38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b38e:	e0a4      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a90      	ldr	r2, [pc, #576]	; (800b5d8 <UART_SetConfig+0x6a0>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d130      	bne.n	800b3fc <UART_SetConfig+0x4c4>
 800b39a:	4b8e      	ldr	r3, [pc, #568]	; (800b5d4 <UART_SetConfig+0x69c>)
 800b39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39e:	f003 0307 	and.w	r3, r3, #7
 800b3a2:	2b05      	cmp	r3, #5
 800b3a4:	d826      	bhi.n	800b3f4 <UART_SetConfig+0x4bc>
 800b3a6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <UART_SetConfig+0x474>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3c5 	.word	0x0800b3c5
 800b3b0:	0800b3cd 	.word	0x0800b3cd
 800b3b4:	0800b3d5 	.word	0x0800b3d5
 800b3b8:	0800b3dd 	.word	0x0800b3dd
 800b3bc:	0800b3e5 	.word	0x0800b3e5
 800b3c0:	0800b3ed 	.word	0x0800b3ed
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ca:	e086      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b3cc:	2304      	movs	r3, #4
 800b3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3d2:	e082      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b3d4:	2308      	movs	r3, #8
 800b3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3da:	e07e      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b3dc:	2310      	movs	r3, #16
 800b3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3e2:	e07a      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b3e4:	2320      	movs	r3, #32
 800b3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3ea:	e076      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b3ec:	2340      	movs	r3, #64	; 0x40
 800b3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3f2:	e072      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b3f4:	2380      	movs	r3, #128	; 0x80
 800b3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b3fa:	e06e      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a76      	ldr	r2, [pc, #472]	; (800b5dc <UART_SetConfig+0x6a4>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d130      	bne.n	800b468 <UART_SetConfig+0x530>
 800b406:	4b73      	ldr	r3, [pc, #460]	; (800b5d4 <UART_SetConfig+0x69c>)
 800b408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40a:	f003 0307 	and.w	r3, r3, #7
 800b40e:	2b05      	cmp	r3, #5
 800b410:	d826      	bhi.n	800b460 <UART_SetConfig+0x528>
 800b412:	a201      	add	r2, pc, #4	; (adr r2, 800b418 <UART_SetConfig+0x4e0>)
 800b414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b418:	0800b431 	.word	0x0800b431
 800b41c:	0800b439 	.word	0x0800b439
 800b420:	0800b441 	.word	0x0800b441
 800b424:	0800b449 	.word	0x0800b449
 800b428:	0800b451 	.word	0x0800b451
 800b42c:	0800b459 	.word	0x0800b459
 800b430:	2300      	movs	r3, #0
 800b432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b436:	e050      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b438:	2304      	movs	r3, #4
 800b43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b43e:	e04c      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b440:	2308      	movs	r3, #8
 800b442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b446:	e048      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b448:	2310      	movs	r3, #16
 800b44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b44e:	e044      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b450:	2320      	movs	r3, #32
 800b452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b456:	e040      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b458:	2340      	movs	r3, #64	; 0x40
 800b45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b45e:	e03c      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b460:	2380      	movs	r3, #128	; 0x80
 800b462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b466:	e038      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a5c      	ldr	r2, [pc, #368]	; (800b5e0 <UART_SetConfig+0x6a8>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d130      	bne.n	800b4d4 <UART_SetConfig+0x59c>
 800b472:	4b58      	ldr	r3, [pc, #352]	; (800b5d4 <UART_SetConfig+0x69c>)
 800b474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b476:	f003 0307 	and.w	r3, r3, #7
 800b47a:	2b05      	cmp	r3, #5
 800b47c:	d826      	bhi.n	800b4cc <UART_SetConfig+0x594>
 800b47e:	a201      	add	r2, pc, #4	; (adr r2, 800b484 <UART_SetConfig+0x54c>)
 800b480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b484:	0800b49d 	.word	0x0800b49d
 800b488:	0800b4a5 	.word	0x0800b4a5
 800b48c:	0800b4ad 	.word	0x0800b4ad
 800b490:	0800b4b5 	.word	0x0800b4b5
 800b494:	0800b4bd 	.word	0x0800b4bd
 800b498:	0800b4c5 	.word	0x0800b4c5
 800b49c:	2302      	movs	r3, #2
 800b49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4a2:	e01a      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b4a4:	2304      	movs	r3, #4
 800b4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4aa:	e016      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b4ac:	2308      	movs	r3, #8
 800b4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4b2:	e012      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b4b4:	2310      	movs	r3, #16
 800b4b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ba:	e00e      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b4bc:	2320      	movs	r3, #32
 800b4be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4c2:	e00a      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b4c4:	2340      	movs	r3, #64	; 0x40
 800b4c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4ca:	e006      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b4cc:	2380      	movs	r3, #128	; 0x80
 800b4ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b4d2:	e002      	b.n	800b4da <UART_SetConfig+0x5a2>
 800b4d4:	2380      	movs	r3, #128	; 0x80
 800b4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a40      	ldr	r2, [pc, #256]	; (800b5e0 <UART_SetConfig+0x6a8>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	f040 80ef 	bne.w	800b6c4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b4e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4ea:	2b20      	cmp	r3, #32
 800b4ec:	dc46      	bgt.n	800b57c <UART_SetConfig+0x644>
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	f2c0 8081 	blt.w	800b5f6 <UART_SetConfig+0x6be>
 800b4f4:	3b02      	subs	r3, #2
 800b4f6:	2b1e      	cmp	r3, #30
 800b4f8:	d87d      	bhi.n	800b5f6 <UART_SetConfig+0x6be>
 800b4fa:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <UART_SetConfig+0x5c8>)
 800b4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b500:	0800b583 	.word	0x0800b583
 800b504:	0800b5f7 	.word	0x0800b5f7
 800b508:	0800b58b 	.word	0x0800b58b
 800b50c:	0800b5f7 	.word	0x0800b5f7
 800b510:	0800b5f7 	.word	0x0800b5f7
 800b514:	0800b5f7 	.word	0x0800b5f7
 800b518:	0800b59b 	.word	0x0800b59b
 800b51c:	0800b5f7 	.word	0x0800b5f7
 800b520:	0800b5f7 	.word	0x0800b5f7
 800b524:	0800b5f7 	.word	0x0800b5f7
 800b528:	0800b5f7 	.word	0x0800b5f7
 800b52c:	0800b5f7 	.word	0x0800b5f7
 800b530:	0800b5f7 	.word	0x0800b5f7
 800b534:	0800b5f7 	.word	0x0800b5f7
 800b538:	0800b5ab 	.word	0x0800b5ab
 800b53c:	0800b5f7 	.word	0x0800b5f7
 800b540:	0800b5f7 	.word	0x0800b5f7
 800b544:	0800b5f7 	.word	0x0800b5f7
 800b548:	0800b5f7 	.word	0x0800b5f7
 800b54c:	0800b5f7 	.word	0x0800b5f7
 800b550:	0800b5f7 	.word	0x0800b5f7
 800b554:	0800b5f7 	.word	0x0800b5f7
 800b558:	0800b5f7 	.word	0x0800b5f7
 800b55c:	0800b5f7 	.word	0x0800b5f7
 800b560:	0800b5f7 	.word	0x0800b5f7
 800b564:	0800b5f7 	.word	0x0800b5f7
 800b568:	0800b5f7 	.word	0x0800b5f7
 800b56c:	0800b5f7 	.word	0x0800b5f7
 800b570:	0800b5f7 	.word	0x0800b5f7
 800b574:	0800b5f7 	.word	0x0800b5f7
 800b578:	0800b5e9 	.word	0x0800b5e9
 800b57c:	2b40      	cmp	r3, #64	; 0x40
 800b57e:	d036      	beq.n	800b5ee <UART_SetConfig+0x6b6>
 800b580:	e039      	b.n	800b5f6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b582:	f7fd fbb1 	bl	8008ce8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b586:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b588:	e03b      	b.n	800b602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b58a:	f107 0314 	add.w	r3, r7, #20
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fd fbc0 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b598:	e033      	b.n	800b602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b59a:	f107 0308 	add.w	r3, r7, #8
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fd fd0c 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5a8:	e02b      	b.n	800b602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5aa:	4b0a      	ldr	r3, [pc, #40]	; (800b5d4 <UART_SetConfig+0x69c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 0320 	and.w	r3, r3, #32
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d009      	beq.n	800b5ca <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5b6:	4b07      	ldr	r3, [pc, #28]	; (800b5d4 <UART_SetConfig+0x69c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	08db      	lsrs	r3, r3, #3
 800b5bc:	f003 0303 	and.w	r3, r3, #3
 800b5c0:	4a08      	ldr	r2, [pc, #32]	; (800b5e4 <UART_SetConfig+0x6ac>)
 800b5c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5c8:	e01b      	b.n	800b602 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b5ca:	4b06      	ldr	r3, [pc, #24]	; (800b5e4 <UART_SetConfig+0x6ac>)
 800b5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5ce:	e018      	b.n	800b602 <UART_SetConfig+0x6ca>
 800b5d0:	40011400 	.word	0x40011400
 800b5d4:	58024400 	.word	0x58024400
 800b5d8:	40007800 	.word	0x40007800
 800b5dc:	40007c00 	.word	0x40007c00
 800b5e0:	58000c00 	.word	0x58000c00
 800b5e4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5e8:	4bc4      	ldr	r3, [pc, #784]	; (800b8fc <UART_SetConfig+0x9c4>)
 800b5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5ec:	e009      	b.n	800b602 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5f4:	e005      	b.n	800b602 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b600:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b604:	2b00      	cmp	r3, #0
 800b606:	f000 81da 	beq.w	800b9be <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	4abc      	ldr	r2, [pc, #752]	; (800b900 <UART_SetConfig+0x9c8>)
 800b610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b614:	461a      	mov	r2, r3
 800b616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b618:	fbb3 f3f2 	udiv	r3, r3, r2
 800b61c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	4613      	mov	r3, r2
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	4413      	add	r3, r2
 800b628:	6a3a      	ldr	r2, [r7, #32]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d305      	bcc.n	800b63a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b634:	6a3a      	ldr	r2, [r7, #32]
 800b636:	429a      	cmp	r2, r3
 800b638:	d903      	bls.n	800b642 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b640:	e1bd      	b.n	800b9be <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b644:	4618      	mov	r0, r3
 800b646:	f04f 0100 	mov.w	r1, #0
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64e:	4aac      	ldr	r2, [pc, #688]	; (800b900 <UART_SetConfig+0x9c8>)
 800b650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b654:	b29a      	uxth	r2, r3
 800b656:	f04f 0300 	mov.w	r3, #0
 800b65a:	f7f4 fe99 	bl	8000390 <__aeabi_uldivmod>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4610      	mov	r0, r2
 800b664:	4619      	mov	r1, r3
 800b666:	f04f 0200 	mov.w	r2, #0
 800b66a:	f04f 0300 	mov.w	r3, #0
 800b66e:	020b      	lsls	r3, r1, #8
 800b670:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b674:	0202      	lsls	r2, r0, #8
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	6849      	ldr	r1, [r1, #4]
 800b67a:	0849      	lsrs	r1, r1, #1
 800b67c:	4608      	mov	r0, r1
 800b67e:	f04f 0100 	mov.w	r1, #0
 800b682:	1814      	adds	r4, r2, r0
 800b684:	eb43 0501 	adc.w	r5, r3, r1
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	461a      	mov	r2, r3
 800b68e:	f04f 0300 	mov.w	r3, #0
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 fe7b 	bl	8000390 <__aeabi_uldivmod>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	4613      	mov	r3, r2
 800b6a0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b6a8:	d308      	bcc.n	800b6bc <UART_SetConfig+0x784>
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6b0:	d204      	bcs.n	800b6bc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6b8:	60da      	str	r2, [r3, #12]
 800b6ba:	e180      	b.n	800b9be <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b6c2:	e17c      	b.n	800b9be <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6cc:	f040 80bf 	bne.w	800b84e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b6d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	dc49      	bgt.n	800b76c <UART_SetConfig+0x834>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	db7c      	blt.n	800b7d6 <UART_SetConfig+0x89e>
 800b6dc:	2b20      	cmp	r3, #32
 800b6de:	d87a      	bhi.n	800b7d6 <UART_SetConfig+0x89e>
 800b6e0:	a201      	add	r2, pc, #4	; (adr r2, 800b6e8 <UART_SetConfig+0x7b0>)
 800b6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e6:	bf00      	nop
 800b6e8:	0800b773 	.word	0x0800b773
 800b6ec:	0800b77b 	.word	0x0800b77b
 800b6f0:	0800b7d7 	.word	0x0800b7d7
 800b6f4:	0800b7d7 	.word	0x0800b7d7
 800b6f8:	0800b783 	.word	0x0800b783
 800b6fc:	0800b7d7 	.word	0x0800b7d7
 800b700:	0800b7d7 	.word	0x0800b7d7
 800b704:	0800b7d7 	.word	0x0800b7d7
 800b708:	0800b793 	.word	0x0800b793
 800b70c:	0800b7d7 	.word	0x0800b7d7
 800b710:	0800b7d7 	.word	0x0800b7d7
 800b714:	0800b7d7 	.word	0x0800b7d7
 800b718:	0800b7d7 	.word	0x0800b7d7
 800b71c:	0800b7d7 	.word	0x0800b7d7
 800b720:	0800b7d7 	.word	0x0800b7d7
 800b724:	0800b7d7 	.word	0x0800b7d7
 800b728:	0800b7a3 	.word	0x0800b7a3
 800b72c:	0800b7d7 	.word	0x0800b7d7
 800b730:	0800b7d7 	.word	0x0800b7d7
 800b734:	0800b7d7 	.word	0x0800b7d7
 800b738:	0800b7d7 	.word	0x0800b7d7
 800b73c:	0800b7d7 	.word	0x0800b7d7
 800b740:	0800b7d7 	.word	0x0800b7d7
 800b744:	0800b7d7 	.word	0x0800b7d7
 800b748:	0800b7d7 	.word	0x0800b7d7
 800b74c:	0800b7d7 	.word	0x0800b7d7
 800b750:	0800b7d7 	.word	0x0800b7d7
 800b754:	0800b7d7 	.word	0x0800b7d7
 800b758:	0800b7d7 	.word	0x0800b7d7
 800b75c:	0800b7d7 	.word	0x0800b7d7
 800b760:	0800b7d7 	.word	0x0800b7d7
 800b764:	0800b7d7 	.word	0x0800b7d7
 800b768:	0800b7c9 	.word	0x0800b7c9
 800b76c:	2b40      	cmp	r3, #64	; 0x40
 800b76e:	d02e      	beq.n	800b7ce <UART_SetConfig+0x896>
 800b770:	e031      	b.n	800b7d6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b772:	f7fb fe7b 	bl	800746c <HAL_RCC_GetPCLK1Freq>
 800b776:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b778:	e033      	b.n	800b7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b77a:	f7fb fe8d 	bl	8007498 <HAL_RCC_GetPCLK2Freq>
 800b77e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b780:	e02f      	b.n	800b7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b782:	f107 0314 	add.w	r3, r7, #20
 800b786:	4618      	mov	r0, r3
 800b788:	f7fd fac4 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b790:	e027      	b.n	800b7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b792:	f107 0308 	add.w	r3, r7, #8
 800b796:	4618      	mov	r0, r3
 800b798:	f7fd fc10 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7a0:	e01f      	b.n	800b7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7a2:	4b58      	ldr	r3, [pc, #352]	; (800b904 <UART_SetConfig+0x9cc>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0320 	and.w	r3, r3, #32
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d009      	beq.n	800b7c2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b7ae:	4b55      	ldr	r3, [pc, #340]	; (800b904 <UART_SetConfig+0x9cc>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	08db      	lsrs	r3, r3, #3
 800b7b4:	f003 0303 	and.w	r3, r3, #3
 800b7b8:	4a53      	ldr	r2, [pc, #332]	; (800b908 <UART_SetConfig+0x9d0>)
 800b7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b7c0:	e00f      	b.n	800b7e2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b7c2:	4b51      	ldr	r3, [pc, #324]	; (800b908 <UART_SetConfig+0x9d0>)
 800b7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7c6:	e00c      	b.n	800b7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b7c8:	4b4c      	ldr	r3, [pc, #304]	; (800b8fc <UART_SetConfig+0x9c4>)
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7cc:	e009      	b.n	800b7e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7d4:	e005      	b.n	800b7e2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b7e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f000 80ea 	beq.w	800b9be <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ee:	4a44      	ldr	r2, [pc, #272]	; (800b900 <UART_SetConfig+0x9c8>)
 800b7f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7fc:	005a      	lsls	r2, r3, #1
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	085b      	lsrs	r3, r3, #1
 800b804:	441a      	add	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b80e:	b29b      	uxth	r3, r3
 800b810:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b814:	2b0f      	cmp	r3, #15
 800b816:	d916      	bls.n	800b846 <UART_SetConfig+0x90e>
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b81e:	d212      	bcs.n	800b846 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	b29b      	uxth	r3, r3
 800b824:	f023 030f 	bic.w	r3, r3, #15
 800b828:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82c:	085b      	lsrs	r3, r3, #1
 800b82e:	b29b      	uxth	r3, r3
 800b830:	f003 0307 	and.w	r3, r3, #7
 800b834:	b29a      	uxth	r2, r3
 800b836:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b838:	4313      	orrs	r3, r2
 800b83a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b842:	60da      	str	r2, [r3, #12]
 800b844:	e0bb      	b.n	800b9be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b84c:	e0b7      	b.n	800b9be <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b84e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b852:	2b20      	cmp	r3, #32
 800b854:	dc4a      	bgt.n	800b8ec <UART_SetConfig+0x9b4>
 800b856:	2b00      	cmp	r3, #0
 800b858:	f2c0 8086 	blt.w	800b968 <UART_SetConfig+0xa30>
 800b85c:	2b20      	cmp	r3, #32
 800b85e:	f200 8083 	bhi.w	800b968 <UART_SetConfig+0xa30>
 800b862:	a201      	add	r2, pc, #4	; (adr r2, 800b868 <UART_SetConfig+0x930>)
 800b864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b868:	0800b8f3 	.word	0x0800b8f3
 800b86c:	0800b90d 	.word	0x0800b90d
 800b870:	0800b969 	.word	0x0800b969
 800b874:	0800b969 	.word	0x0800b969
 800b878:	0800b915 	.word	0x0800b915
 800b87c:	0800b969 	.word	0x0800b969
 800b880:	0800b969 	.word	0x0800b969
 800b884:	0800b969 	.word	0x0800b969
 800b888:	0800b925 	.word	0x0800b925
 800b88c:	0800b969 	.word	0x0800b969
 800b890:	0800b969 	.word	0x0800b969
 800b894:	0800b969 	.word	0x0800b969
 800b898:	0800b969 	.word	0x0800b969
 800b89c:	0800b969 	.word	0x0800b969
 800b8a0:	0800b969 	.word	0x0800b969
 800b8a4:	0800b969 	.word	0x0800b969
 800b8a8:	0800b935 	.word	0x0800b935
 800b8ac:	0800b969 	.word	0x0800b969
 800b8b0:	0800b969 	.word	0x0800b969
 800b8b4:	0800b969 	.word	0x0800b969
 800b8b8:	0800b969 	.word	0x0800b969
 800b8bc:	0800b969 	.word	0x0800b969
 800b8c0:	0800b969 	.word	0x0800b969
 800b8c4:	0800b969 	.word	0x0800b969
 800b8c8:	0800b969 	.word	0x0800b969
 800b8cc:	0800b969 	.word	0x0800b969
 800b8d0:	0800b969 	.word	0x0800b969
 800b8d4:	0800b969 	.word	0x0800b969
 800b8d8:	0800b969 	.word	0x0800b969
 800b8dc:	0800b969 	.word	0x0800b969
 800b8e0:	0800b969 	.word	0x0800b969
 800b8e4:	0800b969 	.word	0x0800b969
 800b8e8:	0800b95b 	.word	0x0800b95b
 800b8ec:	2b40      	cmp	r3, #64	; 0x40
 800b8ee:	d037      	beq.n	800b960 <UART_SetConfig+0xa28>
 800b8f0:	e03a      	b.n	800b968 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8f2:	f7fb fdbb 	bl	800746c <HAL_RCC_GetPCLK1Freq>
 800b8f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b8f8:	e03c      	b.n	800b974 <UART_SetConfig+0xa3c>
 800b8fa:	bf00      	nop
 800b8fc:	003d0900 	.word	0x003d0900
 800b900:	0800f1a8 	.word	0x0800f1a8
 800b904:	58024400 	.word	0x58024400
 800b908:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b90c:	f7fb fdc4 	bl	8007498 <HAL_RCC_GetPCLK2Freq>
 800b910:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b912:	e02f      	b.n	800b974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b914:	f107 0314 	add.w	r3, r7, #20
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fd f9fb 	bl	8008d14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b91e:	69bb      	ldr	r3, [r7, #24]
 800b920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b922:	e027      	b.n	800b974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b924:	f107 0308 	add.w	r3, r7, #8
 800b928:	4618      	mov	r0, r3
 800b92a:	f7fd fb47 	bl	8008fbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b932:	e01f      	b.n	800b974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b934:	4b2c      	ldr	r3, [pc, #176]	; (800b9e8 <UART_SetConfig+0xab0>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 0320 	and.w	r3, r3, #32
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b940:	4b29      	ldr	r3, [pc, #164]	; (800b9e8 <UART_SetConfig+0xab0>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	08db      	lsrs	r3, r3, #3
 800b946:	f003 0303 	and.w	r3, r3, #3
 800b94a:	4a28      	ldr	r2, [pc, #160]	; (800b9ec <UART_SetConfig+0xab4>)
 800b94c:	fa22 f303 	lsr.w	r3, r2, r3
 800b950:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b952:	e00f      	b.n	800b974 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b954:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <UART_SetConfig+0xab4>)
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b958:	e00c      	b.n	800b974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b95a:	4b25      	ldr	r3, [pc, #148]	; (800b9f0 <UART_SetConfig+0xab8>)
 800b95c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b95e:	e009      	b.n	800b974 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b964:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b966:	e005      	b.n	800b974 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b972:	bf00      	nop
    }

    if (pclk != 0U)
 800b974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b976:	2b00      	cmp	r3, #0
 800b978:	d021      	beq.n	800b9be <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b97e:	4a1d      	ldr	r2, [pc, #116]	; (800b9f4 <UART_SetConfig+0xabc>)
 800b980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b984:	461a      	mov	r2, r3
 800b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b988:	fbb3 f2f2 	udiv	r2, r3, r2
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	085b      	lsrs	r3, r3, #1
 800b992:	441a      	add	r2, r3
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	2b0f      	cmp	r3, #15
 800b9a4:	d908      	bls.n	800b9b8 <UART_SetConfig+0xa80>
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ac:	d204      	bcs.n	800b9b8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b9b4:	60da      	str	r2, [r3, #12]
 800b9b6:	e002      	b.n	800b9be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b9da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3738      	adds	r7, #56	; 0x38
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	58024400 	.word	0x58024400
 800b9ec:	03d09000 	.word	0x03d09000
 800b9f0:	003d0900 	.word	0x003d0900
 800b9f4:	0800f1a8 	.word	0x0800f1a8

0800b9f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba04:	f003 0301 	and.w	r3, r3, #1
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	430a      	orrs	r2, r1
 800ba20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	f003 0302 	and.w	r3, r3, #2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00a      	beq.n	800ba44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	430a      	orrs	r2, r1
 800ba42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba48:	f003 0304 	and.w	r3, r3, #4
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00a      	beq.n	800ba66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba6a:	f003 0308 	and.w	r3, r3, #8
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba8c:	f003 0310 	and.w	r3, r3, #16
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00a      	beq.n	800baaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	430a      	orrs	r2, r1
 800baa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baae:	f003 0320 	and.w	r3, r3, #32
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00a      	beq.n	800bacc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	430a      	orrs	r2, r1
 800baca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d01a      	beq.n	800bb0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	430a      	orrs	r2, r1
 800baec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baf6:	d10a      	bne.n	800bb0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	430a      	orrs	r2, r1
 800bb0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00a      	beq.n	800bb30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	430a      	orrs	r2, r1
 800bb2e:	605a      	str	r2, [r3, #4]
  }
}
 800bb30:	bf00      	nop
 800bb32:	370c      	adds	r7, #12
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af02      	add	r7, sp, #8
 800bb42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb4c:	f7f6 fc20 	bl	8002390 <HAL_GetTick>
 800bb50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 0308 	and.w	r3, r3, #8
 800bb5c:	2b08      	cmp	r3, #8
 800bb5e:	d10e      	bne.n	800bb7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 f82f 	bl	800bbd2 <UART_WaitOnFlagUntilTimeout>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e025      	b.n	800bbca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d10e      	bne.n	800bbaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 f819 	bl	800bbd2 <UART_WaitOnFlagUntilTimeout>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e00f      	b.n	800bbca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2220      	movs	r2, #32
 800bbae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	60f8      	str	r0, [r7, #12]
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	603b      	str	r3, [r7, #0]
 800bbde:	4613      	mov	r3, r2
 800bbe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbe2:	e062      	b.n	800bcaa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbea:	d05e      	beq.n	800bcaa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbec:	f7f6 fbd0 	bl	8002390 <HAL_GetTick>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	69ba      	ldr	r2, [r7, #24]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d302      	bcc.n	800bc02 <UART_WaitOnFlagUntilTimeout+0x30>
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d11d      	bne.n	800bc3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc10:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	689a      	ldr	r2, [r3, #8]
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 0201 	bic.w	r2, r2, #1
 800bc20:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2220      	movs	r2, #32
 800bc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2220      	movs	r2, #32
 800bc2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e045      	b.n	800bcca <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d02e      	beq.n	800bcaa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	69db      	ldr	r3, [r3, #28]
 800bc52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc5a:	d126      	bne.n	800bcaa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	681a      	ldr	r2, [r3, #0]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800bc74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	689a      	ldr	r2, [r3, #8]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 0201 	bic.w	r2, r2, #1
 800bc84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2220      	movs	r2, #32
 800bc8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2220      	movs	r2, #32
 800bc92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2200      	movs	r2, #0
 800bca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bca6:	2303      	movs	r3, #3
 800bca8:	e00f      	b.n	800bcca <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	69da      	ldr	r2, [r3, #28]
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	68ba      	ldr	r2, [r7, #8]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	bf0c      	ite	eq
 800bcba:	2301      	moveq	r3, #1
 800bcbc:	2300      	movne	r3, #0
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	79fb      	ldrb	r3, [r7, #7]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d08d      	beq.n	800bbe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	3710      	adds	r7, #16
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	bd80      	pop	{r7, pc}

0800bcd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b085      	sub	sp, #20
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d101      	bne.n	800bce8 <HAL_UARTEx_DisableFifoMode+0x16>
 800bce4:	2302      	movs	r3, #2
 800bce6:	e027      	b.n	800bd38 <HAL_UARTEx_DisableFifoMode+0x66>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2224      	movs	r2, #36	; 0x24
 800bcf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f022 0201 	bic.w	r2, r2, #1
 800bd0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bd16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2220      	movs	r2, #32
 800bd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d101      	bne.n	800bd5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd58:	2302      	movs	r3, #2
 800bd5a:	e02d      	b.n	800bdb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2224      	movs	r2, #36	; 0x24
 800bd68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f022 0201 	bic.w	r2, r2, #1
 800bd82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	689b      	ldr	r3, [r3, #8]
 800bd8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	430a      	orrs	r2, r1
 800bd96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 f84f 	bl	800be3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3710      	adds	r7, #16
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d101      	bne.n	800bdd8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bdd4:	2302      	movs	r3, #2
 800bdd6:	e02d      	b.n	800be34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2224      	movs	r2, #36	; 0x24
 800bde4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f022 0201 	bic.w	r2, r2, #1
 800bdfe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	430a      	orrs	r2, r1
 800be12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f811 	bl	800be3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2220      	movs	r2, #32
 800be26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3710      	adds	r7, #16
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d108      	bne.n	800be5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2201      	movs	r2, #1
 800be58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be5c:	e031      	b.n	800bec2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be5e:	2310      	movs	r3, #16
 800be60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be62:	2310      	movs	r3, #16
 800be64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	0e5b      	lsrs	r3, r3, #25
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	f003 0307 	and.w	r3, r3, #7
 800be74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	0f5b      	lsrs	r3, r3, #29
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	f003 0307 	and.w	r3, r3, #7
 800be84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be86:	7bbb      	ldrb	r3, [r7, #14]
 800be88:	7b3a      	ldrb	r2, [r7, #12]
 800be8a:	4911      	ldr	r1, [pc, #68]	; (800bed0 <UARTEx_SetNbDataToProcess+0x94>)
 800be8c:	5c8a      	ldrb	r2, [r1, r2]
 800be8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be92:	7b3a      	ldrb	r2, [r7, #12]
 800be94:	490f      	ldr	r1, [pc, #60]	; (800bed4 <UARTEx_SetNbDataToProcess+0x98>)
 800be96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be98:	fb93 f3f2 	sdiv	r3, r3, r2
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
 800bea6:	7b7a      	ldrb	r2, [r7, #13]
 800bea8:	4909      	ldr	r1, [pc, #36]	; (800bed0 <UARTEx_SetNbDataToProcess+0x94>)
 800beaa:	5c8a      	ldrb	r2, [r1, r2]
 800beac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800beb0:	7b7a      	ldrb	r2, [r7, #13]
 800beb2:	4908      	ldr	r1, [pc, #32]	; (800bed4 <UARTEx_SetNbDataToProcess+0x98>)
 800beb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800beb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800beba:	b29a      	uxth	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bec2:	bf00      	nop
 800bec4:	3714      	adds	r7, #20
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	0800f1c0 	.word	0x0800f1c0
 800bed4:	0800f1c8 	.word	0x0800f1c8

0800bed8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bed8:	b084      	sub	sp, #16
 800beda:	b580      	push	{r7, lr}
 800bedc:	b084      	sub	sp, #16
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	f107 001c 	add.w	r0, r7, #28
 800bee6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	2b01      	cmp	r3, #1
 800beee:	d120      	bne.n	800bf32 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	68da      	ldr	r2, [r3, #12]
 800bf00:	4b2a      	ldr	r3, [pc, #168]	; (800bfac <USB_CoreInit+0xd4>)
 800bf02:	4013      	ands	r3, r2
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bf14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d105      	bne.n	800bf26 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fa60 	bl	800c3ec <USB_CoreReset>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	73fb      	strb	r3, [r7, #15]
 800bf30:	e01a      	b.n	800bf68 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fa54 	bl	800c3ec <USB_CoreReset>
 800bf44:	4603      	mov	r3, r0
 800bf46:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bf48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d106      	bne.n	800bf5c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	639a      	str	r2, [r3, #56]	; 0x38
 800bf5a:	e005      	b.n	800bf68 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bf68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d116      	bne.n	800bf9c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf7c:	4b0c      	ldr	r3, [pc, #48]	; (800bfb0 <USB_CoreInit+0xd8>)
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	f043 0206 	orr.w	r2, r3, #6
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	f043 0220 	orr.w	r2, r3, #32
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bf9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bfa8:	b004      	add	sp, #16
 800bfaa:	4770      	bx	lr
 800bfac:	ffbdffbf 	.word	0xffbdffbf
 800bfb0:	03ee0000 	.word	0x03ee0000

0800bfb4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	f023 0201 	bic.w	r2, r3, #1
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	370c      	adds	r7, #12
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b082      	sub	sp, #8
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d106      	bne.n	800c002 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	60da      	str	r2, [r3, #12]
 800c000:	e00b      	b.n	800c01a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c002:	78fb      	ldrb	r3, [r7, #3]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d106      	bne.n	800c016 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	60da      	str	r2, [r3, #12]
 800c014:	e001      	b.n	800c01a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e003      	b.n	800c022 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c01a:	2032      	movs	r0, #50	; 0x32
 800c01c:	f7f6 f9c4 	bl	80023a8 <HAL_Delay>

  return HAL_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	3708      	adds	r7, #8
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
	...

0800c02c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c02c:	b084      	sub	sp, #16
 800c02e:	b580      	push	{r7, lr}
 800c030:	b086      	sub	sp, #24
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c03a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c03e:	2300      	movs	r3, #0
 800c040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c046:	2300      	movs	r3, #0
 800c048:	613b      	str	r3, [r7, #16]
 800c04a:	e009      	b.n	800c060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	3340      	adds	r3, #64	; 0x40
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4413      	add	r3, r2
 800c056:	2200      	movs	r2, #0
 800c058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	3301      	adds	r3, #1
 800c05e:	613b      	str	r3, [r7, #16]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b0e      	cmp	r3, #14
 800c064:	d9f2      	bls.n	800c04c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d11c      	bne.n	800c0a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c07a:	f043 0302 	orr.w	r3, r3, #2
 800c07e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c084:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	e005      	b.n	800c0b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0cc:	461a      	mov	r2, r3
 800c0ce:	680b      	ldr	r3, [r1, #0]
 800c0d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d10c      	bne.n	800c0f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d104      	bne.n	800c0e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c0de:	2100      	movs	r1, #0
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 f949 	bl	800c378 <USB_SetDevSpeed>
 800c0e6:	e008      	b.n	800c0fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c0e8:	2101      	movs	r1, #1
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f944 	bl	800c378 <USB_SetDevSpeed>
 800c0f0:	e003      	b.n	800c0fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0f2:	2103      	movs	r1, #3
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f93f 	bl	800c378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0fa:	2110      	movs	r1, #16
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f8f3 	bl	800c2e8 <USB_FlushTxFifo>
 800c102:	4603      	mov	r3, r0
 800c104:	2b00      	cmp	r3, #0
 800c106:	d001      	beq.n	800c10c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f911 	bl	800c334 <USB_FlushRxFifo>
 800c112:	4603      	mov	r3, r0
 800c114:	2b00      	cmp	r3, #0
 800c116:	d001      	beq.n	800c11c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c118:	2301      	movs	r3, #1
 800c11a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c122:	461a      	mov	r2, r3
 800c124:	2300      	movs	r3, #0
 800c126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c12e:	461a      	mov	r2, r3
 800c130:	2300      	movs	r3, #0
 800c132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13a:	461a      	mov	r2, r3
 800c13c:	2300      	movs	r3, #0
 800c13e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c140:	2300      	movs	r3, #0
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	e043      	b.n	800c1ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	015a      	lsls	r2, r3, #5
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	4413      	add	r3, r2
 800c14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c15c:	d118      	bne.n	800c190 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c170:	461a      	mov	r2, r3
 800c172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c176:	6013      	str	r3, [r2, #0]
 800c178:	e013      	b.n	800c1a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c186:	461a      	mov	r2, r3
 800c188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	e008      	b.n	800c1a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	015a      	lsls	r2, r3, #5
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c19c:	461a      	mov	r2, r3
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	015a      	lsls	r2, r3, #5
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	015a      	lsls	r2, r3, #5
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c1c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	613b      	str	r3, [r7, #16]
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d3b7      	bcc.n	800c146 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	613b      	str	r3, [r7, #16]
 800c1da:	e043      	b.n	800c264 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1f2:	d118      	bne.n	800c226 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10a      	bne.n	800c210 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	015a      	lsls	r2, r3, #5
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4413      	add	r3, r2
 800c202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c206:	461a      	mov	r2, r3
 800c208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c20c:	6013      	str	r3, [r2, #0]
 800c20e:	e013      	b.n	800c238 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	015a      	lsls	r2, r3, #5
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	4413      	add	r3, r2
 800c218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c21c:	461a      	mov	r2, r3
 800c21e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	e008      	b.n	800c238 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c232:	461a      	mov	r2, r3
 800c234:	2300      	movs	r3, #0
 800c236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	015a      	lsls	r2, r3, #5
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	4413      	add	r3, r2
 800c240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c244:	461a      	mov	r2, r3
 800c246:	2300      	movs	r3, #0
 800c248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	015a      	lsls	r2, r3, #5
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	4413      	add	r3, r2
 800c252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c256:	461a      	mov	r2, r3
 800c258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c25c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	3301      	adds	r3, #1
 800c262:	613b      	str	r3, [r7, #16]
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d3b7      	bcc.n	800c1dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c27a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c27e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c28c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	2b00      	cmp	r3, #0
 800c292:	d105      	bne.n	800c2a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	f043 0210 	orr.w	r2, r3, #16
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	699a      	ldr	r2, [r3, #24]
 800c2a4:	4b0e      	ldr	r3, [pc, #56]	; (800c2e0 <USB_DevInit+0x2b4>)
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d005      	beq.n	800c2be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	f043 0208 	orr.w	r2, r3, #8
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d105      	bne.n	800c2d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	699a      	ldr	r2, [r3, #24]
 800c2c8:	4b06      	ldr	r3, [pc, #24]	; (800c2e4 <USB_DevInit+0x2b8>)
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2dc:	b004      	add	sp, #16
 800c2de:	4770      	bx	lr
 800c2e0:	803c3800 	.word	0x803c3800
 800c2e4:	40000004 	.word	0x40000004

0800c2e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	019b      	lsls	r3, r3, #6
 800c2fa:	f043 0220 	orr.w	r2, r3, #32
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3301      	adds	r3, #1
 800c306:	60fb      	str	r3, [r7, #12]
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	4a09      	ldr	r2, [pc, #36]	; (800c330 <USB_FlushTxFifo+0x48>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d901      	bls.n	800c314 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c310:	2303      	movs	r3, #3
 800c312:	e006      	b.n	800c322 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	f003 0320 	and.w	r3, r3, #32
 800c31c:	2b20      	cmp	r3, #32
 800c31e:	d0f0      	beq.n	800c302 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	00030d40 	.word	0x00030d40

0800c334 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c334:	b480      	push	{r7}
 800c336:	b085      	sub	sp, #20
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2210      	movs	r2, #16
 800c344:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4a09      	ldr	r2, [pc, #36]	; (800c374 <USB_FlushRxFifo+0x40>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d901      	bls.n	800c358 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c354:	2303      	movs	r3, #3
 800c356:	e006      	b.n	800c366 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	f003 0310 	and.w	r3, r3, #16
 800c360:	2b10      	cmp	r3, #16
 800c362:	d0f0      	beq.n	800c346 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3714      	adds	r7, #20
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	00030d40 	.word	0x00030d40

0800c378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	78fb      	ldrb	r3, [r7, #3]
 800c392:	68f9      	ldr	r1, [r7, #12]
 800c394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c398:	4313      	orrs	r3, r2
 800c39a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr

0800c3aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c3aa:	b480      	push	{r7}
 800c3ac:	b085      	sub	sp, #20
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c3c4:	f023 0303 	bic.w	r3, r3, #3
 800c3c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c3d8:	f043 0302 	orr.w	r3, r3, #2
 800c3dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	4a13      	ldr	r2, [pc, #76]	; (800c450 <USB_CoreReset+0x64>)
 800c402:	4293      	cmp	r3, r2
 800c404:	d901      	bls.n	800c40a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c406:	2303      	movs	r3, #3
 800c408:	e01b      	b.n	800c442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	691b      	ldr	r3, [r3, #16]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	daf2      	bge.n	800c3f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c412:	2300      	movs	r3, #0
 800c414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	f043 0201 	orr.w	r2, r3, #1
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	3301      	adds	r3, #1
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	4a09      	ldr	r2, [pc, #36]	; (800c450 <USB_CoreReset+0x64>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d901      	bls.n	800c434 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c430:	2303      	movs	r3, #3
 800c432:	e006      	b.n	800c442 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	691b      	ldr	r3, [r3, #16]
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d0f0      	beq.n	800c422 <USB_CoreReset+0x36>

  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop
 800c450:	00030d40 	.word	0x00030d40

0800c454 <__errno>:
 800c454:	4b01      	ldr	r3, [pc, #4]	; (800c45c <__errno+0x8>)
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	24000020 	.word	0x24000020

0800c460 <__libc_init_array>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	4d0d      	ldr	r5, [pc, #52]	; (800c498 <__libc_init_array+0x38>)
 800c464:	4c0d      	ldr	r4, [pc, #52]	; (800c49c <__libc_init_array+0x3c>)
 800c466:	1b64      	subs	r4, r4, r5
 800c468:	10a4      	asrs	r4, r4, #2
 800c46a:	2600      	movs	r6, #0
 800c46c:	42a6      	cmp	r6, r4
 800c46e:	d109      	bne.n	800c484 <__libc_init_array+0x24>
 800c470:	4d0b      	ldr	r5, [pc, #44]	; (800c4a0 <__libc_init_array+0x40>)
 800c472:	4c0c      	ldr	r4, [pc, #48]	; (800c4a4 <__libc_init_array+0x44>)
 800c474:	f002 fe24 	bl	800f0c0 <_init>
 800c478:	1b64      	subs	r4, r4, r5
 800c47a:	10a4      	asrs	r4, r4, #2
 800c47c:	2600      	movs	r6, #0
 800c47e:	42a6      	cmp	r6, r4
 800c480:	d105      	bne.n	800c48e <__libc_init_array+0x2e>
 800c482:	bd70      	pop	{r4, r5, r6, pc}
 800c484:	f855 3b04 	ldr.w	r3, [r5], #4
 800c488:	4798      	blx	r3
 800c48a:	3601      	adds	r6, #1
 800c48c:	e7ee      	b.n	800c46c <__libc_init_array+0xc>
 800c48e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c492:	4798      	blx	r3
 800c494:	3601      	adds	r6, #1
 800c496:	e7f2      	b.n	800c47e <__libc_init_array+0x1e>
 800c498:	0800f5bc 	.word	0x0800f5bc
 800c49c:	0800f5bc 	.word	0x0800f5bc
 800c4a0:	0800f5bc 	.word	0x0800f5bc
 800c4a4:	0800f5c0 	.word	0x0800f5c0

0800c4a8 <memset>:
 800c4a8:	4402      	add	r2, r0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d100      	bne.n	800c4b2 <memset+0xa>
 800c4b0:	4770      	bx	lr
 800c4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b6:	e7f9      	b.n	800c4ac <memset+0x4>

0800c4b8 <__cvt>:
 800c4b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ba:	ed2d 8b02 	vpush	{d8}
 800c4be:	eeb0 8b40 	vmov.f64	d8, d0
 800c4c2:	b085      	sub	sp, #20
 800c4c4:	4617      	mov	r7, r2
 800c4c6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c4c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c4ca:	ee18 2a90 	vmov	r2, s17
 800c4ce:	f025 0520 	bic.w	r5, r5, #32
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	bfb6      	itet	lt
 800c4d6:	222d      	movlt	r2, #45	; 0x2d
 800c4d8:	2200      	movge	r2, #0
 800c4da:	eeb1 8b40 	vneglt.f64	d8, d0
 800c4de:	2d46      	cmp	r5, #70	; 0x46
 800c4e0:	460c      	mov	r4, r1
 800c4e2:	701a      	strb	r2, [r3, #0]
 800c4e4:	d004      	beq.n	800c4f0 <__cvt+0x38>
 800c4e6:	2d45      	cmp	r5, #69	; 0x45
 800c4e8:	d100      	bne.n	800c4ec <__cvt+0x34>
 800c4ea:	3401      	adds	r4, #1
 800c4ec:	2102      	movs	r1, #2
 800c4ee:	e000      	b.n	800c4f2 <__cvt+0x3a>
 800c4f0:	2103      	movs	r1, #3
 800c4f2:	ab03      	add	r3, sp, #12
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	ab02      	add	r3, sp, #8
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	4622      	mov	r2, r4
 800c4fc:	4633      	mov	r3, r6
 800c4fe:	eeb0 0b48 	vmov.f64	d0, d8
 800c502:	f000 fcc9 	bl	800ce98 <_dtoa_r>
 800c506:	2d47      	cmp	r5, #71	; 0x47
 800c508:	d109      	bne.n	800c51e <__cvt+0x66>
 800c50a:	07fb      	lsls	r3, r7, #31
 800c50c:	d407      	bmi.n	800c51e <__cvt+0x66>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c512:	1a1b      	subs	r3, r3, r0
 800c514:	6013      	str	r3, [r2, #0]
 800c516:	b005      	add	sp, #20
 800c518:	ecbd 8b02 	vpop	{d8}
 800c51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c51e:	2d46      	cmp	r5, #70	; 0x46
 800c520:	eb00 0204 	add.w	r2, r0, r4
 800c524:	d10c      	bne.n	800c540 <__cvt+0x88>
 800c526:	7803      	ldrb	r3, [r0, #0]
 800c528:	2b30      	cmp	r3, #48	; 0x30
 800c52a:	d107      	bne.n	800c53c <__cvt+0x84>
 800c52c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c534:	bf1c      	itt	ne
 800c536:	f1c4 0401 	rsbne	r4, r4, #1
 800c53a:	6034      	strne	r4, [r6, #0]
 800c53c:	6833      	ldr	r3, [r6, #0]
 800c53e:	441a      	add	r2, r3
 800c540:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c548:	bf08      	it	eq
 800c54a:	9203      	streq	r2, [sp, #12]
 800c54c:	2130      	movs	r1, #48	; 0x30
 800c54e:	9b03      	ldr	r3, [sp, #12]
 800c550:	4293      	cmp	r3, r2
 800c552:	d2dc      	bcs.n	800c50e <__cvt+0x56>
 800c554:	1c5c      	adds	r4, r3, #1
 800c556:	9403      	str	r4, [sp, #12]
 800c558:	7019      	strb	r1, [r3, #0]
 800c55a:	e7f8      	b.n	800c54e <__cvt+0x96>

0800c55c <__exponent>:
 800c55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c55e:	4603      	mov	r3, r0
 800c560:	2900      	cmp	r1, #0
 800c562:	bfb8      	it	lt
 800c564:	4249      	neglt	r1, r1
 800c566:	f803 2b02 	strb.w	r2, [r3], #2
 800c56a:	bfb4      	ite	lt
 800c56c:	222d      	movlt	r2, #45	; 0x2d
 800c56e:	222b      	movge	r2, #43	; 0x2b
 800c570:	2909      	cmp	r1, #9
 800c572:	7042      	strb	r2, [r0, #1]
 800c574:	dd2a      	ble.n	800c5cc <__exponent+0x70>
 800c576:	f10d 0407 	add.w	r4, sp, #7
 800c57a:	46a4      	mov	ip, r4
 800c57c:	270a      	movs	r7, #10
 800c57e:	46a6      	mov	lr, r4
 800c580:	460a      	mov	r2, r1
 800c582:	fb91 f6f7 	sdiv	r6, r1, r7
 800c586:	fb07 1516 	mls	r5, r7, r6, r1
 800c58a:	3530      	adds	r5, #48	; 0x30
 800c58c:	2a63      	cmp	r2, #99	; 0x63
 800c58e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c592:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c596:	4631      	mov	r1, r6
 800c598:	dcf1      	bgt.n	800c57e <__exponent+0x22>
 800c59a:	3130      	adds	r1, #48	; 0x30
 800c59c:	f1ae 0502 	sub.w	r5, lr, #2
 800c5a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c5a4:	1c44      	adds	r4, r0, #1
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	4561      	cmp	r1, ip
 800c5aa:	d30a      	bcc.n	800c5c2 <__exponent+0x66>
 800c5ac:	f10d 0209 	add.w	r2, sp, #9
 800c5b0:	eba2 020e 	sub.w	r2, r2, lr
 800c5b4:	4565      	cmp	r5, ip
 800c5b6:	bf88      	it	hi
 800c5b8:	2200      	movhi	r2, #0
 800c5ba:	4413      	add	r3, r2
 800c5bc:	1a18      	subs	r0, r3, r0
 800c5be:	b003      	add	sp, #12
 800c5c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c5c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c5ca:	e7ed      	b.n	800c5a8 <__exponent+0x4c>
 800c5cc:	2330      	movs	r3, #48	; 0x30
 800c5ce:	3130      	adds	r1, #48	; 0x30
 800c5d0:	7083      	strb	r3, [r0, #2]
 800c5d2:	70c1      	strb	r1, [r0, #3]
 800c5d4:	1d03      	adds	r3, r0, #4
 800c5d6:	e7f1      	b.n	800c5bc <__exponent+0x60>

0800c5d8 <_printf_float>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	b08b      	sub	sp, #44	; 0x2c
 800c5de:	460c      	mov	r4, r1
 800c5e0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c5e4:	4616      	mov	r6, r2
 800c5e6:	461f      	mov	r7, r3
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	f001 f9d7 	bl	800d99c <_localeconv_r>
 800c5ee:	f8d0 b000 	ldr.w	fp, [r0]
 800c5f2:	4658      	mov	r0, fp
 800c5f4:	f7f3 fe74 	bl	80002e0 <strlen>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9308      	str	r3, [sp, #32]
 800c5fc:	f8d8 3000 	ldr.w	r3, [r8]
 800c600:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c604:	6822      	ldr	r2, [r4, #0]
 800c606:	3307      	adds	r3, #7
 800c608:	f023 0307 	bic.w	r3, r3, #7
 800c60c:	f103 0108 	add.w	r1, r3, #8
 800c610:	f8c8 1000 	str.w	r1, [r8]
 800c614:	4682      	mov	sl, r0
 800c616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c61a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c61e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c880 <_printf_float+0x2a8>
 800c622:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c626:	eeb0 6bc0 	vabs.f64	d6, d0
 800c62a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c632:	dd24      	ble.n	800c67e <_printf_float+0xa6>
 800c634:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c63c:	d502      	bpl.n	800c644 <_printf_float+0x6c>
 800c63e:	232d      	movs	r3, #45	; 0x2d
 800c640:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c644:	4b90      	ldr	r3, [pc, #576]	; (800c888 <_printf_float+0x2b0>)
 800c646:	4891      	ldr	r0, [pc, #580]	; (800c88c <_printf_float+0x2b4>)
 800c648:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c64c:	bf94      	ite	ls
 800c64e:	4698      	movls	r8, r3
 800c650:	4680      	movhi	r8, r0
 800c652:	2303      	movs	r3, #3
 800c654:	6123      	str	r3, [r4, #16]
 800c656:	f022 0204 	bic.w	r2, r2, #4
 800c65a:	2300      	movs	r3, #0
 800c65c:	6022      	str	r2, [r4, #0]
 800c65e:	9304      	str	r3, [sp, #16]
 800c660:	9700      	str	r7, [sp, #0]
 800c662:	4633      	mov	r3, r6
 800c664:	aa09      	add	r2, sp, #36	; 0x24
 800c666:	4621      	mov	r1, r4
 800c668:	4628      	mov	r0, r5
 800c66a:	f000 f9d3 	bl	800ca14 <_printf_common>
 800c66e:	3001      	adds	r0, #1
 800c670:	f040 808a 	bne.w	800c788 <_printf_float+0x1b0>
 800c674:	f04f 30ff 	mov.w	r0, #4294967295
 800c678:	b00b      	add	sp, #44	; 0x2c
 800c67a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c67e:	eeb4 0b40 	vcmp.f64	d0, d0
 800c682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c686:	d709      	bvc.n	800c69c <_printf_float+0xc4>
 800c688:	ee10 3a90 	vmov	r3, s1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	bfbc      	itt	lt
 800c690:	232d      	movlt	r3, #45	; 0x2d
 800c692:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c696:	487e      	ldr	r0, [pc, #504]	; (800c890 <_printf_float+0x2b8>)
 800c698:	4b7e      	ldr	r3, [pc, #504]	; (800c894 <_printf_float+0x2bc>)
 800c69a:	e7d5      	b.n	800c648 <_printf_float+0x70>
 800c69c:	6863      	ldr	r3, [r4, #4]
 800c69e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c6a2:	9104      	str	r1, [sp, #16]
 800c6a4:	1c59      	adds	r1, r3, #1
 800c6a6:	d13c      	bne.n	800c722 <_printf_float+0x14a>
 800c6a8:	2306      	movs	r3, #6
 800c6aa:	6063      	str	r3, [r4, #4]
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9303      	str	r3, [sp, #12]
 800c6b0:	ab08      	add	r3, sp, #32
 800c6b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c6b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c6ba:	ab07      	add	r3, sp, #28
 800c6bc:	6861      	ldr	r1, [r4, #4]
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	6022      	str	r2, [r4, #0]
 800c6c2:	f10d 031b 	add.w	r3, sp, #27
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	f7ff fef6 	bl	800c4b8 <__cvt>
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	9907      	ldr	r1, [sp, #28]
 800c6d0:	2b47      	cmp	r3, #71	; 0x47
 800c6d2:	4680      	mov	r8, r0
 800c6d4:	d108      	bne.n	800c6e8 <_printf_float+0x110>
 800c6d6:	1cc8      	adds	r0, r1, #3
 800c6d8:	db02      	blt.n	800c6e0 <_printf_float+0x108>
 800c6da:	6863      	ldr	r3, [r4, #4]
 800c6dc:	4299      	cmp	r1, r3
 800c6de:	dd41      	ble.n	800c764 <_printf_float+0x18c>
 800c6e0:	f1a9 0902 	sub.w	r9, r9, #2
 800c6e4:	fa5f f989 	uxtb.w	r9, r9
 800c6e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c6ec:	d820      	bhi.n	800c730 <_printf_float+0x158>
 800c6ee:	3901      	subs	r1, #1
 800c6f0:	464a      	mov	r2, r9
 800c6f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c6f6:	9107      	str	r1, [sp, #28]
 800c6f8:	f7ff ff30 	bl	800c55c <__exponent>
 800c6fc:	9a08      	ldr	r2, [sp, #32]
 800c6fe:	9004      	str	r0, [sp, #16]
 800c700:	1813      	adds	r3, r2, r0
 800c702:	2a01      	cmp	r2, #1
 800c704:	6123      	str	r3, [r4, #16]
 800c706:	dc02      	bgt.n	800c70e <_printf_float+0x136>
 800c708:	6822      	ldr	r2, [r4, #0]
 800c70a:	07d2      	lsls	r2, r2, #31
 800c70c:	d501      	bpl.n	800c712 <_printf_float+0x13a>
 800c70e:	3301      	adds	r3, #1
 800c710:	6123      	str	r3, [r4, #16]
 800c712:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0a2      	beq.n	800c660 <_printf_float+0x88>
 800c71a:	232d      	movs	r3, #45	; 0x2d
 800c71c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c720:	e79e      	b.n	800c660 <_printf_float+0x88>
 800c722:	9904      	ldr	r1, [sp, #16]
 800c724:	2947      	cmp	r1, #71	; 0x47
 800c726:	d1c1      	bne.n	800c6ac <_printf_float+0xd4>
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1bf      	bne.n	800c6ac <_printf_float+0xd4>
 800c72c:	2301      	movs	r3, #1
 800c72e:	e7bc      	b.n	800c6aa <_printf_float+0xd2>
 800c730:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c734:	d118      	bne.n	800c768 <_printf_float+0x190>
 800c736:	2900      	cmp	r1, #0
 800c738:	6863      	ldr	r3, [r4, #4]
 800c73a:	dd0b      	ble.n	800c754 <_printf_float+0x17c>
 800c73c:	6121      	str	r1, [r4, #16]
 800c73e:	b913      	cbnz	r3, 800c746 <_printf_float+0x16e>
 800c740:	6822      	ldr	r2, [r4, #0]
 800c742:	07d0      	lsls	r0, r2, #31
 800c744:	d502      	bpl.n	800c74c <_printf_float+0x174>
 800c746:	3301      	adds	r3, #1
 800c748:	440b      	add	r3, r1
 800c74a:	6123      	str	r3, [r4, #16]
 800c74c:	2300      	movs	r3, #0
 800c74e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c750:	9304      	str	r3, [sp, #16]
 800c752:	e7de      	b.n	800c712 <_printf_float+0x13a>
 800c754:	b913      	cbnz	r3, 800c75c <_printf_float+0x184>
 800c756:	6822      	ldr	r2, [r4, #0]
 800c758:	07d2      	lsls	r2, r2, #31
 800c75a:	d501      	bpl.n	800c760 <_printf_float+0x188>
 800c75c:	3302      	adds	r3, #2
 800c75e:	e7f4      	b.n	800c74a <_printf_float+0x172>
 800c760:	2301      	movs	r3, #1
 800c762:	e7f2      	b.n	800c74a <_printf_float+0x172>
 800c764:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c768:	9b08      	ldr	r3, [sp, #32]
 800c76a:	4299      	cmp	r1, r3
 800c76c:	db05      	blt.n	800c77a <_printf_float+0x1a2>
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	6121      	str	r1, [r4, #16]
 800c772:	07d8      	lsls	r0, r3, #31
 800c774:	d5ea      	bpl.n	800c74c <_printf_float+0x174>
 800c776:	1c4b      	adds	r3, r1, #1
 800c778:	e7e7      	b.n	800c74a <_printf_float+0x172>
 800c77a:	2900      	cmp	r1, #0
 800c77c:	bfd4      	ite	le
 800c77e:	f1c1 0202 	rsble	r2, r1, #2
 800c782:	2201      	movgt	r2, #1
 800c784:	4413      	add	r3, r2
 800c786:	e7e0      	b.n	800c74a <_printf_float+0x172>
 800c788:	6823      	ldr	r3, [r4, #0]
 800c78a:	055a      	lsls	r2, r3, #21
 800c78c:	d407      	bmi.n	800c79e <_printf_float+0x1c6>
 800c78e:	6923      	ldr	r3, [r4, #16]
 800c790:	4642      	mov	r2, r8
 800c792:	4631      	mov	r1, r6
 800c794:	4628      	mov	r0, r5
 800c796:	47b8      	blx	r7
 800c798:	3001      	adds	r0, #1
 800c79a:	d12a      	bne.n	800c7f2 <_printf_float+0x21a>
 800c79c:	e76a      	b.n	800c674 <_printf_float+0x9c>
 800c79e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c7a2:	f240 80e2 	bls.w	800c96a <_printf_float+0x392>
 800c7a6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c7aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b2:	d133      	bne.n	800c81c <_printf_float+0x244>
 800c7b4:	4a38      	ldr	r2, [pc, #224]	; (800c898 <_printf_float+0x2c0>)
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	4631      	mov	r1, r6
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	47b8      	blx	r7
 800c7be:	3001      	adds	r0, #1
 800c7c0:	f43f af58 	beq.w	800c674 <_printf_float+0x9c>
 800c7c4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	db02      	blt.n	800c7d2 <_printf_float+0x1fa>
 800c7cc:	6823      	ldr	r3, [r4, #0]
 800c7ce:	07d8      	lsls	r0, r3, #31
 800c7d0:	d50f      	bpl.n	800c7f2 <_printf_float+0x21a>
 800c7d2:	4653      	mov	r3, sl
 800c7d4:	465a      	mov	r2, fp
 800c7d6:	4631      	mov	r1, r6
 800c7d8:	4628      	mov	r0, r5
 800c7da:	47b8      	blx	r7
 800c7dc:	3001      	adds	r0, #1
 800c7de:	f43f af49 	beq.w	800c674 <_printf_float+0x9c>
 800c7e2:	f04f 0800 	mov.w	r8, #0
 800c7e6:	f104 091a 	add.w	r9, r4, #26
 800c7ea:	9b08      	ldr	r3, [sp, #32]
 800c7ec:	3b01      	subs	r3, #1
 800c7ee:	4543      	cmp	r3, r8
 800c7f0:	dc09      	bgt.n	800c806 <_printf_float+0x22e>
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	079b      	lsls	r3, r3, #30
 800c7f6:	f100 8108 	bmi.w	800ca0a <_printf_float+0x432>
 800c7fa:	68e0      	ldr	r0, [r4, #12]
 800c7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7fe:	4298      	cmp	r0, r3
 800c800:	bfb8      	it	lt
 800c802:	4618      	movlt	r0, r3
 800c804:	e738      	b.n	800c678 <_printf_float+0xa0>
 800c806:	2301      	movs	r3, #1
 800c808:	464a      	mov	r2, r9
 800c80a:	4631      	mov	r1, r6
 800c80c:	4628      	mov	r0, r5
 800c80e:	47b8      	blx	r7
 800c810:	3001      	adds	r0, #1
 800c812:	f43f af2f 	beq.w	800c674 <_printf_float+0x9c>
 800c816:	f108 0801 	add.w	r8, r8, #1
 800c81a:	e7e6      	b.n	800c7ea <_printf_float+0x212>
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	dc3c      	bgt.n	800c89c <_printf_float+0x2c4>
 800c822:	4a1d      	ldr	r2, [pc, #116]	; (800c898 <_printf_float+0x2c0>)
 800c824:	2301      	movs	r3, #1
 800c826:	4631      	mov	r1, r6
 800c828:	4628      	mov	r0, r5
 800c82a:	47b8      	blx	r7
 800c82c:	3001      	adds	r0, #1
 800c82e:	f43f af21 	beq.w	800c674 <_printf_float+0x9c>
 800c832:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c836:	4313      	orrs	r3, r2
 800c838:	d102      	bne.n	800c840 <_printf_float+0x268>
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	07d9      	lsls	r1, r3, #31
 800c83e:	d5d8      	bpl.n	800c7f2 <_printf_float+0x21a>
 800c840:	4653      	mov	r3, sl
 800c842:	465a      	mov	r2, fp
 800c844:	4631      	mov	r1, r6
 800c846:	4628      	mov	r0, r5
 800c848:	47b8      	blx	r7
 800c84a:	3001      	adds	r0, #1
 800c84c:	f43f af12 	beq.w	800c674 <_printf_float+0x9c>
 800c850:	f04f 0900 	mov.w	r9, #0
 800c854:	f104 0a1a 	add.w	sl, r4, #26
 800c858:	9b07      	ldr	r3, [sp, #28]
 800c85a:	425b      	negs	r3, r3
 800c85c:	454b      	cmp	r3, r9
 800c85e:	dc01      	bgt.n	800c864 <_printf_float+0x28c>
 800c860:	9b08      	ldr	r3, [sp, #32]
 800c862:	e795      	b.n	800c790 <_printf_float+0x1b8>
 800c864:	2301      	movs	r3, #1
 800c866:	4652      	mov	r2, sl
 800c868:	4631      	mov	r1, r6
 800c86a:	4628      	mov	r0, r5
 800c86c:	47b8      	blx	r7
 800c86e:	3001      	adds	r0, #1
 800c870:	f43f af00 	beq.w	800c674 <_printf_float+0x9c>
 800c874:	f109 0901 	add.w	r9, r9, #1
 800c878:	e7ee      	b.n	800c858 <_printf_float+0x280>
 800c87a:	bf00      	nop
 800c87c:	f3af 8000 	nop.w
 800c880:	ffffffff 	.word	0xffffffff
 800c884:	7fefffff 	.word	0x7fefffff
 800c888:	0800f1d4 	.word	0x0800f1d4
 800c88c:	0800f1d8 	.word	0x0800f1d8
 800c890:	0800f1e0 	.word	0x0800f1e0
 800c894:	0800f1dc 	.word	0x0800f1dc
 800c898:	0800f1e4 	.word	0x0800f1e4
 800c89c:	9a08      	ldr	r2, [sp, #32]
 800c89e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	bfa8      	it	ge
 800c8a4:	461a      	movge	r2, r3
 800c8a6:	2a00      	cmp	r2, #0
 800c8a8:	4691      	mov	r9, r2
 800c8aa:	dc38      	bgt.n	800c91e <_printf_float+0x346>
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9305      	str	r3, [sp, #20]
 800c8b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8b4:	f104 021a 	add.w	r2, r4, #26
 800c8b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c8ba:	9905      	ldr	r1, [sp, #20]
 800c8bc:	9304      	str	r3, [sp, #16]
 800c8be:	eba3 0309 	sub.w	r3, r3, r9
 800c8c2:	428b      	cmp	r3, r1
 800c8c4:	dc33      	bgt.n	800c92e <_printf_float+0x356>
 800c8c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	db3c      	blt.n	800c948 <_printf_float+0x370>
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	07da      	lsls	r2, r3, #31
 800c8d2:	d439      	bmi.n	800c948 <_printf_float+0x370>
 800c8d4:	9a08      	ldr	r2, [sp, #32]
 800c8d6:	9b04      	ldr	r3, [sp, #16]
 800c8d8:	9907      	ldr	r1, [sp, #28]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	eba2 0901 	sub.w	r9, r2, r1
 800c8e0:	4599      	cmp	r9, r3
 800c8e2:	bfa8      	it	ge
 800c8e4:	4699      	movge	r9, r3
 800c8e6:	f1b9 0f00 	cmp.w	r9, #0
 800c8ea:	dc35      	bgt.n	800c958 <_printf_float+0x380>
 800c8ec:	f04f 0800 	mov.w	r8, #0
 800c8f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c8f4:	f104 0a1a 	add.w	sl, r4, #26
 800c8f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c8fc:	1a9b      	subs	r3, r3, r2
 800c8fe:	eba3 0309 	sub.w	r3, r3, r9
 800c902:	4543      	cmp	r3, r8
 800c904:	f77f af75 	ble.w	800c7f2 <_printf_float+0x21a>
 800c908:	2301      	movs	r3, #1
 800c90a:	4652      	mov	r2, sl
 800c90c:	4631      	mov	r1, r6
 800c90e:	4628      	mov	r0, r5
 800c910:	47b8      	blx	r7
 800c912:	3001      	adds	r0, #1
 800c914:	f43f aeae 	beq.w	800c674 <_printf_float+0x9c>
 800c918:	f108 0801 	add.w	r8, r8, #1
 800c91c:	e7ec      	b.n	800c8f8 <_printf_float+0x320>
 800c91e:	4613      	mov	r3, r2
 800c920:	4631      	mov	r1, r6
 800c922:	4642      	mov	r2, r8
 800c924:	4628      	mov	r0, r5
 800c926:	47b8      	blx	r7
 800c928:	3001      	adds	r0, #1
 800c92a:	d1bf      	bne.n	800c8ac <_printf_float+0x2d4>
 800c92c:	e6a2      	b.n	800c674 <_printf_float+0x9c>
 800c92e:	2301      	movs	r3, #1
 800c930:	4631      	mov	r1, r6
 800c932:	4628      	mov	r0, r5
 800c934:	9204      	str	r2, [sp, #16]
 800c936:	47b8      	blx	r7
 800c938:	3001      	adds	r0, #1
 800c93a:	f43f ae9b 	beq.w	800c674 <_printf_float+0x9c>
 800c93e:	9b05      	ldr	r3, [sp, #20]
 800c940:	9a04      	ldr	r2, [sp, #16]
 800c942:	3301      	adds	r3, #1
 800c944:	9305      	str	r3, [sp, #20]
 800c946:	e7b7      	b.n	800c8b8 <_printf_float+0x2e0>
 800c948:	4653      	mov	r3, sl
 800c94a:	465a      	mov	r2, fp
 800c94c:	4631      	mov	r1, r6
 800c94e:	4628      	mov	r0, r5
 800c950:	47b8      	blx	r7
 800c952:	3001      	adds	r0, #1
 800c954:	d1be      	bne.n	800c8d4 <_printf_float+0x2fc>
 800c956:	e68d      	b.n	800c674 <_printf_float+0x9c>
 800c958:	9a04      	ldr	r2, [sp, #16]
 800c95a:	464b      	mov	r3, r9
 800c95c:	4442      	add	r2, r8
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	d1c1      	bne.n	800c8ec <_printf_float+0x314>
 800c968:	e684      	b.n	800c674 <_printf_float+0x9c>
 800c96a:	9a08      	ldr	r2, [sp, #32]
 800c96c:	2a01      	cmp	r2, #1
 800c96e:	dc01      	bgt.n	800c974 <_printf_float+0x39c>
 800c970:	07db      	lsls	r3, r3, #31
 800c972:	d537      	bpl.n	800c9e4 <_printf_float+0x40c>
 800c974:	2301      	movs	r3, #1
 800c976:	4642      	mov	r2, r8
 800c978:	4631      	mov	r1, r6
 800c97a:	4628      	mov	r0, r5
 800c97c:	47b8      	blx	r7
 800c97e:	3001      	adds	r0, #1
 800c980:	f43f ae78 	beq.w	800c674 <_printf_float+0x9c>
 800c984:	4653      	mov	r3, sl
 800c986:	465a      	mov	r2, fp
 800c988:	4631      	mov	r1, r6
 800c98a:	4628      	mov	r0, r5
 800c98c:	47b8      	blx	r7
 800c98e:	3001      	adds	r0, #1
 800c990:	f43f ae70 	beq.w	800c674 <_printf_float+0x9c>
 800c994:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c998:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	d01b      	beq.n	800c9da <_printf_float+0x402>
 800c9a2:	9b08      	ldr	r3, [sp, #32]
 800c9a4:	f108 0201 	add.w	r2, r8, #1
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	4631      	mov	r1, r6
 800c9ac:	4628      	mov	r0, r5
 800c9ae:	47b8      	blx	r7
 800c9b0:	3001      	adds	r0, #1
 800c9b2:	d10e      	bne.n	800c9d2 <_printf_float+0x3fa>
 800c9b4:	e65e      	b.n	800c674 <_printf_float+0x9c>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	464a      	mov	r2, r9
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	4628      	mov	r0, r5
 800c9be:	47b8      	blx	r7
 800c9c0:	3001      	adds	r0, #1
 800c9c2:	f43f ae57 	beq.w	800c674 <_printf_float+0x9c>
 800c9c6:	f108 0801 	add.w	r8, r8, #1
 800c9ca:	9b08      	ldr	r3, [sp, #32]
 800c9cc:	3b01      	subs	r3, #1
 800c9ce:	4543      	cmp	r3, r8
 800c9d0:	dcf1      	bgt.n	800c9b6 <_printf_float+0x3de>
 800c9d2:	9b04      	ldr	r3, [sp, #16]
 800c9d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c9d8:	e6db      	b.n	800c792 <_printf_float+0x1ba>
 800c9da:	f04f 0800 	mov.w	r8, #0
 800c9de:	f104 091a 	add.w	r9, r4, #26
 800c9e2:	e7f2      	b.n	800c9ca <_printf_float+0x3f2>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	4642      	mov	r2, r8
 800c9e8:	e7df      	b.n	800c9aa <_printf_float+0x3d2>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	464a      	mov	r2, r9
 800c9ee:	4631      	mov	r1, r6
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	47b8      	blx	r7
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	f43f ae3d 	beq.w	800c674 <_printf_float+0x9c>
 800c9fa:	f108 0801 	add.w	r8, r8, #1
 800c9fe:	68e3      	ldr	r3, [r4, #12]
 800ca00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca02:	1a5b      	subs	r3, r3, r1
 800ca04:	4543      	cmp	r3, r8
 800ca06:	dcf0      	bgt.n	800c9ea <_printf_float+0x412>
 800ca08:	e6f7      	b.n	800c7fa <_printf_float+0x222>
 800ca0a:	f04f 0800 	mov.w	r8, #0
 800ca0e:	f104 0919 	add.w	r9, r4, #25
 800ca12:	e7f4      	b.n	800c9fe <_printf_float+0x426>

0800ca14 <_printf_common>:
 800ca14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca18:	4616      	mov	r6, r2
 800ca1a:	4699      	mov	r9, r3
 800ca1c:	688a      	ldr	r2, [r1, #8]
 800ca1e:	690b      	ldr	r3, [r1, #16]
 800ca20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca24:	4293      	cmp	r3, r2
 800ca26:	bfb8      	it	lt
 800ca28:	4613      	movlt	r3, r2
 800ca2a:	6033      	str	r3, [r6, #0]
 800ca2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca30:	4607      	mov	r7, r0
 800ca32:	460c      	mov	r4, r1
 800ca34:	b10a      	cbz	r2, 800ca3a <_printf_common+0x26>
 800ca36:	3301      	adds	r3, #1
 800ca38:	6033      	str	r3, [r6, #0]
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	0699      	lsls	r1, r3, #26
 800ca3e:	bf42      	ittt	mi
 800ca40:	6833      	ldrmi	r3, [r6, #0]
 800ca42:	3302      	addmi	r3, #2
 800ca44:	6033      	strmi	r3, [r6, #0]
 800ca46:	6825      	ldr	r5, [r4, #0]
 800ca48:	f015 0506 	ands.w	r5, r5, #6
 800ca4c:	d106      	bne.n	800ca5c <_printf_common+0x48>
 800ca4e:	f104 0a19 	add.w	sl, r4, #25
 800ca52:	68e3      	ldr	r3, [r4, #12]
 800ca54:	6832      	ldr	r2, [r6, #0]
 800ca56:	1a9b      	subs	r3, r3, r2
 800ca58:	42ab      	cmp	r3, r5
 800ca5a:	dc26      	bgt.n	800caaa <_printf_common+0x96>
 800ca5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ca60:	1e13      	subs	r3, r2, #0
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	bf18      	it	ne
 800ca66:	2301      	movne	r3, #1
 800ca68:	0692      	lsls	r2, r2, #26
 800ca6a:	d42b      	bmi.n	800cac4 <_printf_common+0xb0>
 800ca6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ca70:	4649      	mov	r1, r9
 800ca72:	4638      	mov	r0, r7
 800ca74:	47c0      	blx	r8
 800ca76:	3001      	adds	r0, #1
 800ca78:	d01e      	beq.n	800cab8 <_printf_common+0xa4>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	68e5      	ldr	r5, [r4, #12]
 800ca7e:	6832      	ldr	r2, [r6, #0]
 800ca80:	f003 0306 	and.w	r3, r3, #6
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	bf08      	it	eq
 800ca88:	1aad      	subeq	r5, r5, r2
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	6922      	ldr	r2, [r4, #16]
 800ca8e:	bf0c      	ite	eq
 800ca90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca94:	2500      	movne	r5, #0
 800ca96:	4293      	cmp	r3, r2
 800ca98:	bfc4      	itt	gt
 800ca9a:	1a9b      	subgt	r3, r3, r2
 800ca9c:	18ed      	addgt	r5, r5, r3
 800ca9e:	2600      	movs	r6, #0
 800caa0:	341a      	adds	r4, #26
 800caa2:	42b5      	cmp	r5, r6
 800caa4:	d11a      	bne.n	800cadc <_printf_common+0xc8>
 800caa6:	2000      	movs	r0, #0
 800caa8:	e008      	b.n	800cabc <_printf_common+0xa8>
 800caaa:	2301      	movs	r3, #1
 800caac:	4652      	mov	r2, sl
 800caae:	4649      	mov	r1, r9
 800cab0:	4638      	mov	r0, r7
 800cab2:	47c0      	blx	r8
 800cab4:	3001      	adds	r0, #1
 800cab6:	d103      	bne.n	800cac0 <_printf_common+0xac>
 800cab8:	f04f 30ff 	mov.w	r0, #4294967295
 800cabc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cac0:	3501      	adds	r5, #1
 800cac2:	e7c6      	b.n	800ca52 <_printf_common+0x3e>
 800cac4:	18e1      	adds	r1, r4, r3
 800cac6:	1c5a      	adds	r2, r3, #1
 800cac8:	2030      	movs	r0, #48	; 0x30
 800caca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cace:	4422      	add	r2, r4
 800cad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cad8:	3302      	adds	r3, #2
 800cada:	e7c7      	b.n	800ca6c <_printf_common+0x58>
 800cadc:	2301      	movs	r3, #1
 800cade:	4622      	mov	r2, r4
 800cae0:	4649      	mov	r1, r9
 800cae2:	4638      	mov	r0, r7
 800cae4:	47c0      	blx	r8
 800cae6:	3001      	adds	r0, #1
 800cae8:	d0e6      	beq.n	800cab8 <_printf_common+0xa4>
 800caea:	3601      	adds	r6, #1
 800caec:	e7d9      	b.n	800caa2 <_printf_common+0x8e>
	...

0800caf0 <_printf_i>:
 800caf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800caf4:	460c      	mov	r4, r1
 800caf6:	4691      	mov	r9, r2
 800caf8:	7e27      	ldrb	r7, [r4, #24]
 800cafa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cafc:	2f78      	cmp	r7, #120	; 0x78
 800cafe:	4680      	mov	r8, r0
 800cb00:	469a      	mov	sl, r3
 800cb02:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb06:	d807      	bhi.n	800cb18 <_printf_i+0x28>
 800cb08:	2f62      	cmp	r7, #98	; 0x62
 800cb0a:	d80a      	bhi.n	800cb22 <_printf_i+0x32>
 800cb0c:	2f00      	cmp	r7, #0
 800cb0e:	f000 80d8 	beq.w	800ccc2 <_printf_i+0x1d2>
 800cb12:	2f58      	cmp	r7, #88	; 0x58
 800cb14:	f000 80a3 	beq.w	800cc5e <_printf_i+0x16e>
 800cb18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb20:	e03a      	b.n	800cb98 <_printf_i+0xa8>
 800cb22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb26:	2b15      	cmp	r3, #21
 800cb28:	d8f6      	bhi.n	800cb18 <_printf_i+0x28>
 800cb2a:	a001      	add	r0, pc, #4	; (adr r0, 800cb30 <_printf_i+0x40>)
 800cb2c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cb30:	0800cb89 	.word	0x0800cb89
 800cb34:	0800cb9d 	.word	0x0800cb9d
 800cb38:	0800cb19 	.word	0x0800cb19
 800cb3c:	0800cb19 	.word	0x0800cb19
 800cb40:	0800cb19 	.word	0x0800cb19
 800cb44:	0800cb19 	.word	0x0800cb19
 800cb48:	0800cb9d 	.word	0x0800cb9d
 800cb4c:	0800cb19 	.word	0x0800cb19
 800cb50:	0800cb19 	.word	0x0800cb19
 800cb54:	0800cb19 	.word	0x0800cb19
 800cb58:	0800cb19 	.word	0x0800cb19
 800cb5c:	0800cca9 	.word	0x0800cca9
 800cb60:	0800cbcd 	.word	0x0800cbcd
 800cb64:	0800cc8b 	.word	0x0800cc8b
 800cb68:	0800cb19 	.word	0x0800cb19
 800cb6c:	0800cb19 	.word	0x0800cb19
 800cb70:	0800cccb 	.word	0x0800cccb
 800cb74:	0800cb19 	.word	0x0800cb19
 800cb78:	0800cbcd 	.word	0x0800cbcd
 800cb7c:	0800cb19 	.word	0x0800cb19
 800cb80:	0800cb19 	.word	0x0800cb19
 800cb84:	0800cc93 	.word	0x0800cc93
 800cb88:	680b      	ldr	r3, [r1, #0]
 800cb8a:	1d1a      	adds	r2, r3, #4
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	600a      	str	r2, [r1, #0]
 800cb90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cb94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e0a3      	b.n	800cce4 <_printf_i+0x1f4>
 800cb9c:	6825      	ldr	r5, [r4, #0]
 800cb9e:	6808      	ldr	r0, [r1, #0]
 800cba0:	062e      	lsls	r6, r5, #24
 800cba2:	f100 0304 	add.w	r3, r0, #4
 800cba6:	d50a      	bpl.n	800cbbe <_printf_i+0xce>
 800cba8:	6805      	ldr	r5, [r0, #0]
 800cbaa:	600b      	str	r3, [r1, #0]
 800cbac:	2d00      	cmp	r5, #0
 800cbae:	da03      	bge.n	800cbb8 <_printf_i+0xc8>
 800cbb0:	232d      	movs	r3, #45	; 0x2d
 800cbb2:	426d      	negs	r5, r5
 800cbb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbb8:	485e      	ldr	r0, [pc, #376]	; (800cd34 <_printf_i+0x244>)
 800cbba:	230a      	movs	r3, #10
 800cbbc:	e019      	b.n	800cbf2 <_printf_i+0x102>
 800cbbe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cbc2:	6805      	ldr	r5, [r0, #0]
 800cbc4:	600b      	str	r3, [r1, #0]
 800cbc6:	bf18      	it	ne
 800cbc8:	b22d      	sxthne	r5, r5
 800cbca:	e7ef      	b.n	800cbac <_printf_i+0xbc>
 800cbcc:	680b      	ldr	r3, [r1, #0]
 800cbce:	6825      	ldr	r5, [r4, #0]
 800cbd0:	1d18      	adds	r0, r3, #4
 800cbd2:	6008      	str	r0, [r1, #0]
 800cbd4:	0628      	lsls	r0, r5, #24
 800cbd6:	d501      	bpl.n	800cbdc <_printf_i+0xec>
 800cbd8:	681d      	ldr	r5, [r3, #0]
 800cbda:	e002      	b.n	800cbe2 <_printf_i+0xf2>
 800cbdc:	0669      	lsls	r1, r5, #25
 800cbde:	d5fb      	bpl.n	800cbd8 <_printf_i+0xe8>
 800cbe0:	881d      	ldrh	r5, [r3, #0]
 800cbe2:	4854      	ldr	r0, [pc, #336]	; (800cd34 <_printf_i+0x244>)
 800cbe4:	2f6f      	cmp	r7, #111	; 0x6f
 800cbe6:	bf0c      	ite	eq
 800cbe8:	2308      	moveq	r3, #8
 800cbea:	230a      	movne	r3, #10
 800cbec:	2100      	movs	r1, #0
 800cbee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cbf2:	6866      	ldr	r6, [r4, #4]
 800cbf4:	60a6      	str	r6, [r4, #8]
 800cbf6:	2e00      	cmp	r6, #0
 800cbf8:	bfa2      	ittt	ge
 800cbfa:	6821      	ldrge	r1, [r4, #0]
 800cbfc:	f021 0104 	bicge.w	r1, r1, #4
 800cc00:	6021      	strge	r1, [r4, #0]
 800cc02:	b90d      	cbnz	r5, 800cc08 <_printf_i+0x118>
 800cc04:	2e00      	cmp	r6, #0
 800cc06:	d04d      	beq.n	800cca4 <_printf_i+0x1b4>
 800cc08:	4616      	mov	r6, r2
 800cc0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cc0e:	fb03 5711 	mls	r7, r3, r1, r5
 800cc12:	5dc7      	ldrb	r7, [r0, r7]
 800cc14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cc18:	462f      	mov	r7, r5
 800cc1a:	42bb      	cmp	r3, r7
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	d9f4      	bls.n	800cc0a <_printf_i+0x11a>
 800cc20:	2b08      	cmp	r3, #8
 800cc22:	d10b      	bne.n	800cc3c <_printf_i+0x14c>
 800cc24:	6823      	ldr	r3, [r4, #0]
 800cc26:	07df      	lsls	r7, r3, #31
 800cc28:	d508      	bpl.n	800cc3c <_printf_i+0x14c>
 800cc2a:	6923      	ldr	r3, [r4, #16]
 800cc2c:	6861      	ldr	r1, [r4, #4]
 800cc2e:	4299      	cmp	r1, r3
 800cc30:	bfde      	ittt	le
 800cc32:	2330      	movle	r3, #48	; 0x30
 800cc34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cc38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cc3c:	1b92      	subs	r2, r2, r6
 800cc3e:	6122      	str	r2, [r4, #16]
 800cc40:	f8cd a000 	str.w	sl, [sp]
 800cc44:	464b      	mov	r3, r9
 800cc46:	aa03      	add	r2, sp, #12
 800cc48:	4621      	mov	r1, r4
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	f7ff fee2 	bl	800ca14 <_printf_common>
 800cc50:	3001      	adds	r0, #1
 800cc52:	d14c      	bne.n	800ccee <_printf_i+0x1fe>
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295
 800cc58:	b004      	add	sp, #16
 800cc5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5e:	4835      	ldr	r0, [pc, #212]	; (800cd34 <_printf_i+0x244>)
 800cc60:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cc64:	6823      	ldr	r3, [r4, #0]
 800cc66:	680e      	ldr	r6, [r1, #0]
 800cc68:	061f      	lsls	r7, r3, #24
 800cc6a:	f856 5b04 	ldr.w	r5, [r6], #4
 800cc6e:	600e      	str	r6, [r1, #0]
 800cc70:	d514      	bpl.n	800cc9c <_printf_i+0x1ac>
 800cc72:	07d9      	lsls	r1, r3, #31
 800cc74:	bf44      	itt	mi
 800cc76:	f043 0320 	orrmi.w	r3, r3, #32
 800cc7a:	6023      	strmi	r3, [r4, #0]
 800cc7c:	b91d      	cbnz	r5, 800cc86 <_printf_i+0x196>
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	f023 0320 	bic.w	r3, r3, #32
 800cc84:	6023      	str	r3, [r4, #0]
 800cc86:	2310      	movs	r3, #16
 800cc88:	e7b0      	b.n	800cbec <_printf_i+0xfc>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	f043 0320 	orr.w	r3, r3, #32
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	2378      	movs	r3, #120	; 0x78
 800cc94:	4828      	ldr	r0, [pc, #160]	; (800cd38 <_printf_i+0x248>)
 800cc96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc9a:	e7e3      	b.n	800cc64 <_printf_i+0x174>
 800cc9c:	065e      	lsls	r6, r3, #25
 800cc9e:	bf48      	it	mi
 800cca0:	b2ad      	uxthmi	r5, r5
 800cca2:	e7e6      	b.n	800cc72 <_printf_i+0x182>
 800cca4:	4616      	mov	r6, r2
 800cca6:	e7bb      	b.n	800cc20 <_printf_i+0x130>
 800cca8:	680b      	ldr	r3, [r1, #0]
 800ccaa:	6826      	ldr	r6, [r4, #0]
 800ccac:	6960      	ldr	r0, [r4, #20]
 800ccae:	1d1d      	adds	r5, r3, #4
 800ccb0:	600d      	str	r5, [r1, #0]
 800ccb2:	0635      	lsls	r5, r6, #24
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	d501      	bpl.n	800ccbc <_printf_i+0x1cc>
 800ccb8:	6018      	str	r0, [r3, #0]
 800ccba:	e002      	b.n	800ccc2 <_printf_i+0x1d2>
 800ccbc:	0671      	lsls	r1, r6, #25
 800ccbe:	d5fb      	bpl.n	800ccb8 <_printf_i+0x1c8>
 800ccc0:	8018      	strh	r0, [r3, #0]
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	6123      	str	r3, [r4, #16]
 800ccc6:	4616      	mov	r6, r2
 800ccc8:	e7ba      	b.n	800cc40 <_printf_i+0x150>
 800ccca:	680b      	ldr	r3, [r1, #0]
 800cccc:	1d1a      	adds	r2, r3, #4
 800ccce:	600a      	str	r2, [r1, #0]
 800ccd0:	681e      	ldr	r6, [r3, #0]
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	2100      	movs	r1, #0
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7f3 fb0a 	bl	80002f0 <memchr>
 800ccdc:	b108      	cbz	r0, 800cce2 <_printf_i+0x1f2>
 800ccde:	1b80      	subs	r0, r0, r6
 800cce0:	6060      	str	r0, [r4, #4]
 800cce2:	6863      	ldr	r3, [r4, #4]
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	2300      	movs	r3, #0
 800cce8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccec:	e7a8      	b.n	800cc40 <_printf_i+0x150>
 800ccee:	6923      	ldr	r3, [r4, #16]
 800ccf0:	4632      	mov	r2, r6
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	4640      	mov	r0, r8
 800ccf6:	47d0      	blx	sl
 800ccf8:	3001      	adds	r0, #1
 800ccfa:	d0ab      	beq.n	800cc54 <_printf_i+0x164>
 800ccfc:	6823      	ldr	r3, [r4, #0]
 800ccfe:	079b      	lsls	r3, r3, #30
 800cd00:	d413      	bmi.n	800cd2a <_printf_i+0x23a>
 800cd02:	68e0      	ldr	r0, [r4, #12]
 800cd04:	9b03      	ldr	r3, [sp, #12]
 800cd06:	4298      	cmp	r0, r3
 800cd08:	bfb8      	it	lt
 800cd0a:	4618      	movlt	r0, r3
 800cd0c:	e7a4      	b.n	800cc58 <_printf_i+0x168>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	4632      	mov	r2, r6
 800cd12:	4649      	mov	r1, r9
 800cd14:	4640      	mov	r0, r8
 800cd16:	47d0      	blx	sl
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d09b      	beq.n	800cc54 <_printf_i+0x164>
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	9903      	ldr	r1, [sp, #12]
 800cd22:	1a5b      	subs	r3, r3, r1
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	dcf2      	bgt.n	800cd0e <_printf_i+0x21e>
 800cd28:	e7eb      	b.n	800cd02 <_printf_i+0x212>
 800cd2a:	2500      	movs	r5, #0
 800cd2c:	f104 0619 	add.w	r6, r4, #25
 800cd30:	e7f5      	b.n	800cd1e <_printf_i+0x22e>
 800cd32:	bf00      	nop
 800cd34:	0800f1e6 	.word	0x0800f1e6
 800cd38:	0800f1f7 	.word	0x0800f1f7

0800cd3c <siprintf>:
 800cd3c:	b40e      	push	{r1, r2, r3}
 800cd3e:	b500      	push	{lr}
 800cd40:	b09c      	sub	sp, #112	; 0x70
 800cd42:	ab1d      	add	r3, sp, #116	; 0x74
 800cd44:	9002      	str	r0, [sp, #8]
 800cd46:	9006      	str	r0, [sp, #24]
 800cd48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd4c:	4809      	ldr	r0, [pc, #36]	; (800cd74 <siprintf+0x38>)
 800cd4e:	9107      	str	r1, [sp, #28]
 800cd50:	9104      	str	r1, [sp, #16]
 800cd52:	4909      	ldr	r1, [pc, #36]	; (800cd78 <siprintf+0x3c>)
 800cd54:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd58:	9105      	str	r1, [sp, #20]
 800cd5a:	6800      	ldr	r0, [r0, #0]
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	a902      	add	r1, sp, #8
 800cd60:	f001 faca 	bl	800e2f8 <_svfiprintf_r>
 800cd64:	9b02      	ldr	r3, [sp, #8]
 800cd66:	2200      	movs	r2, #0
 800cd68:	701a      	strb	r2, [r3, #0]
 800cd6a:	b01c      	add	sp, #112	; 0x70
 800cd6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd70:	b003      	add	sp, #12
 800cd72:	4770      	bx	lr
 800cd74:	24000020 	.word	0x24000020
 800cd78:	ffff0208 	.word	0xffff0208

0800cd7c <quorem>:
 800cd7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	6903      	ldr	r3, [r0, #16]
 800cd82:	690c      	ldr	r4, [r1, #16]
 800cd84:	42a3      	cmp	r3, r4
 800cd86:	4607      	mov	r7, r0
 800cd88:	f2c0 8081 	blt.w	800ce8e <quorem+0x112>
 800cd8c:	3c01      	subs	r4, #1
 800cd8e:	f101 0814 	add.w	r8, r1, #20
 800cd92:	f100 0514 	add.w	r5, r0, #20
 800cd96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cda0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cda4:	3301      	adds	r3, #1
 800cda6:	429a      	cmp	r2, r3
 800cda8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cdac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cdb0:	fbb2 f6f3 	udiv	r6, r2, r3
 800cdb4:	d331      	bcc.n	800ce1a <quorem+0x9e>
 800cdb6:	f04f 0e00 	mov.w	lr, #0
 800cdba:	4640      	mov	r0, r8
 800cdbc:	46ac      	mov	ip, r5
 800cdbe:	46f2      	mov	sl, lr
 800cdc0:	f850 2b04 	ldr.w	r2, [r0], #4
 800cdc4:	b293      	uxth	r3, r2
 800cdc6:	fb06 e303 	mla	r3, r6, r3, lr
 800cdca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	ebaa 0303 	sub.w	r3, sl, r3
 800cdd4:	0c12      	lsrs	r2, r2, #16
 800cdd6:	f8dc a000 	ldr.w	sl, [ip]
 800cdda:	fb06 e202 	mla	r2, r6, r2, lr
 800cdde:	fa13 f38a 	uxtah	r3, r3, sl
 800cde2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cde6:	fa1f fa82 	uxth.w	sl, r2
 800cdea:	f8dc 2000 	ldr.w	r2, [ip]
 800cdee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cdf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cdfc:	4581      	cmp	r9, r0
 800cdfe:	f84c 3b04 	str.w	r3, [ip], #4
 800ce02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ce06:	d2db      	bcs.n	800cdc0 <quorem+0x44>
 800ce08:	f855 300b 	ldr.w	r3, [r5, fp]
 800ce0c:	b92b      	cbnz	r3, 800ce1a <quorem+0x9e>
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	3b04      	subs	r3, #4
 800ce12:	429d      	cmp	r5, r3
 800ce14:	461a      	mov	r2, r3
 800ce16:	d32e      	bcc.n	800ce76 <quorem+0xfa>
 800ce18:	613c      	str	r4, [r7, #16]
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	f001 f856 	bl	800decc <__mcmp>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	db24      	blt.n	800ce6e <quorem+0xf2>
 800ce24:	3601      	adds	r6, #1
 800ce26:	4628      	mov	r0, r5
 800ce28:	f04f 0c00 	mov.w	ip, #0
 800ce2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ce30:	f8d0 e000 	ldr.w	lr, [r0]
 800ce34:	b293      	uxth	r3, r2
 800ce36:	ebac 0303 	sub.w	r3, ip, r3
 800ce3a:	0c12      	lsrs	r2, r2, #16
 800ce3c:	fa13 f38e 	uxtah	r3, r3, lr
 800ce40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ce44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ce4e:	45c1      	cmp	r9, r8
 800ce50:	f840 3b04 	str.w	r3, [r0], #4
 800ce54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ce58:	d2e8      	bcs.n	800ce2c <quorem+0xb0>
 800ce5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce62:	b922      	cbnz	r2, 800ce6e <quorem+0xf2>
 800ce64:	3b04      	subs	r3, #4
 800ce66:	429d      	cmp	r5, r3
 800ce68:	461a      	mov	r2, r3
 800ce6a:	d30a      	bcc.n	800ce82 <quorem+0x106>
 800ce6c:	613c      	str	r4, [r7, #16]
 800ce6e:	4630      	mov	r0, r6
 800ce70:	b003      	add	sp, #12
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	6812      	ldr	r2, [r2, #0]
 800ce78:	3b04      	subs	r3, #4
 800ce7a:	2a00      	cmp	r2, #0
 800ce7c:	d1cc      	bne.n	800ce18 <quorem+0x9c>
 800ce7e:	3c01      	subs	r4, #1
 800ce80:	e7c7      	b.n	800ce12 <quorem+0x96>
 800ce82:	6812      	ldr	r2, [r2, #0]
 800ce84:	3b04      	subs	r3, #4
 800ce86:	2a00      	cmp	r2, #0
 800ce88:	d1f0      	bne.n	800ce6c <quorem+0xf0>
 800ce8a:	3c01      	subs	r4, #1
 800ce8c:	e7eb      	b.n	800ce66 <quorem+0xea>
 800ce8e:	2000      	movs	r0, #0
 800ce90:	e7ee      	b.n	800ce70 <quorem+0xf4>
 800ce92:	0000      	movs	r0, r0
 800ce94:	0000      	movs	r0, r0
	...

0800ce98 <_dtoa_r>:
 800ce98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	ec59 8b10 	vmov	r8, r9, d0
 800cea0:	b095      	sub	sp, #84	; 0x54
 800cea2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cea4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800cea6:	9107      	str	r1, [sp, #28]
 800cea8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800ceac:	4606      	mov	r6, r0
 800ceae:	9209      	str	r2, [sp, #36]	; 0x24
 800ceb0:	9310      	str	r3, [sp, #64]	; 0x40
 800ceb2:	b975      	cbnz	r5, 800ced2 <_dtoa_r+0x3a>
 800ceb4:	2010      	movs	r0, #16
 800ceb6:	f000 fd75 	bl	800d9a4 <malloc>
 800ceba:	4602      	mov	r2, r0
 800cebc:	6270      	str	r0, [r6, #36]	; 0x24
 800cebe:	b920      	cbnz	r0, 800ceca <_dtoa_r+0x32>
 800cec0:	4bab      	ldr	r3, [pc, #684]	; (800d170 <_dtoa_r+0x2d8>)
 800cec2:	21ea      	movs	r1, #234	; 0xea
 800cec4:	48ab      	ldr	r0, [pc, #684]	; (800d174 <_dtoa_r+0x2dc>)
 800cec6:	f001 fb27 	bl	800e518 <__assert_func>
 800ceca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cece:	6005      	str	r5, [r0, #0]
 800ced0:	60c5      	str	r5, [r0, #12]
 800ced2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ced4:	6819      	ldr	r1, [r3, #0]
 800ced6:	b151      	cbz	r1, 800ceee <_dtoa_r+0x56>
 800ced8:	685a      	ldr	r2, [r3, #4]
 800ceda:	604a      	str	r2, [r1, #4]
 800cedc:	2301      	movs	r3, #1
 800cede:	4093      	lsls	r3, r2
 800cee0:	608b      	str	r3, [r1, #8]
 800cee2:	4630      	mov	r0, r6
 800cee4:	f000 fdb4 	bl	800da50 <_Bfree>
 800cee8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ceea:	2200      	movs	r2, #0
 800ceec:	601a      	str	r2, [r3, #0]
 800ceee:	f1b9 0300 	subs.w	r3, r9, #0
 800cef2:	bfbb      	ittet	lt
 800cef4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cef8:	9303      	strlt	r3, [sp, #12]
 800cefa:	2300      	movge	r3, #0
 800cefc:	2201      	movlt	r2, #1
 800cefe:	bfac      	ite	ge
 800cf00:	6023      	strge	r3, [r4, #0]
 800cf02:	6022      	strlt	r2, [r4, #0]
 800cf04:	4b9c      	ldr	r3, [pc, #624]	; (800d178 <_dtoa_r+0x2e0>)
 800cf06:	9c03      	ldr	r4, [sp, #12]
 800cf08:	43a3      	bics	r3, r4
 800cf0a:	d11a      	bne.n	800cf42 <_dtoa_r+0xaa>
 800cf0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf0e:	f242 730f 	movw	r3, #9999	; 0x270f
 800cf12:	6013      	str	r3, [r2, #0]
 800cf14:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cf18:	ea53 0308 	orrs.w	r3, r3, r8
 800cf1c:	f000 8512 	beq.w	800d944 <_dtoa_r+0xaac>
 800cf20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf22:	b953      	cbnz	r3, 800cf3a <_dtoa_r+0xa2>
 800cf24:	4b95      	ldr	r3, [pc, #596]	; (800d17c <_dtoa_r+0x2e4>)
 800cf26:	e01f      	b.n	800cf68 <_dtoa_r+0xd0>
 800cf28:	4b95      	ldr	r3, [pc, #596]	; (800d180 <_dtoa_r+0x2e8>)
 800cf2a:	9300      	str	r3, [sp, #0]
 800cf2c:	3308      	adds	r3, #8
 800cf2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cf30:	6013      	str	r3, [r2, #0]
 800cf32:	9800      	ldr	r0, [sp, #0]
 800cf34:	b015      	add	sp, #84	; 0x54
 800cf36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3a:	4b90      	ldr	r3, [pc, #576]	; (800d17c <_dtoa_r+0x2e4>)
 800cf3c:	9300      	str	r3, [sp, #0]
 800cf3e:	3303      	adds	r3, #3
 800cf40:	e7f5      	b.n	800cf2e <_dtoa_r+0x96>
 800cf42:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cf52:	d10b      	bne.n	800cf6c <_dtoa_r+0xd4>
 800cf54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cf56:	2301      	movs	r3, #1
 800cf58:	6013      	str	r3, [r2, #0]
 800cf5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 84ee 	beq.w	800d93e <_dtoa_r+0xaa6>
 800cf62:	4888      	ldr	r0, [pc, #544]	; (800d184 <_dtoa_r+0x2ec>)
 800cf64:	6018      	str	r0, [r3, #0]
 800cf66:	1e43      	subs	r3, r0, #1
 800cf68:	9300      	str	r3, [sp, #0]
 800cf6a:	e7e2      	b.n	800cf32 <_dtoa_r+0x9a>
 800cf6c:	a913      	add	r1, sp, #76	; 0x4c
 800cf6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cf72:	aa12      	add	r2, sp, #72	; 0x48
 800cf74:	4630      	mov	r0, r6
 800cf76:	f001 f84d 	bl	800e014 <__d2b>
 800cf7a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800cf7e:	4605      	mov	r5, r0
 800cf80:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cf82:	2900      	cmp	r1, #0
 800cf84:	d047      	beq.n	800d016 <_dtoa_r+0x17e>
 800cf86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cf88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cf8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cf90:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800cf94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf98:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cf9c:	2400      	movs	r4, #0
 800cf9e:	ec43 2b16 	vmov	d6, r2, r3
 800cfa2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cfa6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d158 <_dtoa_r+0x2c0>
 800cfaa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cfae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d160 <_dtoa_r+0x2c8>
 800cfb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cfb6:	eeb0 7b46 	vmov.f64	d7, d6
 800cfba:	ee06 1a90 	vmov	s13, r1
 800cfbe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800cfc2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d168 <_dtoa_r+0x2d0>
 800cfc6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cfca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cfce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd6:	ee16 ba90 	vmov	fp, s13
 800cfda:	9411      	str	r4, [sp, #68]	; 0x44
 800cfdc:	d508      	bpl.n	800cff0 <_dtoa_r+0x158>
 800cfde:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cfe2:	eeb4 6b47 	vcmp.f64	d6, d7
 800cfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfea:	bf18      	it	ne
 800cfec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cff0:	f1bb 0f16 	cmp.w	fp, #22
 800cff4:	d832      	bhi.n	800d05c <_dtoa_r+0x1c4>
 800cff6:	4b64      	ldr	r3, [pc, #400]	; (800d188 <_dtoa_r+0x2f0>)
 800cff8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cffc:	ed93 7b00 	vldr	d7, [r3]
 800d000:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d004:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00c:	d501      	bpl.n	800d012 <_dtoa_r+0x17a>
 800d00e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d012:	2300      	movs	r3, #0
 800d014:	e023      	b.n	800d05e <_dtoa_r+0x1c6>
 800d016:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d018:	4401      	add	r1, r0
 800d01a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d01e:	2b20      	cmp	r3, #32
 800d020:	bfc3      	ittte	gt
 800d022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d026:	fa04 f303 	lslgt.w	r3, r4, r3
 800d02a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d02e:	f1c3 0320 	rsble	r3, r3, #32
 800d032:	bfc6      	itte	gt
 800d034:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d038:	ea43 0308 	orrgt.w	r3, r3, r8
 800d03c:	fa08 f303 	lslle.w	r3, r8, r3
 800d040:	ee07 3a90 	vmov	s15, r3
 800d044:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d048:	3901      	subs	r1, #1
 800d04a:	ed8d 7b00 	vstr	d7, [sp]
 800d04e:	9c01      	ldr	r4, [sp, #4]
 800d050:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d054:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d058:	2401      	movs	r4, #1
 800d05a:	e7a0      	b.n	800cf9e <_dtoa_r+0x106>
 800d05c:	2301      	movs	r3, #1
 800d05e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d060:	1a43      	subs	r3, r0, r1
 800d062:	1e5a      	subs	r2, r3, #1
 800d064:	bf45      	ittet	mi
 800d066:	f1c3 0301 	rsbmi	r3, r3, #1
 800d06a:	9305      	strmi	r3, [sp, #20]
 800d06c:	2300      	movpl	r3, #0
 800d06e:	2300      	movmi	r3, #0
 800d070:	9206      	str	r2, [sp, #24]
 800d072:	bf54      	ite	pl
 800d074:	9305      	strpl	r3, [sp, #20]
 800d076:	9306      	strmi	r3, [sp, #24]
 800d078:	f1bb 0f00 	cmp.w	fp, #0
 800d07c:	db18      	blt.n	800d0b0 <_dtoa_r+0x218>
 800d07e:	9b06      	ldr	r3, [sp, #24]
 800d080:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d084:	445b      	add	r3, fp
 800d086:	9306      	str	r3, [sp, #24]
 800d088:	2300      	movs	r3, #0
 800d08a:	9a07      	ldr	r2, [sp, #28]
 800d08c:	2a09      	cmp	r2, #9
 800d08e:	d849      	bhi.n	800d124 <_dtoa_r+0x28c>
 800d090:	2a05      	cmp	r2, #5
 800d092:	bfc4      	itt	gt
 800d094:	3a04      	subgt	r2, #4
 800d096:	9207      	strgt	r2, [sp, #28]
 800d098:	9a07      	ldr	r2, [sp, #28]
 800d09a:	f1a2 0202 	sub.w	r2, r2, #2
 800d09e:	bfcc      	ite	gt
 800d0a0:	2400      	movgt	r4, #0
 800d0a2:	2401      	movle	r4, #1
 800d0a4:	2a03      	cmp	r2, #3
 800d0a6:	d848      	bhi.n	800d13a <_dtoa_r+0x2a2>
 800d0a8:	e8df f002 	tbb	[pc, r2]
 800d0ac:	3a2c2e0b 	.word	0x3a2c2e0b
 800d0b0:	9b05      	ldr	r3, [sp, #20]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	eba3 030b 	sub.w	r3, r3, fp
 800d0b8:	9305      	str	r3, [sp, #20]
 800d0ba:	920e      	str	r2, [sp, #56]	; 0x38
 800d0bc:	f1cb 0300 	rsb	r3, fp, #0
 800d0c0:	e7e3      	b.n	800d08a <_dtoa_r+0x1f2>
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	9208      	str	r2, [sp, #32]
 800d0c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	dc39      	bgt.n	800d140 <_dtoa_r+0x2a8>
 800d0cc:	f04f 0a01 	mov.w	sl, #1
 800d0d0:	46d1      	mov	r9, sl
 800d0d2:	4652      	mov	r2, sl
 800d0d4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d0d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d0da:	2100      	movs	r1, #0
 800d0dc:	6079      	str	r1, [r7, #4]
 800d0de:	2004      	movs	r0, #4
 800d0e0:	f100 0c14 	add.w	ip, r0, #20
 800d0e4:	4594      	cmp	ip, r2
 800d0e6:	6879      	ldr	r1, [r7, #4]
 800d0e8:	d92f      	bls.n	800d14a <_dtoa_r+0x2b2>
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	930c      	str	r3, [sp, #48]	; 0x30
 800d0ee:	f000 fc6f 	bl	800d9d0 <_Balloc>
 800d0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0f4:	9000      	str	r0, [sp, #0]
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d149      	bne.n	800d190 <_dtoa_r+0x2f8>
 800d0fc:	4b23      	ldr	r3, [pc, #140]	; (800d18c <_dtoa_r+0x2f4>)
 800d0fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d102:	e6df      	b.n	800cec4 <_dtoa_r+0x2c>
 800d104:	2201      	movs	r2, #1
 800d106:	e7dd      	b.n	800d0c4 <_dtoa_r+0x22c>
 800d108:	2200      	movs	r2, #0
 800d10a:	9208      	str	r2, [sp, #32]
 800d10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d10e:	eb0b 0a02 	add.w	sl, fp, r2
 800d112:	f10a 0901 	add.w	r9, sl, #1
 800d116:	464a      	mov	r2, r9
 800d118:	2a01      	cmp	r2, #1
 800d11a:	bfb8      	it	lt
 800d11c:	2201      	movlt	r2, #1
 800d11e:	e7db      	b.n	800d0d8 <_dtoa_r+0x240>
 800d120:	2201      	movs	r2, #1
 800d122:	e7f2      	b.n	800d10a <_dtoa_r+0x272>
 800d124:	2401      	movs	r4, #1
 800d126:	2200      	movs	r2, #0
 800d128:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d12c:	f04f 3aff 	mov.w	sl, #4294967295
 800d130:	2100      	movs	r1, #0
 800d132:	46d1      	mov	r9, sl
 800d134:	2212      	movs	r2, #18
 800d136:	9109      	str	r1, [sp, #36]	; 0x24
 800d138:	e7ce      	b.n	800d0d8 <_dtoa_r+0x240>
 800d13a:	2201      	movs	r2, #1
 800d13c:	9208      	str	r2, [sp, #32]
 800d13e:	e7f5      	b.n	800d12c <_dtoa_r+0x294>
 800d140:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d144:	46d1      	mov	r9, sl
 800d146:	4652      	mov	r2, sl
 800d148:	e7c6      	b.n	800d0d8 <_dtoa_r+0x240>
 800d14a:	3101      	adds	r1, #1
 800d14c:	6079      	str	r1, [r7, #4]
 800d14e:	0040      	lsls	r0, r0, #1
 800d150:	e7c6      	b.n	800d0e0 <_dtoa_r+0x248>
 800d152:	bf00      	nop
 800d154:	f3af 8000 	nop.w
 800d158:	636f4361 	.word	0x636f4361
 800d15c:	3fd287a7 	.word	0x3fd287a7
 800d160:	8b60c8b3 	.word	0x8b60c8b3
 800d164:	3fc68a28 	.word	0x3fc68a28
 800d168:	509f79fb 	.word	0x509f79fb
 800d16c:	3fd34413 	.word	0x3fd34413
 800d170:	0800f215 	.word	0x0800f215
 800d174:	0800f22c 	.word	0x0800f22c
 800d178:	7ff00000 	.word	0x7ff00000
 800d17c:	0800f211 	.word	0x0800f211
 800d180:	0800f208 	.word	0x0800f208
 800d184:	0800f1e5 	.word	0x0800f1e5
 800d188:	0800f328 	.word	0x0800f328
 800d18c:	0800f28b 	.word	0x0800f28b
 800d190:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d192:	9900      	ldr	r1, [sp, #0]
 800d194:	6011      	str	r1, [r2, #0]
 800d196:	f1b9 0f0e 	cmp.w	r9, #14
 800d19a:	d872      	bhi.n	800d282 <_dtoa_r+0x3ea>
 800d19c:	2c00      	cmp	r4, #0
 800d19e:	d070      	beq.n	800d282 <_dtoa_r+0x3ea>
 800d1a0:	f1bb 0f00 	cmp.w	fp, #0
 800d1a4:	f340 80a6 	ble.w	800d2f4 <_dtoa_r+0x45c>
 800d1a8:	49ca      	ldr	r1, [pc, #808]	; (800d4d4 <_dtoa_r+0x63c>)
 800d1aa:	f00b 020f 	and.w	r2, fp, #15
 800d1ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d1b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d1b6:	ed92 7b00 	vldr	d7, [r2]
 800d1ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d1be:	f000 808d 	beq.w	800d2dc <_dtoa_r+0x444>
 800d1c2:	4ac5      	ldr	r2, [pc, #788]	; (800d4d8 <_dtoa_r+0x640>)
 800d1c4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d1c8:	ed92 6b08 	vldr	d6, [r2, #32]
 800d1cc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d1d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d1d4:	f001 010f 	and.w	r1, r1, #15
 800d1d8:	2203      	movs	r2, #3
 800d1da:	48bf      	ldr	r0, [pc, #764]	; (800d4d8 <_dtoa_r+0x640>)
 800d1dc:	2900      	cmp	r1, #0
 800d1de:	d17f      	bne.n	800d2e0 <_dtoa_r+0x448>
 800d1e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d1e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d1e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d1ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d1ee:	2900      	cmp	r1, #0
 800d1f0:	f000 80b2 	beq.w	800d358 <_dtoa_r+0x4c0>
 800d1f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d1f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d1fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d204:	f140 80a8 	bpl.w	800d358 <_dtoa_r+0x4c0>
 800d208:	f1b9 0f00 	cmp.w	r9, #0
 800d20c:	f000 80a4 	beq.w	800d358 <_dtoa_r+0x4c0>
 800d210:	f1ba 0f00 	cmp.w	sl, #0
 800d214:	dd31      	ble.n	800d27a <_dtoa_r+0x3e2>
 800d216:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d21a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d21e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d222:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d226:	3201      	adds	r2, #1
 800d228:	4650      	mov	r0, sl
 800d22a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d22e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d232:	ee07 2a90 	vmov	s15, r2
 800d236:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d23a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d23e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d242:	9c03      	ldr	r4, [sp, #12]
 800d244:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d248:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d24c:	2800      	cmp	r0, #0
 800d24e:	f040 8086 	bne.w	800d35e <_dtoa_r+0x4c6>
 800d252:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d256:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d25a:	ec42 1b17 	vmov	d7, r1, r2
 800d25e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d266:	f300 8272 	bgt.w	800d74e <_dtoa_r+0x8b6>
 800d26a:	eeb1 7b47 	vneg.f64	d7, d7
 800d26e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d276:	f100 8267 	bmi.w	800d748 <_dtoa_r+0x8b0>
 800d27a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d27e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d284:	2a00      	cmp	r2, #0
 800d286:	f2c0 8129 	blt.w	800d4dc <_dtoa_r+0x644>
 800d28a:	f1bb 0f0e 	cmp.w	fp, #14
 800d28e:	f300 8125 	bgt.w	800d4dc <_dtoa_r+0x644>
 800d292:	4b90      	ldr	r3, [pc, #576]	; (800d4d4 <_dtoa_r+0x63c>)
 800d294:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d298:	ed93 6b00 	vldr	d6, [r3]
 800d29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	f280 80c3 	bge.w	800d42a <_dtoa_r+0x592>
 800d2a4:	f1b9 0f00 	cmp.w	r9, #0
 800d2a8:	f300 80bf 	bgt.w	800d42a <_dtoa_r+0x592>
 800d2ac:	f040 824c 	bne.w	800d748 <_dtoa_r+0x8b0>
 800d2b0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d2b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d2b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c4:	464c      	mov	r4, r9
 800d2c6:	464f      	mov	r7, r9
 800d2c8:	f280 8222 	bge.w	800d710 <_dtoa_r+0x878>
 800d2cc:	f8dd 8000 	ldr.w	r8, [sp]
 800d2d0:	2331      	movs	r3, #49	; 0x31
 800d2d2:	f808 3b01 	strb.w	r3, [r8], #1
 800d2d6:	f10b 0b01 	add.w	fp, fp, #1
 800d2da:	e21e      	b.n	800d71a <_dtoa_r+0x882>
 800d2dc:	2202      	movs	r2, #2
 800d2de:	e77c      	b.n	800d1da <_dtoa_r+0x342>
 800d2e0:	07cc      	lsls	r4, r1, #31
 800d2e2:	d504      	bpl.n	800d2ee <_dtoa_r+0x456>
 800d2e4:	ed90 6b00 	vldr	d6, [r0]
 800d2e8:	3201      	adds	r2, #1
 800d2ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d2ee:	1049      	asrs	r1, r1, #1
 800d2f0:	3008      	adds	r0, #8
 800d2f2:	e773      	b.n	800d1dc <_dtoa_r+0x344>
 800d2f4:	d02e      	beq.n	800d354 <_dtoa_r+0x4bc>
 800d2f6:	f1cb 0100 	rsb	r1, fp, #0
 800d2fa:	4a76      	ldr	r2, [pc, #472]	; (800d4d4 <_dtoa_r+0x63c>)
 800d2fc:	f001 000f 	and.w	r0, r1, #15
 800d300:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d304:	ed92 7b00 	vldr	d7, [r2]
 800d308:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d30c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d310:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d314:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d318:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d31c:	486e      	ldr	r0, [pc, #440]	; (800d4d8 <_dtoa_r+0x640>)
 800d31e:	1109      	asrs	r1, r1, #4
 800d320:	2400      	movs	r4, #0
 800d322:	2202      	movs	r2, #2
 800d324:	b939      	cbnz	r1, 800d336 <_dtoa_r+0x49e>
 800d326:	2c00      	cmp	r4, #0
 800d328:	f43f af60 	beq.w	800d1ec <_dtoa_r+0x354>
 800d32c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d334:	e75a      	b.n	800d1ec <_dtoa_r+0x354>
 800d336:	07cf      	lsls	r7, r1, #31
 800d338:	d509      	bpl.n	800d34e <_dtoa_r+0x4b6>
 800d33a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d33e:	ed90 7b00 	vldr	d7, [r0]
 800d342:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d346:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d34a:	3201      	adds	r2, #1
 800d34c:	2401      	movs	r4, #1
 800d34e:	1049      	asrs	r1, r1, #1
 800d350:	3008      	adds	r0, #8
 800d352:	e7e7      	b.n	800d324 <_dtoa_r+0x48c>
 800d354:	2202      	movs	r2, #2
 800d356:	e749      	b.n	800d1ec <_dtoa_r+0x354>
 800d358:	465f      	mov	r7, fp
 800d35a:	4648      	mov	r0, r9
 800d35c:	e765      	b.n	800d22a <_dtoa_r+0x392>
 800d35e:	ec42 1b17 	vmov	d7, r1, r2
 800d362:	4a5c      	ldr	r2, [pc, #368]	; (800d4d4 <_dtoa_r+0x63c>)
 800d364:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d368:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d36c:	9a00      	ldr	r2, [sp, #0]
 800d36e:	1814      	adds	r4, r2, r0
 800d370:	9a08      	ldr	r2, [sp, #32]
 800d372:	b352      	cbz	r2, 800d3ca <_dtoa_r+0x532>
 800d374:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d378:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d37c:	f8dd 8000 	ldr.w	r8, [sp]
 800d380:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d384:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d388:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d38c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d390:	ee14 2a90 	vmov	r2, s9
 800d394:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d398:	3230      	adds	r2, #48	; 0x30
 800d39a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d39e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3a6:	f808 2b01 	strb.w	r2, [r8], #1
 800d3aa:	d439      	bmi.n	800d420 <_dtoa_r+0x588>
 800d3ac:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d3b0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b8:	d472      	bmi.n	800d4a0 <_dtoa_r+0x608>
 800d3ba:	45a0      	cmp	r8, r4
 800d3bc:	f43f af5d 	beq.w	800d27a <_dtoa_r+0x3e2>
 800d3c0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d3c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d3c8:	e7e0      	b.n	800d38c <_dtoa_r+0x4f4>
 800d3ca:	f8dd 8000 	ldr.w	r8, [sp]
 800d3ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d3d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d3dc:	ee14 2a90 	vmov	r2, s9
 800d3e0:	3230      	adds	r2, #48	; 0x30
 800d3e2:	f808 2b01 	strb.w	r2, [r8], #1
 800d3e6:	45a0      	cmp	r8, r4
 800d3e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d3ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d3f0:	d118      	bne.n	800d424 <_dtoa_r+0x58c>
 800d3f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d3f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d3fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	dc4d      	bgt.n	800d4a0 <_dtoa_r+0x608>
 800d404:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d408:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d410:	f57f af33 	bpl.w	800d27a <_dtoa_r+0x3e2>
 800d414:	4688      	mov	r8, r1
 800d416:	3901      	subs	r1, #1
 800d418:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d41c:	2b30      	cmp	r3, #48	; 0x30
 800d41e:	d0f9      	beq.n	800d414 <_dtoa_r+0x57c>
 800d420:	46bb      	mov	fp, r7
 800d422:	e02a      	b.n	800d47a <_dtoa_r+0x5e2>
 800d424:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d428:	e7d6      	b.n	800d3d8 <_dtoa_r+0x540>
 800d42a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d42e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d432:	f8dd 8000 	ldr.w	r8, [sp]
 800d436:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d43a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d43e:	ee15 3a10 	vmov	r3, s10
 800d442:	3330      	adds	r3, #48	; 0x30
 800d444:	f808 3b01 	strb.w	r3, [r8], #1
 800d448:	9b00      	ldr	r3, [sp, #0]
 800d44a:	eba8 0303 	sub.w	r3, r8, r3
 800d44e:	4599      	cmp	r9, r3
 800d450:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d454:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d458:	d133      	bne.n	800d4c2 <_dtoa_r+0x62a>
 800d45a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d45e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d466:	dc1a      	bgt.n	800d49e <_dtoa_r+0x606>
 800d468:	eeb4 7b46 	vcmp.f64	d7, d6
 800d46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d470:	d103      	bne.n	800d47a <_dtoa_r+0x5e2>
 800d472:	ee15 3a10 	vmov	r3, s10
 800d476:	07d9      	lsls	r1, r3, #31
 800d478:	d411      	bmi.n	800d49e <_dtoa_r+0x606>
 800d47a:	4629      	mov	r1, r5
 800d47c:	4630      	mov	r0, r6
 800d47e:	f000 fae7 	bl	800da50 <_Bfree>
 800d482:	2300      	movs	r3, #0
 800d484:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d486:	f888 3000 	strb.w	r3, [r8]
 800d48a:	f10b 0301 	add.w	r3, fp, #1
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d492:	2b00      	cmp	r3, #0
 800d494:	f43f ad4d 	beq.w	800cf32 <_dtoa_r+0x9a>
 800d498:	f8c3 8000 	str.w	r8, [r3]
 800d49c:	e549      	b.n	800cf32 <_dtoa_r+0x9a>
 800d49e:	465f      	mov	r7, fp
 800d4a0:	4643      	mov	r3, r8
 800d4a2:	4698      	mov	r8, r3
 800d4a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4a8:	2a39      	cmp	r2, #57	; 0x39
 800d4aa:	d106      	bne.n	800d4ba <_dtoa_r+0x622>
 800d4ac:	9a00      	ldr	r2, [sp, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d1f7      	bne.n	800d4a2 <_dtoa_r+0x60a>
 800d4b2:	9900      	ldr	r1, [sp, #0]
 800d4b4:	2230      	movs	r2, #48	; 0x30
 800d4b6:	3701      	adds	r7, #1
 800d4b8:	700a      	strb	r2, [r1, #0]
 800d4ba:	781a      	ldrb	r2, [r3, #0]
 800d4bc:	3201      	adds	r2, #1
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	e7ae      	b.n	800d420 <_dtoa_r+0x588>
 800d4c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d4c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4ce:	d1b2      	bne.n	800d436 <_dtoa_r+0x59e>
 800d4d0:	e7d3      	b.n	800d47a <_dtoa_r+0x5e2>
 800d4d2:	bf00      	nop
 800d4d4:	0800f328 	.word	0x0800f328
 800d4d8:	0800f300 	.word	0x0800f300
 800d4dc:	9908      	ldr	r1, [sp, #32]
 800d4de:	2900      	cmp	r1, #0
 800d4e0:	f000 80d1 	beq.w	800d686 <_dtoa_r+0x7ee>
 800d4e4:	9907      	ldr	r1, [sp, #28]
 800d4e6:	2901      	cmp	r1, #1
 800d4e8:	f300 80b4 	bgt.w	800d654 <_dtoa_r+0x7bc>
 800d4ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d4ee:	2900      	cmp	r1, #0
 800d4f0:	f000 80ac 	beq.w	800d64c <_dtoa_r+0x7b4>
 800d4f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d4f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d4fc:	461c      	mov	r4, r3
 800d4fe:	930a      	str	r3, [sp, #40]	; 0x28
 800d500:	9b05      	ldr	r3, [sp, #20]
 800d502:	4413      	add	r3, r2
 800d504:	9305      	str	r3, [sp, #20]
 800d506:	9b06      	ldr	r3, [sp, #24]
 800d508:	2101      	movs	r1, #1
 800d50a:	4413      	add	r3, r2
 800d50c:	4630      	mov	r0, r6
 800d50e:	9306      	str	r3, [sp, #24]
 800d510:	f000 fb5a 	bl	800dbc8 <__i2b>
 800d514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d516:	4607      	mov	r7, r0
 800d518:	f1b8 0f00 	cmp.w	r8, #0
 800d51c:	dd0d      	ble.n	800d53a <_dtoa_r+0x6a2>
 800d51e:	9a06      	ldr	r2, [sp, #24]
 800d520:	2a00      	cmp	r2, #0
 800d522:	dd0a      	ble.n	800d53a <_dtoa_r+0x6a2>
 800d524:	4542      	cmp	r2, r8
 800d526:	9905      	ldr	r1, [sp, #20]
 800d528:	bfa8      	it	ge
 800d52a:	4642      	movge	r2, r8
 800d52c:	1a89      	subs	r1, r1, r2
 800d52e:	9105      	str	r1, [sp, #20]
 800d530:	9906      	ldr	r1, [sp, #24]
 800d532:	eba8 0802 	sub.w	r8, r8, r2
 800d536:	1a8a      	subs	r2, r1, r2
 800d538:	9206      	str	r2, [sp, #24]
 800d53a:	b303      	cbz	r3, 800d57e <_dtoa_r+0x6e6>
 800d53c:	9a08      	ldr	r2, [sp, #32]
 800d53e:	2a00      	cmp	r2, #0
 800d540:	f000 80a6 	beq.w	800d690 <_dtoa_r+0x7f8>
 800d544:	2c00      	cmp	r4, #0
 800d546:	dd13      	ble.n	800d570 <_dtoa_r+0x6d8>
 800d548:	4639      	mov	r1, r7
 800d54a:	4622      	mov	r2, r4
 800d54c:	4630      	mov	r0, r6
 800d54e:	930c      	str	r3, [sp, #48]	; 0x30
 800d550:	f000 fbf6 	bl	800dd40 <__pow5mult>
 800d554:	462a      	mov	r2, r5
 800d556:	4601      	mov	r1, r0
 800d558:	4607      	mov	r7, r0
 800d55a:	4630      	mov	r0, r6
 800d55c:	f000 fb4a 	bl	800dbf4 <__multiply>
 800d560:	4629      	mov	r1, r5
 800d562:	900a      	str	r0, [sp, #40]	; 0x28
 800d564:	4630      	mov	r0, r6
 800d566:	f000 fa73 	bl	800da50 <_Bfree>
 800d56a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d56c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d56e:	4615      	mov	r5, r2
 800d570:	1b1a      	subs	r2, r3, r4
 800d572:	d004      	beq.n	800d57e <_dtoa_r+0x6e6>
 800d574:	4629      	mov	r1, r5
 800d576:	4630      	mov	r0, r6
 800d578:	f000 fbe2 	bl	800dd40 <__pow5mult>
 800d57c:	4605      	mov	r5, r0
 800d57e:	2101      	movs	r1, #1
 800d580:	4630      	mov	r0, r6
 800d582:	f000 fb21 	bl	800dbc8 <__i2b>
 800d586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d588:	2b00      	cmp	r3, #0
 800d58a:	4604      	mov	r4, r0
 800d58c:	f340 8082 	ble.w	800d694 <_dtoa_r+0x7fc>
 800d590:	461a      	mov	r2, r3
 800d592:	4601      	mov	r1, r0
 800d594:	4630      	mov	r0, r6
 800d596:	f000 fbd3 	bl	800dd40 <__pow5mult>
 800d59a:	9b07      	ldr	r3, [sp, #28]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	4604      	mov	r4, r0
 800d5a0:	dd7b      	ble.n	800d69a <_dtoa_r+0x802>
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	930a      	str	r3, [sp, #40]	; 0x28
 800d5a6:	6922      	ldr	r2, [r4, #16]
 800d5a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d5ac:	6910      	ldr	r0, [r2, #16]
 800d5ae:	f000 fabb 	bl	800db28 <__hi0bits>
 800d5b2:	f1c0 0020 	rsb	r0, r0, #32
 800d5b6:	9b06      	ldr	r3, [sp, #24]
 800d5b8:	4418      	add	r0, r3
 800d5ba:	f010 001f 	ands.w	r0, r0, #31
 800d5be:	f000 808d 	beq.w	800d6dc <_dtoa_r+0x844>
 800d5c2:	f1c0 0220 	rsb	r2, r0, #32
 800d5c6:	2a04      	cmp	r2, #4
 800d5c8:	f340 8086 	ble.w	800d6d8 <_dtoa_r+0x840>
 800d5cc:	f1c0 001c 	rsb	r0, r0, #28
 800d5d0:	9b05      	ldr	r3, [sp, #20]
 800d5d2:	4403      	add	r3, r0
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	9b06      	ldr	r3, [sp, #24]
 800d5d8:	4403      	add	r3, r0
 800d5da:	4480      	add	r8, r0
 800d5dc:	9306      	str	r3, [sp, #24]
 800d5de:	9b05      	ldr	r3, [sp, #20]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	dd05      	ble.n	800d5f0 <_dtoa_r+0x758>
 800d5e4:	4629      	mov	r1, r5
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	4630      	mov	r0, r6
 800d5ea:	f000 fc03 	bl	800ddf4 <__lshift>
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	9b06      	ldr	r3, [sp, #24]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	dd05      	ble.n	800d602 <_dtoa_r+0x76a>
 800d5f6:	4621      	mov	r1, r4
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f000 fbfa 	bl	800ddf4 <__lshift>
 800d600:	4604      	mov	r4, r0
 800d602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d06b      	beq.n	800d6e0 <_dtoa_r+0x848>
 800d608:	4621      	mov	r1, r4
 800d60a:	4628      	mov	r0, r5
 800d60c:	f000 fc5e 	bl	800decc <__mcmp>
 800d610:	2800      	cmp	r0, #0
 800d612:	da65      	bge.n	800d6e0 <_dtoa_r+0x848>
 800d614:	2300      	movs	r3, #0
 800d616:	4629      	mov	r1, r5
 800d618:	220a      	movs	r2, #10
 800d61a:	4630      	mov	r0, r6
 800d61c:	f000 fa3a 	bl	800da94 <__multadd>
 800d620:	9b08      	ldr	r3, [sp, #32]
 800d622:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d626:	4605      	mov	r5, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f000 8192 	beq.w	800d952 <_dtoa_r+0xaba>
 800d62e:	4639      	mov	r1, r7
 800d630:	2300      	movs	r3, #0
 800d632:	220a      	movs	r2, #10
 800d634:	4630      	mov	r0, r6
 800d636:	f000 fa2d 	bl	800da94 <__multadd>
 800d63a:	f1ba 0f00 	cmp.w	sl, #0
 800d63e:	4607      	mov	r7, r0
 800d640:	f300 808e 	bgt.w	800d760 <_dtoa_r+0x8c8>
 800d644:	9b07      	ldr	r3, [sp, #28]
 800d646:	2b02      	cmp	r3, #2
 800d648:	dc51      	bgt.n	800d6ee <_dtoa_r+0x856>
 800d64a:	e089      	b.n	800d760 <_dtoa_r+0x8c8>
 800d64c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d64e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d652:	e751      	b.n	800d4f8 <_dtoa_r+0x660>
 800d654:	f109 34ff 	add.w	r4, r9, #4294967295
 800d658:	42a3      	cmp	r3, r4
 800d65a:	bfbf      	itttt	lt
 800d65c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d65e:	1ae3      	sublt	r3, r4, r3
 800d660:	18d2      	addlt	r2, r2, r3
 800d662:	4613      	movlt	r3, r2
 800d664:	bfb7      	itett	lt
 800d666:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d668:	1b1c      	subge	r4, r3, r4
 800d66a:	4623      	movlt	r3, r4
 800d66c:	2400      	movlt	r4, #0
 800d66e:	f1b9 0f00 	cmp.w	r9, #0
 800d672:	bfb5      	itete	lt
 800d674:	9a05      	ldrlt	r2, [sp, #20]
 800d676:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d67a:	eba2 0809 	sublt.w	r8, r2, r9
 800d67e:	464a      	movge	r2, r9
 800d680:	bfb8      	it	lt
 800d682:	2200      	movlt	r2, #0
 800d684:	e73b      	b.n	800d4fe <_dtoa_r+0x666>
 800d686:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d68a:	9f08      	ldr	r7, [sp, #32]
 800d68c:	461c      	mov	r4, r3
 800d68e:	e743      	b.n	800d518 <_dtoa_r+0x680>
 800d690:	461a      	mov	r2, r3
 800d692:	e76f      	b.n	800d574 <_dtoa_r+0x6dc>
 800d694:	9b07      	ldr	r3, [sp, #28]
 800d696:	2b01      	cmp	r3, #1
 800d698:	dc18      	bgt.n	800d6cc <_dtoa_r+0x834>
 800d69a:	9b02      	ldr	r3, [sp, #8]
 800d69c:	b9b3      	cbnz	r3, 800d6cc <_dtoa_r+0x834>
 800d69e:	9b03      	ldr	r3, [sp, #12]
 800d6a0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d6a4:	b9a2      	cbnz	r2, 800d6d0 <_dtoa_r+0x838>
 800d6a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d6aa:	0d12      	lsrs	r2, r2, #20
 800d6ac:	0512      	lsls	r2, r2, #20
 800d6ae:	b18a      	cbz	r2, 800d6d4 <_dtoa_r+0x83c>
 800d6b0:	9b05      	ldr	r3, [sp, #20]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	9305      	str	r3, [sp, #20]
 800d6b6:	9b06      	ldr	r3, [sp, #24]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	9306      	str	r3, [sp, #24]
 800d6bc:	2301      	movs	r3, #1
 800d6be:	930a      	str	r3, [sp, #40]	; 0x28
 800d6c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f47f af6f 	bne.w	800d5a6 <_dtoa_r+0x70e>
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	e774      	b.n	800d5b6 <_dtoa_r+0x71e>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	e7f6      	b.n	800d6be <_dtoa_r+0x826>
 800d6d0:	9b02      	ldr	r3, [sp, #8]
 800d6d2:	e7f4      	b.n	800d6be <_dtoa_r+0x826>
 800d6d4:	920a      	str	r2, [sp, #40]	; 0x28
 800d6d6:	e7f3      	b.n	800d6c0 <_dtoa_r+0x828>
 800d6d8:	d081      	beq.n	800d5de <_dtoa_r+0x746>
 800d6da:	4610      	mov	r0, r2
 800d6dc:	301c      	adds	r0, #28
 800d6de:	e777      	b.n	800d5d0 <_dtoa_r+0x738>
 800d6e0:	f1b9 0f00 	cmp.w	r9, #0
 800d6e4:	dc37      	bgt.n	800d756 <_dtoa_r+0x8be>
 800d6e6:	9b07      	ldr	r3, [sp, #28]
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	dd34      	ble.n	800d756 <_dtoa_r+0x8be>
 800d6ec:	46ca      	mov	sl, r9
 800d6ee:	f1ba 0f00 	cmp.w	sl, #0
 800d6f2:	d10d      	bne.n	800d710 <_dtoa_r+0x878>
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	4653      	mov	r3, sl
 800d6f8:	2205      	movs	r2, #5
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f000 f9ca 	bl	800da94 <__multadd>
 800d700:	4601      	mov	r1, r0
 800d702:	4604      	mov	r4, r0
 800d704:	4628      	mov	r0, r5
 800d706:	f000 fbe1 	bl	800decc <__mcmp>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	f73f adde 	bgt.w	800d2cc <_dtoa_r+0x434>
 800d710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d712:	f8dd 8000 	ldr.w	r8, [sp]
 800d716:	ea6f 0b03 	mvn.w	fp, r3
 800d71a:	f04f 0900 	mov.w	r9, #0
 800d71e:	4621      	mov	r1, r4
 800d720:	4630      	mov	r0, r6
 800d722:	f000 f995 	bl	800da50 <_Bfree>
 800d726:	2f00      	cmp	r7, #0
 800d728:	f43f aea7 	beq.w	800d47a <_dtoa_r+0x5e2>
 800d72c:	f1b9 0f00 	cmp.w	r9, #0
 800d730:	d005      	beq.n	800d73e <_dtoa_r+0x8a6>
 800d732:	45b9      	cmp	r9, r7
 800d734:	d003      	beq.n	800d73e <_dtoa_r+0x8a6>
 800d736:	4649      	mov	r1, r9
 800d738:	4630      	mov	r0, r6
 800d73a:	f000 f989 	bl	800da50 <_Bfree>
 800d73e:	4639      	mov	r1, r7
 800d740:	4630      	mov	r0, r6
 800d742:	f000 f985 	bl	800da50 <_Bfree>
 800d746:	e698      	b.n	800d47a <_dtoa_r+0x5e2>
 800d748:	2400      	movs	r4, #0
 800d74a:	4627      	mov	r7, r4
 800d74c:	e7e0      	b.n	800d710 <_dtoa_r+0x878>
 800d74e:	46bb      	mov	fp, r7
 800d750:	4604      	mov	r4, r0
 800d752:	4607      	mov	r7, r0
 800d754:	e5ba      	b.n	800d2cc <_dtoa_r+0x434>
 800d756:	9b08      	ldr	r3, [sp, #32]
 800d758:	46ca      	mov	sl, r9
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f000 8100 	beq.w	800d960 <_dtoa_r+0xac8>
 800d760:	f1b8 0f00 	cmp.w	r8, #0
 800d764:	dd05      	ble.n	800d772 <_dtoa_r+0x8da>
 800d766:	4639      	mov	r1, r7
 800d768:	4642      	mov	r2, r8
 800d76a:	4630      	mov	r0, r6
 800d76c:	f000 fb42 	bl	800ddf4 <__lshift>
 800d770:	4607      	mov	r7, r0
 800d772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d774:	2b00      	cmp	r3, #0
 800d776:	d05d      	beq.n	800d834 <_dtoa_r+0x99c>
 800d778:	6879      	ldr	r1, [r7, #4]
 800d77a:	4630      	mov	r0, r6
 800d77c:	f000 f928 	bl	800d9d0 <_Balloc>
 800d780:	4680      	mov	r8, r0
 800d782:	b928      	cbnz	r0, 800d790 <_dtoa_r+0x8f8>
 800d784:	4b82      	ldr	r3, [pc, #520]	; (800d990 <_dtoa_r+0xaf8>)
 800d786:	4602      	mov	r2, r0
 800d788:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d78c:	f7ff bb9a 	b.w	800cec4 <_dtoa_r+0x2c>
 800d790:	693a      	ldr	r2, [r7, #16]
 800d792:	3202      	adds	r2, #2
 800d794:	0092      	lsls	r2, r2, #2
 800d796:	f107 010c 	add.w	r1, r7, #12
 800d79a:	300c      	adds	r0, #12
 800d79c:	f000 f90a 	bl	800d9b4 <memcpy>
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	4641      	mov	r1, r8
 800d7a4:	4630      	mov	r0, r6
 800d7a6:	f000 fb25 	bl	800ddf4 <__lshift>
 800d7aa:	9b00      	ldr	r3, [sp, #0]
 800d7ac:	3301      	adds	r3, #1
 800d7ae:	9305      	str	r3, [sp, #20]
 800d7b0:	9b00      	ldr	r3, [sp, #0]
 800d7b2:	4453      	add	r3, sl
 800d7b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7b6:	9b02      	ldr	r3, [sp, #8]
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	46b9      	mov	r9, r7
 800d7be:	9308      	str	r3, [sp, #32]
 800d7c0:	4607      	mov	r7, r0
 800d7c2:	9b05      	ldr	r3, [sp, #20]
 800d7c4:	4621      	mov	r1, r4
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	9302      	str	r3, [sp, #8]
 800d7cc:	f7ff fad6 	bl	800cd7c <quorem>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	3330      	adds	r3, #48	; 0x30
 800d7d4:	9006      	str	r0, [sp, #24]
 800d7d6:	4649      	mov	r1, r9
 800d7d8:	4628      	mov	r0, r5
 800d7da:	930a      	str	r3, [sp, #40]	; 0x28
 800d7dc:	f000 fb76 	bl	800decc <__mcmp>
 800d7e0:	463a      	mov	r2, r7
 800d7e2:	4682      	mov	sl, r0
 800d7e4:	4621      	mov	r1, r4
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	f000 fb8c 	bl	800df04 <__mdiff>
 800d7ec:	68c2      	ldr	r2, [r0, #12]
 800d7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7f0:	4680      	mov	r8, r0
 800d7f2:	bb0a      	cbnz	r2, 800d838 <_dtoa_r+0x9a0>
 800d7f4:	4601      	mov	r1, r0
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f000 fb68 	bl	800decc <__mcmp>
 800d7fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7fe:	4602      	mov	r2, r0
 800d800:	4641      	mov	r1, r8
 800d802:	4630      	mov	r0, r6
 800d804:	920e      	str	r2, [sp, #56]	; 0x38
 800d806:	930a      	str	r3, [sp, #40]	; 0x28
 800d808:	f000 f922 	bl	800da50 <_Bfree>
 800d80c:	9b07      	ldr	r3, [sp, #28]
 800d80e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d810:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d814:	ea43 0102 	orr.w	r1, r3, r2
 800d818:	9b08      	ldr	r3, [sp, #32]
 800d81a:	430b      	orrs	r3, r1
 800d81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d81e:	d10d      	bne.n	800d83c <_dtoa_r+0x9a4>
 800d820:	2b39      	cmp	r3, #57	; 0x39
 800d822:	d029      	beq.n	800d878 <_dtoa_r+0x9e0>
 800d824:	f1ba 0f00 	cmp.w	sl, #0
 800d828:	dd01      	ble.n	800d82e <_dtoa_r+0x996>
 800d82a:	9b06      	ldr	r3, [sp, #24]
 800d82c:	3331      	adds	r3, #49	; 0x31
 800d82e:	9a02      	ldr	r2, [sp, #8]
 800d830:	7013      	strb	r3, [r2, #0]
 800d832:	e774      	b.n	800d71e <_dtoa_r+0x886>
 800d834:	4638      	mov	r0, r7
 800d836:	e7b8      	b.n	800d7aa <_dtoa_r+0x912>
 800d838:	2201      	movs	r2, #1
 800d83a:	e7e1      	b.n	800d800 <_dtoa_r+0x968>
 800d83c:	f1ba 0f00 	cmp.w	sl, #0
 800d840:	db06      	blt.n	800d850 <_dtoa_r+0x9b8>
 800d842:	9907      	ldr	r1, [sp, #28]
 800d844:	ea41 0a0a 	orr.w	sl, r1, sl
 800d848:	9908      	ldr	r1, [sp, #32]
 800d84a:	ea5a 0101 	orrs.w	r1, sl, r1
 800d84e:	d120      	bne.n	800d892 <_dtoa_r+0x9fa>
 800d850:	2a00      	cmp	r2, #0
 800d852:	ddec      	ble.n	800d82e <_dtoa_r+0x996>
 800d854:	4629      	mov	r1, r5
 800d856:	2201      	movs	r2, #1
 800d858:	4630      	mov	r0, r6
 800d85a:	9305      	str	r3, [sp, #20]
 800d85c:	f000 faca 	bl	800ddf4 <__lshift>
 800d860:	4621      	mov	r1, r4
 800d862:	4605      	mov	r5, r0
 800d864:	f000 fb32 	bl	800decc <__mcmp>
 800d868:	2800      	cmp	r0, #0
 800d86a:	9b05      	ldr	r3, [sp, #20]
 800d86c:	dc02      	bgt.n	800d874 <_dtoa_r+0x9dc>
 800d86e:	d1de      	bne.n	800d82e <_dtoa_r+0x996>
 800d870:	07da      	lsls	r2, r3, #31
 800d872:	d5dc      	bpl.n	800d82e <_dtoa_r+0x996>
 800d874:	2b39      	cmp	r3, #57	; 0x39
 800d876:	d1d8      	bne.n	800d82a <_dtoa_r+0x992>
 800d878:	9a02      	ldr	r2, [sp, #8]
 800d87a:	2339      	movs	r3, #57	; 0x39
 800d87c:	7013      	strb	r3, [r2, #0]
 800d87e:	4643      	mov	r3, r8
 800d880:	4698      	mov	r8, r3
 800d882:	3b01      	subs	r3, #1
 800d884:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d888:	2a39      	cmp	r2, #57	; 0x39
 800d88a:	d051      	beq.n	800d930 <_dtoa_r+0xa98>
 800d88c:	3201      	adds	r2, #1
 800d88e:	701a      	strb	r2, [r3, #0]
 800d890:	e745      	b.n	800d71e <_dtoa_r+0x886>
 800d892:	2a00      	cmp	r2, #0
 800d894:	dd03      	ble.n	800d89e <_dtoa_r+0xa06>
 800d896:	2b39      	cmp	r3, #57	; 0x39
 800d898:	d0ee      	beq.n	800d878 <_dtoa_r+0x9e0>
 800d89a:	3301      	adds	r3, #1
 800d89c:	e7c7      	b.n	800d82e <_dtoa_r+0x996>
 800d89e:	9a05      	ldr	r2, [sp, #20]
 800d8a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d8a6:	428a      	cmp	r2, r1
 800d8a8:	d02b      	beq.n	800d902 <_dtoa_r+0xa6a>
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	220a      	movs	r2, #10
 800d8b0:	4630      	mov	r0, r6
 800d8b2:	f000 f8ef 	bl	800da94 <__multadd>
 800d8b6:	45b9      	cmp	r9, r7
 800d8b8:	4605      	mov	r5, r0
 800d8ba:	f04f 0300 	mov.w	r3, #0
 800d8be:	f04f 020a 	mov.w	r2, #10
 800d8c2:	4649      	mov	r1, r9
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	d107      	bne.n	800d8d8 <_dtoa_r+0xa40>
 800d8c8:	f000 f8e4 	bl	800da94 <__multadd>
 800d8cc:	4681      	mov	r9, r0
 800d8ce:	4607      	mov	r7, r0
 800d8d0:	9b05      	ldr	r3, [sp, #20]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	9305      	str	r3, [sp, #20]
 800d8d6:	e774      	b.n	800d7c2 <_dtoa_r+0x92a>
 800d8d8:	f000 f8dc 	bl	800da94 <__multadd>
 800d8dc:	4639      	mov	r1, r7
 800d8de:	4681      	mov	r9, r0
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	220a      	movs	r2, #10
 800d8e4:	4630      	mov	r0, r6
 800d8e6:	f000 f8d5 	bl	800da94 <__multadd>
 800d8ea:	4607      	mov	r7, r0
 800d8ec:	e7f0      	b.n	800d8d0 <_dtoa_r+0xa38>
 800d8ee:	f1ba 0f00 	cmp.w	sl, #0
 800d8f2:	9a00      	ldr	r2, [sp, #0]
 800d8f4:	bfcc      	ite	gt
 800d8f6:	46d0      	movgt	r8, sl
 800d8f8:	f04f 0801 	movle.w	r8, #1
 800d8fc:	4490      	add	r8, r2
 800d8fe:	f04f 0900 	mov.w	r9, #0
 800d902:	4629      	mov	r1, r5
 800d904:	2201      	movs	r2, #1
 800d906:	4630      	mov	r0, r6
 800d908:	9302      	str	r3, [sp, #8]
 800d90a:	f000 fa73 	bl	800ddf4 <__lshift>
 800d90e:	4621      	mov	r1, r4
 800d910:	4605      	mov	r5, r0
 800d912:	f000 fadb 	bl	800decc <__mcmp>
 800d916:	2800      	cmp	r0, #0
 800d918:	dcb1      	bgt.n	800d87e <_dtoa_r+0x9e6>
 800d91a:	d102      	bne.n	800d922 <_dtoa_r+0xa8a>
 800d91c:	9b02      	ldr	r3, [sp, #8]
 800d91e:	07db      	lsls	r3, r3, #31
 800d920:	d4ad      	bmi.n	800d87e <_dtoa_r+0x9e6>
 800d922:	4643      	mov	r3, r8
 800d924:	4698      	mov	r8, r3
 800d926:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d92a:	2a30      	cmp	r2, #48	; 0x30
 800d92c:	d0fa      	beq.n	800d924 <_dtoa_r+0xa8c>
 800d92e:	e6f6      	b.n	800d71e <_dtoa_r+0x886>
 800d930:	9a00      	ldr	r2, [sp, #0]
 800d932:	429a      	cmp	r2, r3
 800d934:	d1a4      	bne.n	800d880 <_dtoa_r+0x9e8>
 800d936:	f10b 0b01 	add.w	fp, fp, #1
 800d93a:	2331      	movs	r3, #49	; 0x31
 800d93c:	e778      	b.n	800d830 <_dtoa_r+0x998>
 800d93e:	4b15      	ldr	r3, [pc, #84]	; (800d994 <_dtoa_r+0xafc>)
 800d940:	f7ff bb12 	b.w	800cf68 <_dtoa_r+0xd0>
 800d944:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d946:	2b00      	cmp	r3, #0
 800d948:	f47f aaee 	bne.w	800cf28 <_dtoa_r+0x90>
 800d94c:	4b12      	ldr	r3, [pc, #72]	; (800d998 <_dtoa_r+0xb00>)
 800d94e:	f7ff bb0b 	b.w	800cf68 <_dtoa_r+0xd0>
 800d952:	f1ba 0f00 	cmp.w	sl, #0
 800d956:	dc03      	bgt.n	800d960 <_dtoa_r+0xac8>
 800d958:	9b07      	ldr	r3, [sp, #28]
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	f73f aec7 	bgt.w	800d6ee <_dtoa_r+0x856>
 800d960:	f8dd 8000 	ldr.w	r8, [sp]
 800d964:	4621      	mov	r1, r4
 800d966:	4628      	mov	r0, r5
 800d968:	f7ff fa08 	bl	800cd7c <quorem>
 800d96c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d970:	f808 3b01 	strb.w	r3, [r8], #1
 800d974:	9a00      	ldr	r2, [sp, #0]
 800d976:	eba8 0202 	sub.w	r2, r8, r2
 800d97a:	4592      	cmp	sl, r2
 800d97c:	ddb7      	ble.n	800d8ee <_dtoa_r+0xa56>
 800d97e:	4629      	mov	r1, r5
 800d980:	2300      	movs	r3, #0
 800d982:	220a      	movs	r2, #10
 800d984:	4630      	mov	r0, r6
 800d986:	f000 f885 	bl	800da94 <__multadd>
 800d98a:	4605      	mov	r5, r0
 800d98c:	e7ea      	b.n	800d964 <_dtoa_r+0xacc>
 800d98e:	bf00      	nop
 800d990:	0800f28b 	.word	0x0800f28b
 800d994:	0800f1e4 	.word	0x0800f1e4
 800d998:	0800f208 	.word	0x0800f208

0800d99c <_localeconv_r>:
 800d99c:	4800      	ldr	r0, [pc, #0]	; (800d9a0 <_localeconv_r+0x4>)
 800d99e:	4770      	bx	lr
 800d9a0:	24000174 	.word	0x24000174

0800d9a4 <malloc>:
 800d9a4:	4b02      	ldr	r3, [pc, #8]	; (800d9b0 <malloc+0xc>)
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	6818      	ldr	r0, [r3, #0]
 800d9aa:	f000 bbef 	b.w	800e18c <_malloc_r>
 800d9ae:	bf00      	nop
 800d9b0:	24000020 	.word	0x24000020

0800d9b4 <memcpy>:
 800d9b4:	440a      	add	r2, r1
 800d9b6:	4291      	cmp	r1, r2
 800d9b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d9bc:	d100      	bne.n	800d9c0 <memcpy+0xc>
 800d9be:	4770      	bx	lr
 800d9c0:	b510      	push	{r4, lr}
 800d9c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9ca:	4291      	cmp	r1, r2
 800d9cc:	d1f9      	bne.n	800d9c2 <memcpy+0xe>
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <_Balloc>:
 800d9d0:	b570      	push	{r4, r5, r6, lr}
 800d9d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	b976      	cbnz	r6, 800d9f8 <_Balloc+0x28>
 800d9da:	2010      	movs	r0, #16
 800d9dc:	f7ff ffe2 	bl	800d9a4 <malloc>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	6260      	str	r0, [r4, #36]	; 0x24
 800d9e4:	b920      	cbnz	r0, 800d9f0 <_Balloc+0x20>
 800d9e6:	4b18      	ldr	r3, [pc, #96]	; (800da48 <_Balloc+0x78>)
 800d9e8:	4818      	ldr	r0, [pc, #96]	; (800da4c <_Balloc+0x7c>)
 800d9ea:	2166      	movs	r1, #102	; 0x66
 800d9ec:	f000 fd94 	bl	800e518 <__assert_func>
 800d9f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9f4:	6006      	str	r6, [r0, #0]
 800d9f6:	60c6      	str	r6, [r0, #12]
 800d9f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9fa:	68f3      	ldr	r3, [r6, #12]
 800d9fc:	b183      	cbz	r3, 800da20 <_Balloc+0x50>
 800d9fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da06:	b9b8      	cbnz	r0, 800da38 <_Balloc+0x68>
 800da08:	2101      	movs	r1, #1
 800da0a:	fa01 f605 	lsl.w	r6, r1, r5
 800da0e:	1d72      	adds	r2, r6, #5
 800da10:	0092      	lsls	r2, r2, #2
 800da12:	4620      	mov	r0, r4
 800da14:	f000 fb5a 	bl	800e0cc <_calloc_r>
 800da18:	b160      	cbz	r0, 800da34 <_Balloc+0x64>
 800da1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da1e:	e00e      	b.n	800da3e <_Balloc+0x6e>
 800da20:	2221      	movs	r2, #33	; 0x21
 800da22:	2104      	movs	r1, #4
 800da24:	4620      	mov	r0, r4
 800da26:	f000 fb51 	bl	800e0cc <_calloc_r>
 800da2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da2c:	60f0      	str	r0, [r6, #12]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e4      	bne.n	800d9fe <_Balloc+0x2e>
 800da34:	2000      	movs	r0, #0
 800da36:	bd70      	pop	{r4, r5, r6, pc}
 800da38:	6802      	ldr	r2, [r0, #0]
 800da3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800da3e:	2300      	movs	r3, #0
 800da40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da44:	e7f7      	b.n	800da36 <_Balloc+0x66>
 800da46:	bf00      	nop
 800da48:	0800f215 	.word	0x0800f215
 800da4c:	0800f29c 	.word	0x0800f29c

0800da50 <_Bfree>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800da54:	4605      	mov	r5, r0
 800da56:	460c      	mov	r4, r1
 800da58:	b976      	cbnz	r6, 800da78 <_Bfree+0x28>
 800da5a:	2010      	movs	r0, #16
 800da5c:	f7ff ffa2 	bl	800d9a4 <malloc>
 800da60:	4602      	mov	r2, r0
 800da62:	6268      	str	r0, [r5, #36]	; 0x24
 800da64:	b920      	cbnz	r0, 800da70 <_Bfree+0x20>
 800da66:	4b09      	ldr	r3, [pc, #36]	; (800da8c <_Bfree+0x3c>)
 800da68:	4809      	ldr	r0, [pc, #36]	; (800da90 <_Bfree+0x40>)
 800da6a:	218a      	movs	r1, #138	; 0x8a
 800da6c:	f000 fd54 	bl	800e518 <__assert_func>
 800da70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da74:	6006      	str	r6, [r0, #0]
 800da76:	60c6      	str	r6, [r0, #12]
 800da78:	b13c      	cbz	r4, 800da8a <_Bfree+0x3a>
 800da7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da7c:	6862      	ldr	r2, [r4, #4]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da84:	6021      	str	r1, [r4, #0]
 800da86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da8a:	bd70      	pop	{r4, r5, r6, pc}
 800da8c:	0800f215 	.word	0x0800f215
 800da90:	0800f29c 	.word	0x0800f29c

0800da94 <__multadd>:
 800da94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da98:	690e      	ldr	r6, [r1, #16]
 800da9a:	4607      	mov	r7, r0
 800da9c:	4698      	mov	r8, r3
 800da9e:	460c      	mov	r4, r1
 800daa0:	f101 0014 	add.w	r0, r1, #20
 800daa4:	2300      	movs	r3, #0
 800daa6:	6805      	ldr	r5, [r0, #0]
 800daa8:	b2a9      	uxth	r1, r5
 800daaa:	fb02 8101 	mla	r1, r2, r1, r8
 800daae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800dab2:	0c2d      	lsrs	r5, r5, #16
 800dab4:	fb02 c505 	mla	r5, r2, r5, ip
 800dab8:	b289      	uxth	r1, r1
 800daba:	3301      	adds	r3, #1
 800dabc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800dac0:	429e      	cmp	r6, r3
 800dac2:	f840 1b04 	str.w	r1, [r0], #4
 800dac6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800daca:	dcec      	bgt.n	800daa6 <__multadd+0x12>
 800dacc:	f1b8 0f00 	cmp.w	r8, #0
 800dad0:	d022      	beq.n	800db18 <__multadd+0x84>
 800dad2:	68a3      	ldr	r3, [r4, #8]
 800dad4:	42b3      	cmp	r3, r6
 800dad6:	dc19      	bgt.n	800db0c <__multadd+0x78>
 800dad8:	6861      	ldr	r1, [r4, #4]
 800dada:	4638      	mov	r0, r7
 800dadc:	3101      	adds	r1, #1
 800dade:	f7ff ff77 	bl	800d9d0 <_Balloc>
 800dae2:	4605      	mov	r5, r0
 800dae4:	b928      	cbnz	r0, 800daf2 <__multadd+0x5e>
 800dae6:	4602      	mov	r2, r0
 800dae8:	4b0d      	ldr	r3, [pc, #52]	; (800db20 <__multadd+0x8c>)
 800daea:	480e      	ldr	r0, [pc, #56]	; (800db24 <__multadd+0x90>)
 800daec:	21b5      	movs	r1, #181	; 0xb5
 800daee:	f000 fd13 	bl	800e518 <__assert_func>
 800daf2:	6922      	ldr	r2, [r4, #16]
 800daf4:	3202      	adds	r2, #2
 800daf6:	f104 010c 	add.w	r1, r4, #12
 800dafa:	0092      	lsls	r2, r2, #2
 800dafc:	300c      	adds	r0, #12
 800dafe:	f7ff ff59 	bl	800d9b4 <memcpy>
 800db02:	4621      	mov	r1, r4
 800db04:	4638      	mov	r0, r7
 800db06:	f7ff ffa3 	bl	800da50 <_Bfree>
 800db0a:	462c      	mov	r4, r5
 800db0c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800db10:	3601      	adds	r6, #1
 800db12:	f8c3 8014 	str.w	r8, [r3, #20]
 800db16:	6126      	str	r6, [r4, #16]
 800db18:	4620      	mov	r0, r4
 800db1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db1e:	bf00      	nop
 800db20:	0800f28b 	.word	0x0800f28b
 800db24:	0800f29c 	.word	0x0800f29c

0800db28 <__hi0bits>:
 800db28:	0c03      	lsrs	r3, r0, #16
 800db2a:	041b      	lsls	r3, r3, #16
 800db2c:	b9d3      	cbnz	r3, 800db64 <__hi0bits+0x3c>
 800db2e:	0400      	lsls	r0, r0, #16
 800db30:	2310      	movs	r3, #16
 800db32:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db36:	bf04      	itt	eq
 800db38:	0200      	lsleq	r0, r0, #8
 800db3a:	3308      	addeq	r3, #8
 800db3c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db40:	bf04      	itt	eq
 800db42:	0100      	lsleq	r0, r0, #4
 800db44:	3304      	addeq	r3, #4
 800db46:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db4a:	bf04      	itt	eq
 800db4c:	0080      	lsleq	r0, r0, #2
 800db4e:	3302      	addeq	r3, #2
 800db50:	2800      	cmp	r0, #0
 800db52:	db05      	blt.n	800db60 <__hi0bits+0x38>
 800db54:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db58:	f103 0301 	add.w	r3, r3, #1
 800db5c:	bf08      	it	eq
 800db5e:	2320      	moveq	r3, #32
 800db60:	4618      	mov	r0, r3
 800db62:	4770      	bx	lr
 800db64:	2300      	movs	r3, #0
 800db66:	e7e4      	b.n	800db32 <__hi0bits+0xa>

0800db68 <__lo0bits>:
 800db68:	6803      	ldr	r3, [r0, #0]
 800db6a:	f013 0207 	ands.w	r2, r3, #7
 800db6e:	4601      	mov	r1, r0
 800db70:	d00b      	beq.n	800db8a <__lo0bits+0x22>
 800db72:	07da      	lsls	r2, r3, #31
 800db74:	d424      	bmi.n	800dbc0 <__lo0bits+0x58>
 800db76:	0798      	lsls	r0, r3, #30
 800db78:	bf49      	itett	mi
 800db7a:	085b      	lsrmi	r3, r3, #1
 800db7c:	089b      	lsrpl	r3, r3, #2
 800db7e:	2001      	movmi	r0, #1
 800db80:	600b      	strmi	r3, [r1, #0]
 800db82:	bf5c      	itt	pl
 800db84:	600b      	strpl	r3, [r1, #0]
 800db86:	2002      	movpl	r0, #2
 800db88:	4770      	bx	lr
 800db8a:	b298      	uxth	r0, r3
 800db8c:	b9b0      	cbnz	r0, 800dbbc <__lo0bits+0x54>
 800db8e:	0c1b      	lsrs	r3, r3, #16
 800db90:	2010      	movs	r0, #16
 800db92:	f013 0fff 	tst.w	r3, #255	; 0xff
 800db96:	bf04      	itt	eq
 800db98:	0a1b      	lsreq	r3, r3, #8
 800db9a:	3008      	addeq	r0, #8
 800db9c:	071a      	lsls	r2, r3, #28
 800db9e:	bf04      	itt	eq
 800dba0:	091b      	lsreq	r3, r3, #4
 800dba2:	3004      	addeq	r0, #4
 800dba4:	079a      	lsls	r2, r3, #30
 800dba6:	bf04      	itt	eq
 800dba8:	089b      	lsreq	r3, r3, #2
 800dbaa:	3002      	addeq	r0, #2
 800dbac:	07da      	lsls	r2, r3, #31
 800dbae:	d403      	bmi.n	800dbb8 <__lo0bits+0x50>
 800dbb0:	085b      	lsrs	r3, r3, #1
 800dbb2:	f100 0001 	add.w	r0, r0, #1
 800dbb6:	d005      	beq.n	800dbc4 <__lo0bits+0x5c>
 800dbb8:	600b      	str	r3, [r1, #0]
 800dbba:	4770      	bx	lr
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	e7e8      	b.n	800db92 <__lo0bits+0x2a>
 800dbc0:	2000      	movs	r0, #0
 800dbc2:	4770      	bx	lr
 800dbc4:	2020      	movs	r0, #32
 800dbc6:	4770      	bx	lr

0800dbc8 <__i2b>:
 800dbc8:	b510      	push	{r4, lr}
 800dbca:	460c      	mov	r4, r1
 800dbcc:	2101      	movs	r1, #1
 800dbce:	f7ff feff 	bl	800d9d0 <_Balloc>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	b928      	cbnz	r0, 800dbe2 <__i2b+0x1a>
 800dbd6:	4b05      	ldr	r3, [pc, #20]	; (800dbec <__i2b+0x24>)
 800dbd8:	4805      	ldr	r0, [pc, #20]	; (800dbf0 <__i2b+0x28>)
 800dbda:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dbde:	f000 fc9b 	bl	800e518 <__assert_func>
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	6144      	str	r4, [r0, #20]
 800dbe6:	6103      	str	r3, [r0, #16]
 800dbe8:	bd10      	pop	{r4, pc}
 800dbea:	bf00      	nop
 800dbec:	0800f28b 	.word	0x0800f28b
 800dbf0:	0800f29c 	.word	0x0800f29c

0800dbf4 <__multiply>:
 800dbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	4614      	mov	r4, r2
 800dbfa:	690a      	ldr	r2, [r1, #16]
 800dbfc:	6923      	ldr	r3, [r4, #16]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	bfb8      	it	lt
 800dc02:	460b      	movlt	r3, r1
 800dc04:	460d      	mov	r5, r1
 800dc06:	bfbc      	itt	lt
 800dc08:	4625      	movlt	r5, r4
 800dc0a:	461c      	movlt	r4, r3
 800dc0c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dc10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dc14:	68ab      	ldr	r3, [r5, #8]
 800dc16:	6869      	ldr	r1, [r5, #4]
 800dc18:	eb0a 0709 	add.w	r7, sl, r9
 800dc1c:	42bb      	cmp	r3, r7
 800dc1e:	b085      	sub	sp, #20
 800dc20:	bfb8      	it	lt
 800dc22:	3101      	addlt	r1, #1
 800dc24:	f7ff fed4 	bl	800d9d0 <_Balloc>
 800dc28:	b930      	cbnz	r0, 800dc38 <__multiply+0x44>
 800dc2a:	4602      	mov	r2, r0
 800dc2c:	4b42      	ldr	r3, [pc, #264]	; (800dd38 <__multiply+0x144>)
 800dc2e:	4843      	ldr	r0, [pc, #268]	; (800dd3c <__multiply+0x148>)
 800dc30:	f240 115d 	movw	r1, #349	; 0x15d
 800dc34:	f000 fc70 	bl	800e518 <__assert_func>
 800dc38:	f100 0614 	add.w	r6, r0, #20
 800dc3c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800dc40:	4633      	mov	r3, r6
 800dc42:	2200      	movs	r2, #0
 800dc44:	4543      	cmp	r3, r8
 800dc46:	d31e      	bcc.n	800dc86 <__multiply+0x92>
 800dc48:	f105 0c14 	add.w	ip, r5, #20
 800dc4c:	f104 0314 	add.w	r3, r4, #20
 800dc50:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800dc54:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800dc58:	9202      	str	r2, [sp, #8]
 800dc5a:	ebac 0205 	sub.w	r2, ip, r5
 800dc5e:	3a15      	subs	r2, #21
 800dc60:	f022 0203 	bic.w	r2, r2, #3
 800dc64:	3204      	adds	r2, #4
 800dc66:	f105 0115 	add.w	r1, r5, #21
 800dc6a:	458c      	cmp	ip, r1
 800dc6c:	bf38      	it	cc
 800dc6e:	2204      	movcc	r2, #4
 800dc70:	9201      	str	r2, [sp, #4]
 800dc72:	9a02      	ldr	r2, [sp, #8]
 800dc74:	9303      	str	r3, [sp, #12]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d808      	bhi.n	800dc8c <__multiply+0x98>
 800dc7a:	2f00      	cmp	r7, #0
 800dc7c:	dc55      	bgt.n	800dd2a <__multiply+0x136>
 800dc7e:	6107      	str	r7, [r0, #16]
 800dc80:	b005      	add	sp, #20
 800dc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc86:	f843 2b04 	str.w	r2, [r3], #4
 800dc8a:	e7db      	b.n	800dc44 <__multiply+0x50>
 800dc8c:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc90:	f1ba 0f00 	cmp.w	sl, #0
 800dc94:	d020      	beq.n	800dcd8 <__multiply+0xe4>
 800dc96:	f105 0e14 	add.w	lr, r5, #20
 800dc9a:	46b1      	mov	r9, r6
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800dca2:	f8d9 b000 	ldr.w	fp, [r9]
 800dca6:	b2a1      	uxth	r1, r4
 800dca8:	fa1f fb8b 	uxth.w	fp, fp
 800dcac:	fb0a b101 	mla	r1, sl, r1, fp
 800dcb0:	4411      	add	r1, r2
 800dcb2:	f8d9 2000 	ldr.w	r2, [r9]
 800dcb6:	0c24      	lsrs	r4, r4, #16
 800dcb8:	0c12      	lsrs	r2, r2, #16
 800dcba:	fb0a 2404 	mla	r4, sl, r4, r2
 800dcbe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800dcc2:	b289      	uxth	r1, r1
 800dcc4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800dcc8:	45f4      	cmp	ip, lr
 800dcca:	f849 1b04 	str.w	r1, [r9], #4
 800dcce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800dcd2:	d8e4      	bhi.n	800dc9e <__multiply+0xaa>
 800dcd4:	9901      	ldr	r1, [sp, #4]
 800dcd6:	5072      	str	r2, [r6, r1]
 800dcd8:	9a03      	ldr	r2, [sp, #12]
 800dcda:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dcde:	3304      	adds	r3, #4
 800dce0:	f1b9 0f00 	cmp.w	r9, #0
 800dce4:	d01f      	beq.n	800dd26 <__multiply+0x132>
 800dce6:	6834      	ldr	r4, [r6, #0]
 800dce8:	f105 0114 	add.w	r1, r5, #20
 800dcec:	46b6      	mov	lr, r6
 800dcee:	f04f 0a00 	mov.w	sl, #0
 800dcf2:	880a      	ldrh	r2, [r1, #0]
 800dcf4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800dcf8:	fb09 b202 	mla	r2, r9, r2, fp
 800dcfc:	4492      	add	sl, r2
 800dcfe:	b2a4      	uxth	r4, r4
 800dd00:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800dd04:	f84e 4b04 	str.w	r4, [lr], #4
 800dd08:	f851 4b04 	ldr.w	r4, [r1], #4
 800dd0c:	f8be 2000 	ldrh.w	r2, [lr]
 800dd10:	0c24      	lsrs	r4, r4, #16
 800dd12:	fb09 2404 	mla	r4, r9, r4, r2
 800dd16:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800dd1a:	458c      	cmp	ip, r1
 800dd1c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dd20:	d8e7      	bhi.n	800dcf2 <__multiply+0xfe>
 800dd22:	9a01      	ldr	r2, [sp, #4]
 800dd24:	50b4      	str	r4, [r6, r2]
 800dd26:	3604      	adds	r6, #4
 800dd28:	e7a3      	b.n	800dc72 <__multiply+0x7e>
 800dd2a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1a5      	bne.n	800dc7e <__multiply+0x8a>
 800dd32:	3f01      	subs	r7, #1
 800dd34:	e7a1      	b.n	800dc7a <__multiply+0x86>
 800dd36:	bf00      	nop
 800dd38:	0800f28b 	.word	0x0800f28b
 800dd3c:	0800f29c 	.word	0x0800f29c

0800dd40 <__pow5mult>:
 800dd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd44:	4615      	mov	r5, r2
 800dd46:	f012 0203 	ands.w	r2, r2, #3
 800dd4a:	4606      	mov	r6, r0
 800dd4c:	460f      	mov	r7, r1
 800dd4e:	d007      	beq.n	800dd60 <__pow5mult+0x20>
 800dd50:	4c25      	ldr	r4, [pc, #148]	; (800dde8 <__pow5mult+0xa8>)
 800dd52:	3a01      	subs	r2, #1
 800dd54:	2300      	movs	r3, #0
 800dd56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd5a:	f7ff fe9b 	bl	800da94 <__multadd>
 800dd5e:	4607      	mov	r7, r0
 800dd60:	10ad      	asrs	r5, r5, #2
 800dd62:	d03d      	beq.n	800dde0 <__pow5mult+0xa0>
 800dd64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd66:	b97c      	cbnz	r4, 800dd88 <__pow5mult+0x48>
 800dd68:	2010      	movs	r0, #16
 800dd6a:	f7ff fe1b 	bl	800d9a4 <malloc>
 800dd6e:	4602      	mov	r2, r0
 800dd70:	6270      	str	r0, [r6, #36]	; 0x24
 800dd72:	b928      	cbnz	r0, 800dd80 <__pow5mult+0x40>
 800dd74:	4b1d      	ldr	r3, [pc, #116]	; (800ddec <__pow5mult+0xac>)
 800dd76:	481e      	ldr	r0, [pc, #120]	; (800ddf0 <__pow5mult+0xb0>)
 800dd78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dd7c:	f000 fbcc 	bl	800e518 <__assert_func>
 800dd80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd84:	6004      	str	r4, [r0, #0]
 800dd86:	60c4      	str	r4, [r0, #12]
 800dd88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd90:	b94c      	cbnz	r4, 800dda6 <__pow5mult+0x66>
 800dd92:	f240 2171 	movw	r1, #625	; 0x271
 800dd96:	4630      	mov	r0, r6
 800dd98:	f7ff ff16 	bl	800dbc8 <__i2b>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dda2:	4604      	mov	r4, r0
 800dda4:	6003      	str	r3, [r0, #0]
 800dda6:	f04f 0900 	mov.w	r9, #0
 800ddaa:	07eb      	lsls	r3, r5, #31
 800ddac:	d50a      	bpl.n	800ddc4 <__pow5mult+0x84>
 800ddae:	4639      	mov	r1, r7
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f7ff ff1e 	bl	800dbf4 <__multiply>
 800ddb8:	4639      	mov	r1, r7
 800ddba:	4680      	mov	r8, r0
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f7ff fe47 	bl	800da50 <_Bfree>
 800ddc2:	4647      	mov	r7, r8
 800ddc4:	106d      	asrs	r5, r5, #1
 800ddc6:	d00b      	beq.n	800dde0 <__pow5mult+0xa0>
 800ddc8:	6820      	ldr	r0, [r4, #0]
 800ddca:	b938      	cbnz	r0, 800dddc <__pow5mult+0x9c>
 800ddcc:	4622      	mov	r2, r4
 800ddce:	4621      	mov	r1, r4
 800ddd0:	4630      	mov	r0, r6
 800ddd2:	f7ff ff0f 	bl	800dbf4 <__multiply>
 800ddd6:	6020      	str	r0, [r4, #0]
 800ddd8:	f8c0 9000 	str.w	r9, [r0]
 800dddc:	4604      	mov	r4, r0
 800ddde:	e7e4      	b.n	800ddaa <__pow5mult+0x6a>
 800dde0:	4638      	mov	r0, r7
 800dde2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dde6:	bf00      	nop
 800dde8:	0800f3f0 	.word	0x0800f3f0
 800ddec:	0800f215 	.word	0x0800f215
 800ddf0:	0800f29c 	.word	0x0800f29c

0800ddf4 <__lshift>:
 800ddf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ddf8:	460c      	mov	r4, r1
 800ddfa:	6849      	ldr	r1, [r1, #4]
 800ddfc:	6923      	ldr	r3, [r4, #16]
 800ddfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de02:	68a3      	ldr	r3, [r4, #8]
 800de04:	4607      	mov	r7, r0
 800de06:	4691      	mov	r9, r2
 800de08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de0c:	f108 0601 	add.w	r6, r8, #1
 800de10:	42b3      	cmp	r3, r6
 800de12:	db0b      	blt.n	800de2c <__lshift+0x38>
 800de14:	4638      	mov	r0, r7
 800de16:	f7ff fddb 	bl	800d9d0 <_Balloc>
 800de1a:	4605      	mov	r5, r0
 800de1c:	b948      	cbnz	r0, 800de32 <__lshift+0x3e>
 800de1e:	4602      	mov	r2, r0
 800de20:	4b28      	ldr	r3, [pc, #160]	; (800dec4 <__lshift+0xd0>)
 800de22:	4829      	ldr	r0, [pc, #164]	; (800dec8 <__lshift+0xd4>)
 800de24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de28:	f000 fb76 	bl	800e518 <__assert_func>
 800de2c:	3101      	adds	r1, #1
 800de2e:	005b      	lsls	r3, r3, #1
 800de30:	e7ee      	b.n	800de10 <__lshift+0x1c>
 800de32:	2300      	movs	r3, #0
 800de34:	f100 0114 	add.w	r1, r0, #20
 800de38:	f100 0210 	add.w	r2, r0, #16
 800de3c:	4618      	mov	r0, r3
 800de3e:	4553      	cmp	r3, sl
 800de40:	db33      	blt.n	800deaa <__lshift+0xb6>
 800de42:	6920      	ldr	r0, [r4, #16]
 800de44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de48:	f104 0314 	add.w	r3, r4, #20
 800de4c:	f019 091f 	ands.w	r9, r9, #31
 800de50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de58:	d02b      	beq.n	800deb2 <__lshift+0xbe>
 800de5a:	f1c9 0e20 	rsb	lr, r9, #32
 800de5e:	468a      	mov	sl, r1
 800de60:	2200      	movs	r2, #0
 800de62:	6818      	ldr	r0, [r3, #0]
 800de64:	fa00 f009 	lsl.w	r0, r0, r9
 800de68:	4302      	orrs	r2, r0
 800de6a:	f84a 2b04 	str.w	r2, [sl], #4
 800de6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de72:	459c      	cmp	ip, r3
 800de74:	fa22 f20e 	lsr.w	r2, r2, lr
 800de78:	d8f3      	bhi.n	800de62 <__lshift+0x6e>
 800de7a:	ebac 0304 	sub.w	r3, ip, r4
 800de7e:	3b15      	subs	r3, #21
 800de80:	f023 0303 	bic.w	r3, r3, #3
 800de84:	3304      	adds	r3, #4
 800de86:	f104 0015 	add.w	r0, r4, #21
 800de8a:	4584      	cmp	ip, r0
 800de8c:	bf38      	it	cc
 800de8e:	2304      	movcc	r3, #4
 800de90:	50ca      	str	r2, [r1, r3]
 800de92:	b10a      	cbz	r2, 800de98 <__lshift+0xa4>
 800de94:	f108 0602 	add.w	r6, r8, #2
 800de98:	3e01      	subs	r6, #1
 800de9a:	4638      	mov	r0, r7
 800de9c:	612e      	str	r6, [r5, #16]
 800de9e:	4621      	mov	r1, r4
 800dea0:	f7ff fdd6 	bl	800da50 <_Bfree>
 800dea4:	4628      	mov	r0, r5
 800dea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800deae:	3301      	adds	r3, #1
 800deb0:	e7c5      	b.n	800de3e <__lshift+0x4a>
 800deb2:	3904      	subs	r1, #4
 800deb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800debc:	459c      	cmp	ip, r3
 800debe:	d8f9      	bhi.n	800deb4 <__lshift+0xc0>
 800dec0:	e7ea      	b.n	800de98 <__lshift+0xa4>
 800dec2:	bf00      	nop
 800dec4:	0800f28b 	.word	0x0800f28b
 800dec8:	0800f29c 	.word	0x0800f29c

0800decc <__mcmp>:
 800decc:	b530      	push	{r4, r5, lr}
 800dece:	6902      	ldr	r2, [r0, #16]
 800ded0:	690c      	ldr	r4, [r1, #16]
 800ded2:	1b12      	subs	r2, r2, r4
 800ded4:	d10e      	bne.n	800def4 <__mcmp+0x28>
 800ded6:	f100 0314 	add.w	r3, r0, #20
 800deda:	3114      	adds	r1, #20
 800dedc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dee0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dee4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dee8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800deec:	42a5      	cmp	r5, r4
 800deee:	d003      	beq.n	800def8 <__mcmp+0x2c>
 800def0:	d305      	bcc.n	800defe <__mcmp+0x32>
 800def2:	2201      	movs	r2, #1
 800def4:	4610      	mov	r0, r2
 800def6:	bd30      	pop	{r4, r5, pc}
 800def8:	4283      	cmp	r3, r0
 800defa:	d3f3      	bcc.n	800dee4 <__mcmp+0x18>
 800defc:	e7fa      	b.n	800def4 <__mcmp+0x28>
 800defe:	f04f 32ff 	mov.w	r2, #4294967295
 800df02:	e7f7      	b.n	800def4 <__mcmp+0x28>

0800df04 <__mdiff>:
 800df04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df08:	460c      	mov	r4, r1
 800df0a:	4606      	mov	r6, r0
 800df0c:	4611      	mov	r1, r2
 800df0e:	4620      	mov	r0, r4
 800df10:	4617      	mov	r7, r2
 800df12:	f7ff ffdb 	bl	800decc <__mcmp>
 800df16:	1e05      	subs	r5, r0, #0
 800df18:	d110      	bne.n	800df3c <__mdiff+0x38>
 800df1a:	4629      	mov	r1, r5
 800df1c:	4630      	mov	r0, r6
 800df1e:	f7ff fd57 	bl	800d9d0 <_Balloc>
 800df22:	b930      	cbnz	r0, 800df32 <__mdiff+0x2e>
 800df24:	4b39      	ldr	r3, [pc, #228]	; (800e00c <__mdiff+0x108>)
 800df26:	4602      	mov	r2, r0
 800df28:	f240 2132 	movw	r1, #562	; 0x232
 800df2c:	4838      	ldr	r0, [pc, #224]	; (800e010 <__mdiff+0x10c>)
 800df2e:	f000 faf3 	bl	800e518 <__assert_func>
 800df32:	2301      	movs	r3, #1
 800df34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3c:	bfa4      	itt	ge
 800df3e:	463b      	movge	r3, r7
 800df40:	4627      	movge	r7, r4
 800df42:	4630      	mov	r0, r6
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	bfa6      	itte	ge
 800df48:	461c      	movge	r4, r3
 800df4a:	2500      	movge	r5, #0
 800df4c:	2501      	movlt	r5, #1
 800df4e:	f7ff fd3f 	bl	800d9d0 <_Balloc>
 800df52:	b920      	cbnz	r0, 800df5e <__mdiff+0x5a>
 800df54:	4b2d      	ldr	r3, [pc, #180]	; (800e00c <__mdiff+0x108>)
 800df56:	4602      	mov	r2, r0
 800df58:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df5c:	e7e6      	b.n	800df2c <__mdiff+0x28>
 800df5e:	693e      	ldr	r6, [r7, #16]
 800df60:	60c5      	str	r5, [r0, #12]
 800df62:	6925      	ldr	r5, [r4, #16]
 800df64:	f107 0114 	add.w	r1, r7, #20
 800df68:	f104 0914 	add.w	r9, r4, #20
 800df6c:	f100 0e14 	add.w	lr, r0, #20
 800df70:	f107 0210 	add.w	r2, r7, #16
 800df74:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800df78:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800df7c:	46f2      	mov	sl, lr
 800df7e:	2700      	movs	r7, #0
 800df80:	f859 3b04 	ldr.w	r3, [r9], #4
 800df84:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800df88:	fa1f f883 	uxth.w	r8, r3
 800df8c:	fa17 f78b 	uxtah	r7, r7, fp
 800df90:	0c1b      	lsrs	r3, r3, #16
 800df92:	eba7 0808 	sub.w	r8, r7, r8
 800df96:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800df9a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800df9e:	fa1f f888 	uxth.w	r8, r8
 800dfa2:	141f      	asrs	r7, r3, #16
 800dfa4:	454d      	cmp	r5, r9
 800dfa6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfaa:	f84a 3b04 	str.w	r3, [sl], #4
 800dfae:	d8e7      	bhi.n	800df80 <__mdiff+0x7c>
 800dfb0:	1b2b      	subs	r3, r5, r4
 800dfb2:	3b15      	subs	r3, #21
 800dfb4:	f023 0303 	bic.w	r3, r3, #3
 800dfb8:	3304      	adds	r3, #4
 800dfba:	3415      	adds	r4, #21
 800dfbc:	42a5      	cmp	r5, r4
 800dfbe:	bf38      	it	cc
 800dfc0:	2304      	movcc	r3, #4
 800dfc2:	4419      	add	r1, r3
 800dfc4:	4473      	add	r3, lr
 800dfc6:	469e      	mov	lr, r3
 800dfc8:	460d      	mov	r5, r1
 800dfca:	4565      	cmp	r5, ip
 800dfcc:	d30e      	bcc.n	800dfec <__mdiff+0xe8>
 800dfce:	f10c 0203 	add.w	r2, ip, #3
 800dfd2:	1a52      	subs	r2, r2, r1
 800dfd4:	f022 0203 	bic.w	r2, r2, #3
 800dfd8:	3903      	subs	r1, #3
 800dfda:	458c      	cmp	ip, r1
 800dfdc:	bf38      	it	cc
 800dfde:	2200      	movcc	r2, #0
 800dfe0:	441a      	add	r2, r3
 800dfe2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dfe6:	b17b      	cbz	r3, 800e008 <__mdiff+0x104>
 800dfe8:	6106      	str	r6, [r0, #16]
 800dfea:	e7a5      	b.n	800df38 <__mdiff+0x34>
 800dfec:	f855 8b04 	ldr.w	r8, [r5], #4
 800dff0:	fa17 f488 	uxtah	r4, r7, r8
 800dff4:	1422      	asrs	r2, r4, #16
 800dff6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dffa:	b2a4      	uxth	r4, r4
 800dffc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e000:	f84e 4b04 	str.w	r4, [lr], #4
 800e004:	1417      	asrs	r7, r2, #16
 800e006:	e7e0      	b.n	800dfca <__mdiff+0xc6>
 800e008:	3e01      	subs	r6, #1
 800e00a:	e7ea      	b.n	800dfe2 <__mdiff+0xde>
 800e00c:	0800f28b 	.word	0x0800f28b
 800e010:	0800f29c 	.word	0x0800f29c

0800e014 <__d2b>:
 800e014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e018:	4689      	mov	r9, r1
 800e01a:	2101      	movs	r1, #1
 800e01c:	ec57 6b10 	vmov	r6, r7, d0
 800e020:	4690      	mov	r8, r2
 800e022:	f7ff fcd5 	bl	800d9d0 <_Balloc>
 800e026:	4604      	mov	r4, r0
 800e028:	b930      	cbnz	r0, 800e038 <__d2b+0x24>
 800e02a:	4602      	mov	r2, r0
 800e02c:	4b25      	ldr	r3, [pc, #148]	; (800e0c4 <__d2b+0xb0>)
 800e02e:	4826      	ldr	r0, [pc, #152]	; (800e0c8 <__d2b+0xb4>)
 800e030:	f240 310a 	movw	r1, #778	; 0x30a
 800e034:	f000 fa70 	bl	800e518 <__assert_func>
 800e038:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e03c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e040:	bb35      	cbnz	r5, 800e090 <__d2b+0x7c>
 800e042:	2e00      	cmp	r6, #0
 800e044:	9301      	str	r3, [sp, #4]
 800e046:	d028      	beq.n	800e09a <__d2b+0x86>
 800e048:	4668      	mov	r0, sp
 800e04a:	9600      	str	r6, [sp, #0]
 800e04c:	f7ff fd8c 	bl	800db68 <__lo0bits>
 800e050:	9900      	ldr	r1, [sp, #0]
 800e052:	b300      	cbz	r0, 800e096 <__d2b+0x82>
 800e054:	9a01      	ldr	r2, [sp, #4]
 800e056:	f1c0 0320 	rsb	r3, r0, #32
 800e05a:	fa02 f303 	lsl.w	r3, r2, r3
 800e05e:	430b      	orrs	r3, r1
 800e060:	40c2      	lsrs	r2, r0
 800e062:	6163      	str	r3, [r4, #20]
 800e064:	9201      	str	r2, [sp, #4]
 800e066:	9b01      	ldr	r3, [sp, #4]
 800e068:	61a3      	str	r3, [r4, #24]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	bf14      	ite	ne
 800e06e:	2202      	movne	r2, #2
 800e070:	2201      	moveq	r2, #1
 800e072:	6122      	str	r2, [r4, #16]
 800e074:	b1d5      	cbz	r5, 800e0ac <__d2b+0x98>
 800e076:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e07a:	4405      	add	r5, r0
 800e07c:	f8c9 5000 	str.w	r5, [r9]
 800e080:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e084:	f8c8 0000 	str.w	r0, [r8]
 800e088:	4620      	mov	r0, r4
 800e08a:	b003      	add	sp, #12
 800e08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e094:	e7d5      	b.n	800e042 <__d2b+0x2e>
 800e096:	6161      	str	r1, [r4, #20]
 800e098:	e7e5      	b.n	800e066 <__d2b+0x52>
 800e09a:	a801      	add	r0, sp, #4
 800e09c:	f7ff fd64 	bl	800db68 <__lo0bits>
 800e0a0:	9b01      	ldr	r3, [sp, #4]
 800e0a2:	6163      	str	r3, [r4, #20]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	6122      	str	r2, [r4, #16]
 800e0a8:	3020      	adds	r0, #32
 800e0aa:	e7e3      	b.n	800e074 <__d2b+0x60>
 800e0ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e0b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e0b4:	f8c9 0000 	str.w	r0, [r9]
 800e0b8:	6918      	ldr	r0, [r3, #16]
 800e0ba:	f7ff fd35 	bl	800db28 <__hi0bits>
 800e0be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e0c2:	e7df      	b.n	800e084 <__d2b+0x70>
 800e0c4:	0800f28b 	.word	0x0800f28b
 800e0c8:	0800f29c 	.word	0x0800f29c

0800e0cc <_calloc_r>:
 800e0cc:	b513      	push	{r0, r1, r4, lr}
 800e0ce:	434a      	muls	r2, r1
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	9201      	str	r2, [sp, #4]
 800e0d4:	f000 f85a 	bl	800e18c <_malloc_r>
 800e0d8:	4604      	mov	r4, r0
 800e0da:	b118      	cbz	r0, 800e0e4 <_calloc_r+0x18>
 800e0dc:	9a01      	ldr	r2, [sp, #4]
 800e0de:	2100      	movs	r1, #0
 800e0e0:	f7fe f9e2 	bl	800c4a8 <memset>
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	b002      	add	sp, #8
 800e0e8:	bd10      	pop	{r4, pc}
	...

0800e0ec <_free_r>:
 800e0ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ee:	2900      	cmp	r1, #0
 800e0f0:	d048      	beq.n	800e184 <_free_r+0x98>
 800e0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f6:	9001      	str	r0, [sp, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e0fe:	bfb8      	it	lt
 800e100:	18e4      	addlt	r4, r4, r3
 800e102:	f000 fa65 	bl	800e5d0 <__malloc_lock>
 800e106:	4a20      	ldr	r2, [pc, #128]	; (800e188 <_free_r+0x9c>)
 800e108:	9801      	ldr	r0, [sp, #4]
 800e10a:	6813      	ldr	r3, [r2, #0]
 800e10c:	4615      	mov	r5, r2
 800e10e:	b933      	cbnz	r3, 800e11e <_free_r+0x32>
 800e110:	6063      	str	r3, [r4, #4]
 800e112:	6014      	str	r4, [r2, #0]
 800e114:	b003      	add	sp, #12
 800e116:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e11a:	f000 ba5f 	b.w	800e5dc <__malloc_unlock>
 800e11e:	42a3      	cmp	r3, r4
 800e120:	d90b      	bls.n	800e13a <_free_r+0x4e>
 800e122:	6821      	ldr	r1, [r4, #0]
 800e124:	1862      	adds	r2, r4, r1
 800e126:	4293      	cmp	r3, r2
 800e128:	bf04      	itt	eq
 800e12a:	681a      	ldreq	r2, [r3, #0]
 800e12c:	685b      	ldreq	r3, [r3, #4]
 800e12e:	6063      	str	r3, [r4, #4]
 800e130:	bf04      	itt	eq
 800e132:	1852      	addeq	r2, r2, r1
 800e134:	6022      	streq	r2, [r4, #0]
 800e136:	602c      	str	r4, [r5, #0]
 800e138:	e7ec      	b.n	800e114 <_free_r+0x28>
 800e13a:	461a      	mov	r2, r3
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	b10b      	cbz	r3, 800e144 <_free_r+0x58>
 800e140:	42a3      	cmp	r3, r4
 800e142:	d9fa      	bls.n	800e13a <_free_r+0x4e>
 800e144:	6811      	ldr	r1, [r2, #0]
 800e146:	1855      	adds	r5, r2, r1
 800e148:	42a5      	cmp	r5, r4
 800e14a:	d10b      	bne.n	800e164 <_free_r+0x78>
 800e14c:	6824      	ldr	r4, [r4, #0]
 800e14e:	4421      	add	r1, r4
 800e150:	1854      	adds	r4, r2, r1
 800e152:	42a3      	cmp	r3, r4
 800e154:	6011      	str	r1, [r2, #0]
 800e156:	d1dd      	bne.n	800e114 <_free_r+0x28>
 800e158:	681c      	ldr	r4, [r3, #0]
 800e15a:	685b      	ldr	r3, [r3, #4]
 800e15c:	6053      	str	r3, [r2, #4]
 800e15e:	4421      	add	r1, r4
 800e160:	6011      	str	r1, [r2, #0]
 800e162:	e7d7      	b.n	800e114 <_free_r+0x28>
 800e164:	d902      	bls.n	800e16c <_free_r+0x80>
 800e166:	230c      	movs	r3, #12
 800e168:	6003      	str	r3, [r0, #0]
 800e16a:	e7d3      	b.n	800e114 <_free_r+0x28>
 800e16c:	6825      	ldr	r5, [r4, #0]
 800e16e:	1961      	adds	r1, r4, r5
 800e170:	428b      	cmp	r3, r1
 800e172:	bf04      	itt	eq
 800e174:	6819      	ldreq	r1, [r3, #0]
 800e176:	685b      	ldreq	r3, [r3, #4]
 800e178:	6063      	str	r3, [r4, #4]
 800e17a:	bf04      	itt	eq
 800e17c:	1949      	addeq	r1, r1, r5
 800e17e:	6021      	streq	r1, [r4, #0]
 800e180:	6054      	str	r4, [r2, #4]
 800e182:	e7c7      	b.n	800e114 <_free_r+0x28>
 800e184:	b003      	add	sp, #12
 800e186:	bd30      	pop	{r4, r5, pc}
 800e188:	2400027c 	.word	0x2400027c

0800e18c <_malloc_r>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	1ccd      	adds	r5, r1, #3
 800e190:	f025 0503 	bic.w	r5, r5, #3
 800e194:	3508      	adds	r5, #8
 800e196:	2d0c      	cmp	r5, #12
 800e198:	bf38      	it	cc
 800e19a:	250c      	movcc	r5, #12
 800e19c:	2d00      	cmp	r5, #0
 800e19e:	4606      	mov	r6, r0
 800e1a0:	db01      	blt.n	800e1a6 <_malloc_r+0x1a>
 800e1a2:	42a9      	cmp	r1, r5
 800e1a4:	d903      	bls.n	800e1ae <_malloc_r+0x22>
 800e1a6:	230c      	movs	r3, #12
 800e1a8:	6033      	str	r3, [r6, #0]
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ae:	f000 fa0f 	bl	800e5d0 <__malloc_lock>
 800e1b2:	4921      	ldr	r1, [pc, #132]	; (800e238 <_malloc_r+0xac>)
 800e1b4:	680a      	ldr	r2, [r1, #0]
 800e1b6:	4614      	mov	r4, r2
 800e1b8:	b99c      	cbnz	r4, 800e1e2 <_malloc_r+0x56>
 800e1ba:	4f20      	ldr	r7, [pc, #128]	; (800e23c <_malloc_r+0xb0>)
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	b923      	cbnz	r3, 800e1ca <_malloc_r+0x3e>
 800e1c0:	4621      	mov	r1, r4
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f000 f998 	bl	800e4f8 <_sbrk_r>
 800e1c8:	6038      	str	r0, [r7, #0]
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	f000 f993 	bl	800e4f8 <_sbrk_r>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	d123      	bne.n	800e21e <_malloc_r+0x92>
 800e1d6:	230c      	movs	r3, #12
 800e1d8:	6033      	str	r3, [r6, #0]
 800e1da:	4630      	mov	r0, r6
 800e1dc:	f000 f9fe 	bl	800e5dc <__malloc_unlock>
 800e1e0:	e7e3      	b.n	800e1aa <_malloc_r+0x1e>
 800e1e2:	6823      	ldr	r3, [r4, #0]
 800e1e4:	1b5b      	subs	r3, r3, r5
 800e1e6:	d417      	bmi.n	800e218 <_malloc_r+0x8c>
 800e1e8:	2b0b      	cmp	r3, #11
 800e1ea:	d903      	bls.n	800e1f4 <_malloc_r+0x68>
 800e1ec:	6023      	str	r3, [r4, #0]
 800e1ee:	441c      	add	r4, r3
 800e1f0:	6025      	str	r5, [r4, #0]
 800e1f2:	e004      	b.n	800e1fe <_malloc_r+0x72>
 800e1f4:	6863      	ldr	r3, [r4, #4]
 800e1f6:	42a2      	cmp	r2, r4
 800e1f8:	bf0c      	ite	eq
 800e1fa:	600b      	streq	r3, [r1, #0]
 800e1fc:	6053      	strne	r3, [r2, #4]
 800e1fe:	4630      	mov	r0, r6
 800e200:	f000 f9ec 	bl	800e5dc <__malloc_unlock>
 800e204:	f104 000b 	add.w	r0, r4, #11
 800e208:	1d23      	adds	r3, r4, #4
 800e20a:	f020 0007 	bic.w	r0, r0, #7
 800e20e:	1ac2      	subs	r2, r0, r3
 800e210:	d0cc      	beq.n	800e1ac <_malloc_r+0x20>
 800e212:	1a1b      	subs	r3, r3, r0
 800e214:	50a3      	str	r3, [r4, r2]
 800e216:	e7c9      	b.n	800e1ac <_malloc_r+0x20>
 800e218:	4622      	mov	r2, r4
 800e21a:	6864      	ldr	r4, [r4, #4]
 800e21c:	e7cc      	b.n	800e1b8 <_malloc_r+0x2c>
 800e21e:	1cc4      	adds	r4, r0, #3
 800e220:	f024 0403 	bic.w	r4, r4, #3
 800e224:	42a0      	cmp	r0, r4
 800e226:	d0e3      	beq.n	800e1f0 <_malloc_r+0x64>
 800e228:	1a21      	subs	r1, r4, r0
 800e22a:	4630      	mov	r0, r6
 800e22c:	f000 f964 	bl	800e4f8 <_sbrk_r>
 800e230:	3001      	adds	r0, #1
 800e232:	d1dd      	bne.n	800e1f0 <_malloc_r+0x64>
 800e234:	e7cf      	b.n	800e1d6 <_malloc_r+0x4a>
 800e236:	bf00      	nop
 800e238:	2400027c 	.word	0x2400027c
 800e23c:	24000280 	.word	0x24000280

0800e240 <__ssputs_r>:
 800e240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e244:	688e      	ldr	r6, [r1, #8]
 800e246:	429e      	cmp	r6, r3
 800e248:	4682      	mov	sl, r0
 800e24a:	460c      	mov	r4, r1
 800e24c:	4690      	mov	r8, r2
 800e24e:	461f      	mov	r7, r3
 800e250:	d838      	bhi.n	800e2c4 <__ssputs_r+0x84>
 800e252:	898a      	ldrh	r2, [r1, #12]
 800e254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e258:	d032      	beq.n	800e2c0 <__ssputs_r+0x80>
 800e25a:	6825      	ldr	r5, [r4, #0]
 800e25c:	6909      	ldr	r1, [r1, #16]
 800e25e:	eba5 0901 	sub.w	r9, r5, r1
 800e262:	6965      	ldr	r5, [r4, #20]
 800e264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e26c:	3301      	adds	r3, #1
 800e26e:	444b      	add	r3, r9
 800e270:	106d      	asrs	r5, r5, #1
 800e272:	429d      	cmp	r5, r3
 800e274:	bf38      	it	cc
 800e276:	461d      	movcc	r5, r3
 800e278:	0553      	lsls	r3, r2, #21
 800e27a:	d531      	bpl.n	800e2e0 <__ssputs_r+0xa0>
 800e27c:	4629      	mov	r1, r5
 800e27e:	f7ff ff85 	bl	800e18c <_malloc_r>
 800e282:	4606      	mov	r6, r0
 800e284:	b950      	cbnz	r0, 800e29c <__ssputs_r+0x5c>
 800e286:	230c      	movs	r3, #12
 800e288:	f8ca 3000 	str.w	r3, [sl]
 800e28c:	89a3      	ldrh	r3, [r4, #12]
 800e28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e292:	81a3      	strh	r3, [r4, #12]
 800e294:	f04f 30ff 	mov.w	r0, #4294967295
 800e298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e29c:	6921      	ldr	r1, [r4, #16]
 800e29e:	464a      	mov	r2, r9
 800e2a0:	f7ff fb88 	bl	800d9b4 <memcpy>
 800e2a4:	89a3      	ldrh	r3, [r4, #12]
 800e2a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ae:	81a3      	strh	r3, [r4, #12]
 800e2b0:	6126      	str	r6, [r4, #16]
 800e2b2:	6165      	str	r5, [r4, #20]
 800e2b4:	444e      	add	r6, r9
 800e2b6:	eba5 0509 	sub.w	r5, r5, r9
 800e2ba:	6026      	str	r6, [r4, #0]
 800e2bc:	60a5      	str	r5, [r4, #8]
 800e2be:	463e      	mov	r6, r7
 800e2c0:	42be      	cmp	r6, r7
 800e2c2:	d900      	bls.n	800e2c6 <__ssputs_r+0x86>
 800e2c4:	463e      	mov	r6, r7
 800e2c6:	4632      	mov	r2, r6
 800e2c8:	6820      	ldr	r0, [r4, #0]
 800e2ca:	4641      	mov	r1, r8
 800e2cc:	f000 f966 	bl	800e59c <memmove>
 800e2d0:	68a3      	ldr	r3, [r4, #8]
 800e2d2:	6822      	ldr	r2, [r4, #0]
 800e2d4:	1b9b      	subs	r3, r3, r6
 800e2d6:	4432      	add	r2, r6
 800e2d8:	60a3      	str	r3, [r4, #8]
 800e2da:	6022      	str	r2, [r4, #0]
 800e2dc:	2000      	movs	r0, #0
 800e2de:	e7db      	b.n	800e298 <__ssputs_r+0x58>
 800e2e0:	462a      	mov	r2, r5
 800e2e2:	f000 f981 	bl	800e5e8 <_realloc_r>
 800e2e6:	4606      	mov	r6, r0
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d1e1      	bne.n	800e2b0 <__ssputs_r+0x70>
 800e2ec:	6921      	ldr	r1, [r4, #16]
 800e2ee:	4650      	mov	r0, sl
 800e2f0:	f7ff fefc 	bl	800e0ec <_free_r>
 800e2f4:	e7c7      	b.n	800e286 <__ssputs_r+0x46>
	...

0800e2f8 <_svfiprintf_r>:
 800e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fc:	4698      	mov	r8, r3
 800e2fe:	898b      	ldrh	r3, [r1, #12]
 800e300:	061b      	lsls	r3, r3, #24
 800e302:	b09d      	sub	sp, #116	; 0x74
 800e304:	4607      	mov	r7, r0
 800e306:	460d      	mov	r5, r1
 800e308:	4614      	mov	r4, r2
 800e30a:	d50e      	bpl.n	800e32a <_svfiprintf_r+0x32>
 800e30c:	690b      	ldr	r3, [r1, #16]
 800e30e:	b963      	cbnz	r3, 800e32a <_svfiprintf_r+0x32>
 800e310:	2140      	movs	r1, #64	; 0x40
 800e312:	f7ff ff3b 	bl	800e18c <_malloc_r>
 800e316:	6028      	str	r0, [r5, #0]
 800e318:	6128      	str	r0, [r5, #16]
 800e31a:	b920      	cbnz	r0, 800e326 <_svfiprintf_r+0x2e>
 800e31c:	230c      	movs	r3, #12
 800e31e:	603b      	str	r3, [r7, #0]
 800e320:	f04f 30ff 	mov.w	r0, #4294967295
 800e324:	e0d1      	b.n	800e4ca <_svfiprintf_r+0x1d2>
 800e326:	2340      	movs	r3, #64	; 0x40
 800e328:	616b      	str	r3, [r5, #20]
 800e32a:	2300      	movs	r3, #0
 800e32c:	9309      	str	r3, [sp, #36]	; 0x24
 800e32e:	2320      	movs	r3, #32
 800e330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e334:	f8cd 800c 	str.w	r8, [sp, #12]
 800e338:	2330      	movs	r3, #48	; 0x30
 800e33a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4e4 <_svfiprintf_r+0x1ec>
 800e33e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e342:	f04f 0901 	mov.w	r9, #1
 800e346:	4623      	mov	r3, r4
 800e348:	469a      	mov	sl, r3
 800e34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e34e:	b10a      	cbz	r2, 800e354 <_svfiprintf_r+0x5c>
 800e350:	2a25      	cmp	r2, #37	; 0x25
 800e352:	d1f9      	bne.n	800e348 <_svfiprintf_r+0x50>
 800e354:	ebba 0b04 	subs.w	fp, sl, r4
 800e358:	d00b      	beq.n	800e372 <_svfiprintf_r+0x7a>
 800e35a:	465b      	mov	r3, fp
 800e35c:	4622      	mov	r2, r4
 800e35e:	4629      	mov	r1, r5
 800e360:	4638      	mov	r0, r7
 800e362:	f7ff ff6d 	bl	800e240 <__ssputs_r>
 800e366:	3001      	adds	r0, #1
 800e368:	f000 80aa 	beq.w	800e4c0 <_svfiprintf_r+0x1c8>
 800e36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e36e:	445a      	add	r2, fp
 800e370:	9209      	str	r2, [sp, #36]	; 0x24
 800e372:	f89a 3000 	ldrb.w	r3, [sl]
 800e376:	2b00      	cmp	r3, #0
 800e378:	f000 80a2 	beq.w	800e4c0 <_svfiprintf_r+0x1c8>
 800e37c:	2300      	movs	r3, #0
 800e37e:	f04f 32ff 	mov.w	r2, #4294967295
 800e382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e386:	f10a 0a01 	add.w	sl, sl, #1
 800e38a:	9304      	str	r3, [sp, #16]
 800e38c:	9307      	str	r3, [sp, #28]
 800e38e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e392:	931a      	str	r3, [sp, #104]	; 0x68
 800e394:	4654      	mov	r4, sl
 800e396:	2205      	movs	r2, #5
 800e398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e39c:	4851      	ldr	r0, [pc, #324]	; (800e4e4 <_svfiprintf_r+0x1ec>)
 800e39e:	f7f1 ffa7 	bl	80002f0 <memchr>
 800e3a2:	9a04      	ldr	r2, [sp, #16]
 800e3a4:	b9d8      	cbnz	r0, 800e3de <_svfiprintf_r+0xe6>
 800e3a6:	06d0      	lsls	r0, r2, #27
 800e3a8:	bf44      	itt	mi
 800e3aa:	2320      	movmi	r3, #32
 800e3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3b0:	0711      	lsls	r1, r2, #28
 800e3b2:	bf44      	itt	mi
 800e3b4:	232b      	movmi	r3, #43	; 0x2b
 800e3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e3be:	2b2a      	cmp	r3, #42	; 0x2a
 800e3c0:	d015      	beq.n	800e3ee <_svfiprintf_r+0xf6>
 800e3c2:	9a07      	ldr	r2, [sp, #28]
 800e3c4:	4654      	mov	r4, sl
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	f04f 0c0a 	mov.w	ip, #10
 800e3cc:	4621      	mov	r1, r4
 800e3ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3d2:	3b30      	subs	r3, #48	; 0x30
 800e3d4:	2b09      	cmp	r3, #9
 800e3d6:	d94e      	bls.n	800e476 <_svfiprintf_r+0x17e>
 800e3d8:	b1b0      	cbz	r0, 800e408 <_svfiprintf_r+0x110>
 800e3da:	9207      	str	r2, [sp, #28]
 800e3dc:	e014      	b.n	800e408 <_svfiprintf_r+0x110>
 800e3de:	eba0 0308 	sub.w	r3, r0, r8
 800e3e2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3e6:	4313      	orrs	r3, r2
 800e3e8:	9304      	str	r3, [sp, #16]
 800e3ea:	46a2      	mov	sl, r4
 800e3ec:	e7d2      	b.n	800e394 <_svfiprintf_r+0x9c>
 800e3ee:	9b03      	ldr	r3, [sp, #12]
 800e3f0:	1d19      	adds	r1, r3, #4
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	9103      	str	r1, [sp, #12]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	bfbb      	ittet	lt
 800e3fa:	425b      	neglt	r3, r3
 800e3fc:	f042 0202 	orrlt.w	r2, r2, #2
 800e400:	9307      	strge	r3, [sp, #28]
 800e402:	9307      	strlt	r3, [sp, #28]
 800e404:	bfb8      	it	lt
 800e406:	9204      	strlt	r2, [sp, #16]
 800e408:	7823      	ldrb	r3, [r4, #0]
 800e40a:	2b2e      	cmp	r3, #46	; 0x2e
 800e40c:	d10c      	bne.n	800e428 <_svfiprintf_r+0x130>
 800e40e:	7863      	ldrb	r3, [r4, #1]
 800e410:	2b2a      	cmp	r3, #42	; 0x2a
 800e412:	d135      	bne.n	800e480 <_svfiprintf_r+0x188>
 800e414:	9b03      	ldr	r3, [sp, #12]
 800e416:	1d1a      	adds	r2, r3, #4
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	9203      	str	r2, [sp, #12]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	bfb8      	it	lt
 800e420:	f04f 33ff 	movlt.w	r3, #4294967295
 800e424:	3402      	adds	r4, #2
 800e426:	9305      	str	r3, [sp, #20]
 800e428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4f4 <_svfiprintf_r+0x1fc>
 800e42c:	7821      	ldrb	r1, [r4, #0]
 800e42e:	2203      	movs	r2, #3
 800e430:	4650      	mov	r0, sl
 800e432:	f7f1 ff5d 	bl	80002f0 <memchr>
 800e436:	b140      	cbz	r0, 800e44a <_svfiprintf_r+0x152>
 800e438:	2340      	movs	r3, #64	; 0x40
 800e43a:	eba0 000a 	sub.w	r0, r0, sl
 800e43e:	fa03 f000 	lsl.w	r0, r3, r0
 800e442:	9b04      	ldr	r3, [sp, #16]
 800e444:	4303      	orrs	r3, r0
 800e446:	3401      	adds	r4, #1
 800e448:	9304      	str	r3, [sp, #16]
 800e44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e44e:	4826      	ldr	r0, [pc, #152]	; (800e4e8 <_svfiprintf_r+0x1f0>)
 800e450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e454:	2206      	movs	r2, #6
 800e456:	f7f1 ff4b 	bl	80002f0 <memchr>
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d038      	beq.n	800e4d0 <_svfiprintf_r+0x1d8>
 800e45e:	4b23      	ldr	r3, [pc, #140]	; (800e4ec <_svfiprintf_r+0x1f4>)
 800e460:	bb1b      	cbnz	r3, 800e4aa <_svfiprintf_r+0x1b2>
 800e462:	9b03      	ldr	r3, [sp, #12]
 800e464:	3307      	adds	r3, #7
 800e466:	f023 0307 	bic.w	r3, r3, #7
 800e46a:	3308      	adds	r3, #8
 800e46c:	9303      	str	r3, [sp, #12]
 800e46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e470:	4433      	add	r3, r6
 800e472:	9309      	str	r3, [sp, #36]	; 0x24
 800e474:	e767      	b.n	800e346 <_svfiprintf_r+0x4e>
 800e476:	fb0c 3202 	mla	r2, ip, r2, r3
 800e47a:	460c      	mov	r4, r1
 800e47c:	2001      	movs	r0, #1
 800e47e:	e7a5      	b.n	800e3cc <_svfiprintf_r+0xd4>
 800e480:	2300      	movs	r3, #0
 800e482:	3401      	adds	r4, #1
 800e484:	9305      	str	r3, [sp, #20]
 800e486:	4619      	mov	r1, r3
 800e488:	f04f 0c0a 	mov.w	ip, #10
 800e48c:	4620      	mov	r0, r4
 800e48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e492:	3a30      	subs	r2, #48	; 0x30
 800e494:	2a09      	cmp	r2, #9
 800e496:	d903      	bls.n	800e4a0 <_svfiprintf_r+0x1a8>
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d0c5      	beq.n	800e428 <_svfiprintf_r+0x130>
 800e49c:	9105      	str	r1, [sp, #20]
 800e49e:	e7c3      	b.n	800e428 <_svfiprintf_r+0x130>
 800e4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e7f0      	b.n	800e48c <_svfiprintf_r+0x194>
 800e4aa:	ab03      	add	r3, sp, #12
 800e4ac:	9300      	str	r3, [sp, #0]
 800e4ae:	462a      	mov	r2, r5
 800e4b0:	4b0f      	ldr	r3, [pc, #60]	; (800e4f0 <_svfiprintf_r+0x1f8>)
 800e4b2:	a904      	add	r1, sp, #16
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	f7fe f88f 	bl	800c5d8 <_printf_float>
 800e4ba:	1c42      	adds	r2, r0, #1
 800e4bc:	4606      	mov	r6, r0
 800e4be:	d1d6      	bne.n	800e46e <_svfiprintf_r+0x176>
 800e4c0:	89ab      	ldrh	r3, [r5, #12]
 800e4c2:	065b      	lsls	r3, r3, #25
 800e4c4:	f53f af2c 	bmi.w	800e320 <_svfiprintf_r+0x28>
 800e4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4ca:	b01d      	add	sp, #116	; 0x74
 800e4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4d0:	ab03      	add	r3, sp, #12
 800e4d2:	9300      	str	r3, [sp, #0]
 800e4d4:	462a      	mov	r2, r5
 800e4d6:	4b06      	ldr	r3, [pc, #24]	; (800e4f0 <_svfiprintf_r+0x1f8>)
 800e4d8:	a904      	add	r1, sp, #16
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f7fe fb08 	bl	800caf0 <_printf_i>
 800e4e0:	e7eb      	b.n	800e4ba <_svfiprintf_r+0x1c2>
 800e4e2:	bf00      	nop
 800e4e4:	0800f3fc 	.word	0x0800f3fc
 800e4e8:	0800f406 	.word	0x0800f406
 800e4ec:	0800c5d9 	.word	0x0800c5d9
 800e4f0:	0800e241 	.word	0x0800e241
 800e4f4:	0800f402 	.word	0x0800f402

0800e4f8 <_sbrk_r>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4d06      	ldr	r5, [pc, #24]	; (800e514 <_sbrk_r+0x1c>)
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4604      	mov	r4, r0
 800e500:	4608      	mov	r0, r1
 800e502:	602b      	str	r3, [r5, #0]
 800e504:	f7f3 fe5e 	bl	80021c4 <_sbrk>
 800e508:	1c43      	adds	r3, r0, #1
 800e50a:	d102      	bne.n	800e512 <_sbrk_r+0x1a>
 800e50c:	682b      	ldr	r3, [r5, #0]
 800e50e:	b103      	cbz	r3, 800e512 <_sbrk_r+0x1a>
 800e510:	6023      	str	r3, [r4, #0]
 800e512:	bd38      	pop	{r3, r4, r5, pc}
 800e514:	240009a8 	.word	0x240009a8

0800e518 <__assert_func>:
 800e518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e51a:	4614      	mov	r4, r2
 800e51c:	461a      	mov	r2, r3
 800e51e:	4b09      	ldr	r3, [pc, #36]	; (800e544 <__assert_func+0x2c>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	4605      	mov	r5, r0
 800e524:	68d8      	ldr	r0, [r3, #12]
 800e526:	b14c      	cbz	r4, 800e53c <__assert_func+0x24>
 800e528:	4b07      	ldr	r3, [pc, #28]	; (800e548 <__assert_func+0x30>)
 800e52a:	9100      	str	r1, [sp, #0]
 800e52c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e530:	4906      	ldr	r1, [pc, #24]	; (800e54c <__assert_func+0x34>)
 800e532:	462b      	mov	r3, r5
 800e534:	f000 f80e 	bl	800e554 <fiprintf>
 800e538:	f000 faa4 	bl	800ea84 <abort>
 800e53c:	4b04      	ldr	r3, [pc, #16]	; (800e550 <__assert_func+0x38>)
 800e53e:	461c      	mov	r4, r3
 800e540:	e7f3      	b.n	800e52a <__assert_func+0x12>
 800e542:	bf00      	nop
 800e544:	24000020 	.word	0x24000020
 800e548:	0800f40d 	.word	0x0800f40d
 800e54c:	0800f41a 	.word	0x0800f41a
 800e550:	0800f448 	.word	0x0800f448

0800e554 <fiprintf>:
 800e554:	b40e      	push	{r1, r2, r3}
 800e556:	b503      	push	{r0, r1, lr}
 800e558:	4601      	mov	r1, r0
 800e55a:	ab03      	add	r3, sp, #12
 800e55c:	4805      	ldr	r0, [pc, #20]	; (800e574 <fiprintf+0x20>)
 800e55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e562:	6800      	ldr	r0, [r0, #0]
 800e564:	9301      	str	r3, [sp, #4]
 800e566:	f000 f88f 	bl	800e688 <_vfiprintf_r>
 800e56a:	b002      	add	sp, #8
 800e56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e570:	b003      	add	sp, #12
 800e572:	4770      	bx	lr
 800e574:	24000020 	.word	0x24000020

0800e578 <__ascii_mbtowc>:
 800e578:	b082      	sub	sp, #8
 800e57a:	b901      	cbnz	r1, 800e57e <__ascii_mbtowc+0x6>
 800e57c:	a901      	add	r1, sp, #4
 800e57e:	b142      	cbz	r2, 800e592 <__ascii_mbtowc+0x1a>
 800e580:	b14b      	cbz	r3, 800e596 <__ascii_mbtowc+0x1e>
 800e582:	7813      	ldrb	r3, [r2, #0]
 800e584:	600b      	str	r3, [r1, #0]
 800e586:	7812      	ldrb	r2, [r2, #0]
 800e588:	1e10      	subs	r0, r2, #0
 800e58a:	bf18      	it	ne
 800e58c:	2001      	movne	r0, #1
 800e58e:	b002      	add	sp, #8
 800e590:	4770      	bx	lr
 800e592:	4610      	mov	r0, r2
 800e594:	e7fb      	b.n	800e58e <__ascii_mbtowc+0x16>
 800e596:	f06f 0001 	mvn.w	r0, #1
 800e59a:	e7f8      	b.n	800e58e <__ascii_mbtowc+0x16>

0800e59c <memmove>:
 800e59c:	4288      	cmp	r0, r1
 800e59e:	b510      	push	{r4, lr}
 800e5a0:	eb01 0402 	add.w	r4, r1, r2
 800e5a4:	d902      	bls.n	800e5ac <memmove+0x10>
 800e5a6:	4284      	cmp	r4, r0
 800e5a8:	4623      	mov	r3, r4
 800e5aa:	d807      	bhi.n	800e5bc <memmove+0x20>
 800e5ac:	1e43      	subs	r3, r0, #1
 800e5ae:	42a1      	cmp	r1, r4
 800e5b0:	d008      	beq.n	800e5c4 <memmove+0x28>
 800e5b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5ba:	e7f8      	b.n	800e5ae <memmove+0x12>
 800e5bc:	4402      	add	r2, r0
 800e5be:	4601      	mov	r1, r0
 800e5c0:	428a      	cmp	r2, r1
 800e5c2:	d100      	bne.n	800e5c6 <memmove+0x2a>
 800e5c4:	bd10      	pop	{r4, pc}
 800e5c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5ce:	e7f7      	b.n	800e5c0 <memmove+0x24>

0800e5d0 <__malloc_lock>:
 800e5d0:	4801      	ldr	r0, [pc, #4]	; (800e5d8 <__malloc_lock+0x8>)
 800e5d2:	f000 bc17 	b.w	800ee04 <__retarget_lock_acquire_recursive>
 800e5d6:	bf00      	nop
 800e5d8:	240009b0 	.word	0x240009b0

0800e5dc <__malloc_unlock>:
 800e5dc:	4801      	ldr	r0, [pc, #4]	; (800e5e4 <__malloc_unlock+0x8>)
 800e5de:	f000 bc12 	b.w	800ee06 <__retarget_lock_release_recursive>
 800e5e2:	bf00      	nop
 800e5e4:	240009b0 	.word	0x240009b0

0800e5e8 <_realloc_r>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	4607      	mov	r7, r0
 800e5ec:	4614      	mov	r4, r2
 800e5ee:	460e      	mov	r6, r1
 800e5f0:	b921      	cbnz	r1, 800e5fc <_realloc_r+0x14>
 800e5f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	f7ff bdc8 	b.w	800e18c <_malloc_r>
 800e5fc:	b922      	cbnz	r2, 800e608 <_realloc_r+0x20>
 800e5fe:	f7ff fd75 	bl	800e0ec <_free_r>
 800e602:	4625      	mov	r5, r4
 800e604:	4628      	mov	r0, r5
 800e606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e608:	f000 fc62 	bl	800eed0 <_malloc_usable_size_r>
 800e60c:	42a0      	cmp	r0, r4
 800e60e:	d20f      	bcs.n	800e630 <_realloc_r+0x48>
 800e610:	4621      	mov	r1, r4
 800e612:	4638      	mov	r0, r7
 800e614:	f7ff fdba 	bl	800e18c <_malloc_r>
 800e618:	4605      	mov	r5, r0
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d0f2      	beq.n	800e604 <_realloc_r+0x1c>
 800e61e:	4631      	mov	r1, r6
 800e620:	4622      	mov	r2, r4
 800e622:	f7ff f9c7 	bl	800d9b4 <memcpy>
 800e626:	4631      	mov	r1, r6
 800e628:	4638      	mov	r0, r7
 800e62a:	f7ff fd5f 	bl	800e0ec <_free_r>
 800e62e:	e7e9      	b.n	800e604 <_realloc_r+0x1c>
 800e630:	4635      	mov	r5, r6
 800e632:	e7e7      	b.n	800e604 <_realloc_r+0x1c>

0800e634 <__sfputc_r>:
 800e634:	6893      	ldr	r3, [r2, #8]
 800e636:	3b01      	subs	r3, #1
 800e638:	2b00      	cmp	r3, #0
 800e63a:	b410      	push	{r4}
 800e63c:	6093      	str	r3, [r2, #8]
 800e63e:	da08      	bge.n	800e652 <__sfputc_r+0x1e>
 800e640:	6994      	ldr	r4, [r2, #24]
 800e642:	42a3      	cmp	r3, r4
 800e644:	db01      	blt.n	800e64a <__sfputc_r+0x16>
 800e646:	290a      	cmp	r1, #10
 800e648:	d103      	bne.n	800e652 <__sfputc_r+0x1e>
 800e64a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e64e:	f000 b94b 	b.w	800e8e8 <__swbuf_r>
 800e652:	6813      	ldr	r3, [r2, #0]
 800e654:	1c58      	adds	r0, r3, #1
 800e656:	6010      	str	r0, [r2, #0]
 800e658:	7019      	strb	r1, [r3, #0]
 800e65a:	4608      	mov	r0, r1
 800e65c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e660:	4770      	bx	lr

0800e662 <__sfputs_r>:
 800e662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e664:	4606      	mov	r6, r0
 800e666:	460f      	mov	r7, r1
 800e668:	4614      	mov	r4, r2
 800e66a:	18d5      	adds	r5, r2, r3
 800e66c:	42ac      	cmp	r4, r5
 800e66e:	d101      	bne.n	800e674 <__sfputs_r+0x12>
 800e670:	2000      	movs	r0, #0
 800e672:	e007      	b.n	800e684 <__sfputs_r+0x22>
 800e674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e678:	463a      	mov	r2, r7
 800e67a:	4630      	mov	r0, r6
 800e67c:	f7ff ffda 	bl	800e634 <__sfputc_r>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d1f3      	bne.n	800e66c <__sfputs_r+0xa>
 800e684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e688 <_vfiprintf_r>:
 800e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e68c:	460d      	mov	r5, r1
 800e68e:	b09d      	sub	sp, #116	; 0x74
 800e690:	4614      	mov	r4, r2
 800e692:	4698      	mov	r8, r3
 800e694:	4606      	mov	r6, r0
 800e696:	b118      	cbz	r0, 800e6a0 <_vfiprintf_r+0x18>
 800e698:	6983      	ldr	r3, [r0, #24]
 800e69a:	b90b      	cbnz	r3, 800e6a0 <_vfiprintf_r+0x18>
 800e69c:	f000 fb14 	bl	800ecc8 <__sinit>
 800e6a0:	4b89      	ldr	r3, [pc, #548]	; (800e8c8 <_vfiprintf_r+0x240>)
 800e6a2:	429d      	cmp	r5, r3
 800e6a4:	d11b      	bne.n	800e6de <_vfiprintf_r+0x56>
 800e6a6:	6875      	ldr	r5, [r6, #4]
 800e6a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6aa:	07d9      	lsls	r1, r3, #31
 800e6ac:	d405      	bmi.n	800e6ba <_vfiprintf_r+0x32>
 800e6ae:	89ab      	ldrh	r3, [r5, #12]
 800e6b0:	059a      	lsls	r2, r3, #22
 800e6b2:	d402      	bmi.n	800e6ba <_vfiprintf_r+0x32>
 800e6b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6b6:	f000 fba5 	bl	800ee04 <__retarget_lock_acquire_recursive>
 800e6ba:	89ab      	ldrh	r3, [r5, #12]
 800e6bc:	071b      	lsls	r3, r3, #28
 800e6be:	d501      	bpl.n	800e6c4 <_vfiprintf_r+0x3c>
 800e6c0:	692b      	ldr	r3, [r5, #16]
 800e6c2:	b9eb      	cbnz	r3, 800e700 <_vfiprintf_r+0x78>
 800e6c4:	4629      	mov	r1, r5
 800e6c6:	4630      	mov	r0, r6
 800e6c8:	f000 f96e 	bl	800e9a8 <__swsetup_r>
 800e6cc:	b1c0      	cbz	r0, 800e700 <_vfiprintf_r+0x78>
 800e6ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6d0:	07dc      	lsls	r4, r3, #31
 800e6d2:	d50e      	bpl.n	800e6f2 <_vfiprintf_r+0x6a>
 800e6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d8:	b01d      	add	sp, #116	; 0x74
 800e6da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6de:	4b7b      	ldr	r3, [pc, #492]	; (800e8cc <_vfiprintf_r+0x244>)
 800e6e0:	429d      	cmp	r5, r3
 800e6e2:	d101      	bne.n	800e6e8 <_vfiprintf_r+0x60>
 800e6e4:	68b5      	ldr	r5, [r6, #8]
 800e6e6:	e7df      	b.n	800e6a8 <_vfiprintf_r+0x20>
 800e6e8:	4b79      	ldr	r3, [pc, #484]	; (800e8d0 <_vfiprintf_r+0x248>)
 800e6ea:	429d      	cmp	r5, r3
 800e6ec:	bf08      	it	eq
 800e6ee:	68f5      	ldreq	r5, [r6, #12]
 800e6f0:	e7da      	b.n	800e6a8 <_vfiprintf_r+0x20>
 800e6f2:	89ab      	ldrh	r3, [r5, #12]
 800e6f4:	0598      	lsls	r0, r3, #22
 800e6f6:	d4ed      	bmi.n	800e6d4 <_vfiprintf_r+0x4c>
 800e6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e6fa:	f000 fb84 	bl	800ee06 <__retarget_lock_release_recursive>
 800e6fe:	e7e9      	b.n	800e6d4 <_vfiprintf_r+0x4c>
 800e700:	2300      	movs	r3, #0
 800e702:	9309      	str	r3, [sp, #36]	; 0x24
 800e704:	2320      	movs	r3, #32
 800e706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e70e:	2330      	movs	r3, #48	; 0x30
 800e710:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e8d4 <_vfiprintf_r+0x24c>
 800e714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e718:	f04f 0901 	mov.w	r9, #1
 800e71c:	4623      	mov	r3, r4
 800e71e:	469a      	mov	sl, r3
 800e720:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e724:	b10a      	cbz	r2, 800e72a <_vfiprintf_r+0xa2>
 800e726:	2a25      	cmp	r2, #37	; 0x25
 800e728:	d1f9      	bne.n	800e71e <_vfiprintf_r+0x96>
 800e72a:	ebba 0b04 	subs.w	fp, sl, r4
 800e72e:	d00b      	beq.n	800e748 <_vfiprintf_r+0xc0>
 800e730:	465b      	mov	r3, fp
 800e732:	4622      	mov	r2, r4
 800e734:	4629      	mov	r1, r5
 800e736:	4630      	mov	r0, r6
 800e738:	f7ff ff93 	bl	800e662 <__sfputs_r>
 800e73c:	3001      	adds	r0, #1
 800e73e:	f000 80aa 	beq.w	800e896 <_vfiprintf_r+0x20e>
 800e742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e744:	445a      	add	r2, fp
 800e746:	9209      	str	r2, [sp, #36]	; 0x24
 800e748:	f89a 3000 	ldrb.w	r3, [sl]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f000 80a2 	beq.w	800e896 <_vfiprintf_r+0x20e>
 800e752:	2300      	movs	r3, #0
 800e754:	f04f 32ff 	mov.w	r2, #4294967295
 800e758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e75c:	f10a 0a01 	add.w	sl, sl, #1
 800e760:	9304      	str	r3, [sp, #16]
 800e762:	9307      	str	r3, [sp, #28]
 800e764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e768:	931a      	str	r3, [sp, #104]	; 0x68
 800e76a:	4654      	mov	r4, sl
 800e76c:	2205      	movs	r2, #5
 800e76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e772:	4858      	ldr	r0, [pc, #352]	; (800e8d4 <_vfiprintf_r+0x24c>)
 800e774:	f7f1 fdbc 	bl	80002f0 <memchr>
 800e778:	9a04      	ldr	r2, [sp, #16]
 800e77a:	b9d8      	cbnz	r0, 800e7b4 <_vfiprintf_r+0x12c>
 800e77c:	06d1      	lsls	r1, r2, #27
 800e77e:	bf44      	itt	mi
 800e780:	2320      	movmi	r3, #32
 800e782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e786:	0713      	lsls	r3, r2, #28
 800e788:	bf44      	itt	mi
 800e78a:	232b      	movmi	r3, #43	; 0x2b
 800e78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e790:	f89a 3000 	ldrb.w	r3, [sl]
 800e794:	2b2a      	cmp	r3, #42	; 0x2a
 800e796:	d015      	beq.n	800e7c4 <_vfiprintf_r+0x13c>
 800e798:	9a07      	ldr	r2, [sp, #28]
 800e79a:	4654      	mov	r4, sl
 800e79c:	2000      	movs	r0, #0
 800e79e:	f04f 0c0a 	mov.w	ip, #10
 800e7a2:	4621      	mov	r1, r4
 800e7a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e7a8:	3b30      	subs	r3, #48	; 0x30
 800e7aa:	2b09      	cmp	r3, #9
 800e7ac:	d94e      	bls.n	800e84c <_vfiprintf_r+0x1c4>
 800e7ae:	b1b0      	cbz	r0, 800e7de <_vfiprintf_r+0x156>
 800e7b0:	9207      	str	r2, [sp, #28]
 800e7b2:	e014      	b.n	800e7de <_vfiprintf_r+0x156>
 800e7b4:	eba0 0308 	sub.w	r3, r0, r8
 800e7b8:	fa09 f303 	lsl.w	r3, r9, r3
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	9304      	str	r3, [sp, #16]
 800e7c0:	46a2      	mov	sl, r4
 800e7c2:	e7d2      	b.n	800e76a <_vfiprintf_r+0xe2>
 800e7c4:	9b03      	ldr	r3, [sp, #12]
 800e7c6:	1d19      	adds	r1, r3, #4
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	9103      	str	r1, [sp, #12]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	bfbb      	ittet	lt
 800e7d0:	425b      	neglt	r3, r3
 800e7d2:	f042 0202 	orrlt.w	r2, r2, #2
 800e7d6:	9307      	strge	r3, [sp, #28]
 800e7d8:	9307      	strlt	r3, [sp, #28]
 800e7da:	bfb8      	it	lt
 800e7dc:	9204      	strlt	r2, [sp, #16]
 800e7de:	7823      	ldrb	r3, [r4, #0]
 800e7e0:	2b2e      	cmp	r3, #46	; 0x2e
 800e7e2:	d10c      	bne.n	800e7fe <_vfiprintf_r+0x176>
 800e7e4:	7863      	ldrb	r3, [r4, #1]
 800e7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e7e8:	d135      	bne.n	800e856 <_vfiprintf_r+0x1ce>
 800e7ea:	9b03      	ldr	r3, [sp, #12]
 800e7ec:	1d1a      	adds	r2, r3, #4
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	9203      	str	r2, [sp, #12]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	bfb8      	it	lt
 800e7f6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e7fa:	3402      	adds	r4, #2
 800e7fc:	9305      	str	r3, [sp, #20]
 800e7fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e8e4 <_vfiprintf_r+0x25c>
 800e802:	7821      	ldrb	r1, [r4, #0]
 800e804:	2203      	movs	r2, #3
 800e806:	4650      	mov	r0, sl
 800e808:	f7f1 fd72 	bl	80002f0 <memchr>
 800e80c:	b140      	cbz	r0, 800e820 <_vfiprintf_r+0x198>
 800e80e:	2340      	movs	r3, #64	; 0x40
 800e810:	eba0 000a 	sub.w	r0, r0, sl
 800e814:	fa03 f000 	lsl.w	r0, r3, r0
 800e818:	9b04      	ldr	r3, [sp, #16]
 800e81a:	4303      	orrs	r3, r0
 800e81c:	3401      	adds	r4, #1
 800e81e:	9304      	str	r3, [sp, #16]
 800e820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e824:	482c      	ldr	r0, [pc, #176]	; (800e8d8 <_vfiprintf_r+0x250>)
 800e826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e82a:	2206      	movs	r2, #6
 800e82c:	f7f1 fd60 	bl	80002f0 <memchr>
 800e830:	2800      	cmp	r0, #0
 800e832:	d03f      	beq.n	800e8b4 <_vfiprintf_r+0x22c>
 800e834:	4b29      	ldr	r3, [pc, #164]	; (800e8dc <_vfiprintf_r+0x254>)
 800e836:	bb1b      	cbnz	r3, 800e880 <_vfiprintf_r+0x1f8>
 800e838:	9b03      	ldr	r3, [sp, #12]
 800e83a:	3307      	adds	r3, #7
 800e83c:	f023 0307 	bic.w	r3, r3, #7
 800e840:	3308      	adds	r3, #8
 800e842:	9303      	str	r3, [sp, #12]
 800e844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e846:	443b      	add	r3, r7
 800e848:	9309      	str	r3, [sp, #36]	; 0x24
 800e84a:	e767      	b.n	800e71c <_vfiprintf_r+0x94>
 800e84c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e850:	460c      	mov	r4, r1
 800e852:	2001      	movs	r0, #1
 800e854:	e7a5      	b.n	800e7a2 <_vfiprintf_r+0x11a>
 800e856:	2300      	movs	r3, #0
 800e858:	3401      	adds	r4, #1
 800e85a:	9305      	str	r3, [sp, #20]
 800e85c:	4619      	mov	r1, r3
 800e85e:	f04f 0c0a 	mov.w	ip, #10
 800e862:	4620      	mov	r0, r4
 800e864:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e868:	3a30      	subs	r2, #48	; 0x30
 800e86a:	2a09      	cmp	r2, #9
 800e86c:	d903      	bls.n	800e876 <_vfiprintf_r+0x1ee>
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d0c5      	beq.n	800e7fe <_vfiprintf_r+0x176>
 800e872:	9105      	str	r1, [sp, #20]
 800e874:	e7c3      	b.n	800e7fe <_vfiprintf_r+0x176>
 800e876:	fb0c 2101 	mla	r1, ip, r1, r2
 800e87a:	4604      	mov	r4, r0
 800e87c:	2301      	movs	r3, #1
 800e87e:	e7f0      	b.n	800e862 <_vfiprintf_r+0x1da>
 800e880:	ab03      	add	r3, sp, #12
 800e882:	9300      	str	r3, [sp, #0]
 800e884:	462a      	mov	r2, r5
 800e886:	4b16      	ldr	r3, [pc, #88]	; (800e8e0 <_vfiprintf_r+0x258>)
 800e888:	a904      	add	r1, sp, #16
 800e88a:	4630      	mov	r0, r6
 800e88c:	f7fd fea4 	bl	800c5d8 <_printf_float>
 800e890:	4607      	mov	r7, r0
 800e892:	1c78      	adds	r0, r7, #1
 800e894:	d1d6      	bne.n	800e844 <_vfiprintf_r+0x1bc>
 800e896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e898:	07d9      	lsls	r1, r3, #31
 800e89a:	d405      	bmi.n	800e8a8 <_vfiprintf_r+0x220>
 800e89c:	89ab      	ldrh	r3, [r5, #12]
 800e89e:	059a      	lsls	r2, r3, #22
 800e8a0:	d402      	bmi.n	800e8a8 <_vfiprintf_r+0x220>
 800e8a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e8a4:	f000 faaf 	bl	800ee06 <__retarget_lock_release_recursive>
 800e8a8:	89ab      	ldrh	r3, [r5, #12]
 800e8aa:	065b      	lsls	r3, r3, #25
 800e8ac:	f53f af12 	bmi.w	800e6d4 <_vfiprintf_r+0x4c>
 800e8b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e8b2:	e711      	b.n	800e6d8 <_vfiprintf_r+0x50>
 800e8b4:	ab03      	add	r3, sp, #12
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	462a      	mov	r2, r5
 800e8ba:	4b09      	ldr	r3, [pc, #36]	; (800e8e0 <_vfiprintf_r+0x258>)
 800e8bc:	a904      	add	r1, sp, #16
 800e8be:	4630      	mov	r0, r6
 800e8c0:	f7fe f916 	bl	800caf0 <_printf_i>
 800e8c4:	e7e4      	b.n	800e890 <_vfiprintf_r+0x208>
 800e8c6:	bf00      	nop
 800e8c8:	0800f574 	.word	0x0800f574
 800e8cc:	0800f594 	.word	0x0800f594
 800e8d0:	0800f554 	.word	0x0800f554
 800e8d4:	0800f3fc 	.word	0x0800f3fc
 800e8d8:	0800f406 	.word	0x0800f406
 800e8dc:	0800c5d9 	.word	0x0800c5d9
 800e8e0:	0800e663 	.word	0x0800e663
 800e8e4:	0800f402 	.word	0x0800f402

0800e8e8 <__swbuf_r>:
 800e8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ea:	460e      	mov	r6, r1
 800e8ec:	4614      	mov	r4, r2
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	b118      	cbz	r0, 800e8fa <__swbuf_r+0x12>
 800e8f2:	6983      	ldr	r3, [r0, #24]
 800e8f4:	b90b      	cbnz	r3, 800e8fa <__swbuf_r+0x12>
 800e8f6:	f000 f9e7 	bl	800ecc8 <__sinit>
 800e8fa:	4b21      	ldr	r3, [pc, #132]	; (800e980 <__swbuf_r+0x98>)
 800e8fc:	429c      	cmp	r4, r3
 800e8fe:	d12b      	bne.n	800e958 <__swbuf_r+0x70>
 800e900:	686c      	ldr	r4, [r5, #4]
 800e902:	69a3      	ldr	r3, [r4, #24]
 800e904:	60a3      	str	r3, [r4, #8]
 800e906:	89a3      	ldrh	r3, [r4, #12]
 800e908:	071a      	lsls	r2, r3, #28
 800e90a:	d52f      	bpl.n	800e96c <__swbuf_r+0x84>
 800e90c:	6923      	ldr	r3, [r4, #16]
 800e90e:	b36b      	cbz	r3, 800e96c <__swbuf_r+0x84>
 800e910:	6923      	ldr	r3, [r4, #16]
 800e912:	6820      	ldr	r0, [r4, #0]
 800e914:	1ac0      	subs	r0, r0, r3
 800e916:	6963      	ldr	r3, [r4, #20]
 800e918:	b2f6      	uxtb	r6, r6
 800e91a:	4283      	cmp	r3, r0
 800e91c:	4637      	mov	r7, r6
 800e91e:	dc04      	bgt.n	800e92a <__swbuf_r+0x42>
 800e920:	4621      	mov	r1, r4
 800e922:	4628      	mov	r0, r5
 800e924:	f000 f93c 	bl	800eba0 <_fflush_r>
 800e928:	bb30      	cbnz	r0, 800e978 <__swbuf_r+0x90>
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	60a3      	str	r3, [r4, #8]
 800e930:	6823      	ldr	r3, [r4, #0]
 800e932:	1c5a      	adds	r2, r3, #1
 800e934:	6022      	str	r2, [r4, #0]
 800e936:	701e      	strb	r6, [r3, #0]
 800e938:	6963      	ldr	r3, [r4, #20]
 800e93a:	3001      	adds	r0, #1
 800e93c:	4283      	cmp	r3, r0
 800e93e:	d004      	beq.n	800e94a <__swbuf_r+0x62>
 800e940:	89a3      	ldrh	r3, [r4, #12]
 800e942:	07db      	lsls	r3, r3, #31
 800e944:	d506      	bpl.n	800e954 <__swbuf_r+0x6c>
 800e946:	2e0a      	cmp	r6, #10
 800e948:	d104      	bne.n	800e954 <__swbuf_r+0x6c>
 800e94a:	4621      	mov	r1, r4
 800e94c:	4628      	mov	r0, r5
 800e94e:	f000 f927 	bl	800eba0 <_fflush_r>
 800e952:	b988      	cbnz	r0, 800e978 <__swbuf_r+0x90>
 800e954:	4638      	mov	r0, r7
 800e956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e958:	4b0a      	ldr	r3, [pc, #40]	; (800e984 <__swbuf_r+0x9c>)
 800e95a:	429c      	cmp	r4, r3
 800e95c:	d101      	bne.n	800e962 <__swbuf_r+0x7a>
 800e95e:	68ac      	ldr	r4, [r5, #8]
 800e960:	e7cf      	b.n	800e902 <__swbuf_r+0x1a>
 800e962:	4b09      	ldr	r3, [pc, #36]	; (800e988 <__swbuf_r+0xa0>)
 800e964:	429c      	cmp	r4, r3
 800e966:	bf08      	it	eq
 800e968:	68ec      	ldreq	r4, [r5, #12]
 800e96a:	e7ca      	b.n	800e902 <__swbuf_r+0x1a>
 800e96c:	4621      	mov	r1, r4
 800e96e:	4628      	mov	r0, r5
 800e970:	f000 f81a 	bl	800e9a8 <__swsetup_r>
 800e974:	2800      	cmp	r0, #0
 800e976:	d0cb      	beq.n	800e910 <__swbuf_r+0x28>
 800e978:	f04f 37ff 	mov.w	r7, #4294967295
 800e97c:	e7ea      	b.n	800e954 <__swbuf_r+0x6c>
 800e97e:	bf00      	nop
 800e980:	0800f574 	.word	0x0800f574
 800e984:	0800f594 	.word	0x0800f594
 800e988:	0800f554 	.word	0x0800f554

0800e98c <__ascii_wctomb>:
 800e98c:	b149      	cbz	r1, 800e9a2 <__ascii_wctomb+0x16>
 800e98e:	2aff      	cmp	r2, #255	; 0xff
 800e990:	bf85      	ittet	hi
 800e992:	238a      	movhi	r3, #138	; 0x8a
 800e994:	6003      	strhi	r3, [r0, #0]
 800e996:	700a      	strbls	r2, [r1, #0]
 800e998:	f04f 30ff 	movhi.w	r0, #4294967295
 800e99c:	bf98      	it	ls
 800e99e:	2001      	movls	r0, #1
 800e9a0:	4770      	bx	lr
 800e9a2:	4608      	mov	r0, r1
 800e9a4:	4770      	bx	lr
	...

0800e9a8 <__swsetup_r>:
 800e9a8:	4b32      	ldr	r3, [pc, #200]	; (800ea74 <__swsetup_r+0xcc>)
 800e9aa:	b570      	push	{r4, r5, r6, lr}
 800e9ac:	681d      	ldr	r5, [r3, #0]
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	b125      	cbz	r5, 800e9be <__swsetup_r+0x16>
 800e9b4:	69ab      	ldr	r3, [r5, #24]
 800e9b6:	b913      	cbnz	r3, 800e9be <__swsetup_r+0x16>
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	f000 f985 	bl	800ecc8 <__sinit>
 800e9be:	4b2e      	ldr	r3, [pc, #184]	; (800ea78 <__swsetup_r+0xd0>)
 800e9c0:	429c      	cmp	r4, r3
 800e9c2:	d10f      	bne.n	800e9e4 <__swsetup_r+0x3c>
 800e9c4:	686c      	ldr	r4, [r5, #4]
 800e9c6:	89a3      	ldrh	r3, [r4, #12]
 800e9c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9cc:	0719      	lsls	r1, r3, #28
 800e9ce:	d42c      	bmi.n	800ea2a <__swsetup_r+0x82>
 800e9d0:	06dd      	lsls	r5, r3, #27
 800e9d2:	d411      	bmi.n	800e9f8 <__swsetup_r+0x50>
 800e9d4:	2309      	movs	r3, #9
 800e9d6:	6033      	str	r3, [r6, #0]
 800e9d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9dc:	81a3      	strh	r3, [r4, #12]
 800e9de:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e2:	e03e      	b.n	800ea62 <__swsetup_r+0xba>
 800e9e4:	4b25      	ldr	r3, [pc, #148]	; (800ea7c <__swsetup_r+0xd4>)
 800e9e6:	429c      	cmp	r4, r3
 800e9e8:	d101      	bne.n	800e9ee <__swsetup_r+0x46>
 800e9ea:	68ac      	ldr	r4, [r5, #8]
 800e9ec:	e7eb      	b.n	800e9c6 <__swsetup_r+0x1e>
 800e9ee:	4b24      	ldr	r3, [pc, #144]	; (800ea80 <__swsetup_r+0xd8>)
 800e9f0:	429c      	cmp	r4, r3
 800e9f2:	bf08      	it	eq
 800e9f4:	68ec      	ldreq	r4, [r5, #12]
 800e9f6:	e7e6      	b.n	800e9c6 <__swsetup_r+0x1e>
 800e9f8:	0758      	lsls	r0, r3, #29
 800e9fa:	d512      	bpl.n	800ea22 <__swsetup_r+0x7a>
 800e9fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9fe:	b141      	cbz	r1, 800ea12 <__swsetup_r+0x6a>
 800ea00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea04:	4299      	cmp	r1, r3
 800ea06:	d002      	beq.n	800ea0e <__swsetup_r+0x66>
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f7ff fb6f 	bl	800e0ec <_free_r>
 800ea0e:	2300      	movs	r3, #0
 800ea10:	6363      	str	r3, [r4, #52]	; 0x34
 800ea12:	89a3      	ldrh	r3, [r4, #12]
 800ea14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ea18:	81a3      	strh	r3, [r4, #12]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	6063      	str	r3, [r4, #4]
 800ea1e:	6923      	ldr	r3, [r4, #16]
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	89a3      	ldrh	r3, [r4, #12]
 800ea24:	f043 0308 	orr.w	r3, r3, #8
 800ea28:	81a3      	strh	r3, [r4, #12]
 800ea2a:	6923      	ldr	r3, [r4, #16]
 800ea2c:	b94b      	cbnz	r3, 800ea42 <__swsetup_r+0x9a>
 800ea2e:	89a3      	ldrh	r3, [r4, #12]
 800ea30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea38:	d003      	beq.n	800ea42 <__swsetup_r+0x9a>
 800ea3a:	4621      	mov	r1, r4
 800ea3c:	4630      	mov	r0, r6
 800ea3e:	f000 fa07 	bl	800ee50 <__smakebuf_r>
 800ea42:	89a0      	ldrh	r0, [r4, #12]
 800ea44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea48:	f010 0301 	ands.w	r3, r0, #1
 800ea4c:	d00a      	beq.n	800ea64 <__swsetup_r+0xbc>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	60a3      	str	r3, [r4, #8]
 800ea52:	6963      	ldr	r3, [r4, #20]
 800ea54:	425b      	negs	r3, r3
 800ea56:	61a3      	str	r3, [r4, #24]
 800ea58:	6923      	ldr	r3, [r4, #16]
 800ea5a:	b943      	cbnz	r3, 800ea6e <__swsetup_r+0xc6>
 800ea5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea60:	d1ba      	bne.n	800e9d8 <__swsetup_r+0x30>
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	0781      	lsls	r1, r0, #30
 800ea66:	bf58      	it	pl
 800ea68:	6963      	ldrpl	r3, [r4, #20]
 800ea6a:	60a3      	str	r3, [r4, #8]
 800ea6c:	e7f4      	b.n	800ea58 <__swsetup_r+0xb0>
 800ea6e:	2000      	movs	r0, #0
 800ea70:	e7f7      	b.n	800ea62 <__swsetup_r+0xba>
 800ea72:	bf00      	nop
 800ea74:	24000020 	.word	0x24000020
 800ea78:	0800f574 	.word	0x0800f574
 800ea7c:	0800f594 	.word	0x0800f594
 800ea80:	0800f554 	.word	0x0800f554

0800ea84 <abort>:
 800ea84:	b508      	push	{r3, lr}
 800ea86:	2006      	movs	r0, #6
 800ea88:	f000 fa52 	bl	800ef30 <raise>
 800ea8c:	2001      	movs	r0, #1
 800ea8e:	f7f3 fb21 	bl	80020d4 <_exit>
	...

0800ea94 <__sflush_r>:
 800ea94:	898a      	ldrh	r2, [r1, #12]
 800ea96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9a:	4605      	mov	r5, r0
 800ea9c:	0710      	lsls	r0, r2, #28
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	d458      	bmi.n	800eb54 <__sflush_r+0xc0>
 800eaa2:	684b      	ldr	r3, [r1, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dc05      	bgt.n	800eab4 <__sflush_r+0x20>
 800eaa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	dc02      	bgt.n	800eab4 <__sflush_r+0x20>
 800eaae:	2000      	movs	r0, #0
 800eab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eab6:	2e00      	cmp	r6, #0
 800eab8:	d0f9      	beq.n	800eaae <__sflush_r+0x1a>
 800eaba:	2300      	movs	r3, #0
 800eabc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eac0:	682f      	ldr	r7, [r5, #0]
 800eac2:	602b      	str	r3, [r5, #0]
 800eac4:	d032      	beq.n	800eb2c <__sflush_r+0x98>
 800eac6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eac8:	89a3      	ldrh	r3, [r4, #12]
 800eaca:	075a      	lsls	r2, r3, #29
 800eacc:	d505      	bpl.n	800eada <__sflush_r+0x46>
 800eace:	6863      	ldr	r3, [r4, #4]
 800ead0:	1ac0      	subs	r0, r0, r3
 800ead2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ead4:	b10b      	cbz	r3, 800eada <__sflush_r+0x46>
 800ead6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ead8:	1ac0      	subs	r0, r0, r3
 800eada:	2300      	movs	r3, #0
 800eadc:	4602      	mov	r2, r0
 800eade:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eae0:	6a21      	ldr	r1, [r4, #32]
 800eae2:	4628      	mov	r0, r5
 800eae4:	47b0      	blx	r6
 800eae6:	1c43      	adds	r3, r0, #1
 800eae8:	89a3      	ldrh	r3, [r4, #12]
 800eaea:	d106      	bne.n	800eafa <__sflush_r+0x66>
 800eaec:	6829      	ldr	r1, [r5, #0]
 800eaee:	291d      	cmp	r1, #29
 800eaf0:	d82c      	bhi.n	800eb4c <__sflush_r+0xb8>
 800eaf2:	4a2a      	ldr	r2, [pc, #168]	; (800eb9c <__sflush_r+0x108>)
 800eaf4:	40ca      	lsrs	r2, r1
 800eaf6:	07d6      	lsls	r6, r2, #31
 800eaf8:	d528      	bpl.n	800eb4c <__sflush_r+0xb8>
 800eafa:	2200      	movs	r2, #0
 800eafc:	6062      	str	r2, [r4, #4]
 800eafe:	04d9      	lsls	r1, r3, #19
 800eb00:	6922      	ldr	r2, [r4, #16]
 800eb02:	6022      	str	r2, [r4, #0]
 800eb04:	d504      	bpl.n	800eb10 <__sflush_r+0x7c>
 800eb06:	1c42      	adds	r2, r0, #1
 800eb08:	d101      	bne.n	800eb0e <__sflush_r+0x7a>
 800eb0a:	682b      	ldr	r3, [r5, #0]
 800eb0c:	b903      	cbnz	r3, 800eb10 <__sflush_r+0x7c>
 800eb0e:	6560      	str	r0, [r4, #84]	; 0x54
 800eb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eb12:	602f      	str	r7, [r5, #0]
 800eb14:	2900      	cmp	r1, #0
 800eb16:	d0ca      	beq.n	800eaae <__sflush_r+0x1a>
 800eb18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eb1c:	4299      	cmp	r1, r3
 800eb1e:	d002      	beq.n	800eb26 <__sflush_r+0x92>
 800eb20:	4628      	mov	r0, r5
 800eb22:	f7ff fae3 	bl	800e0ec <_free_r>
 800eb26:	2000      	movs	r0, #0
 800eb28:	6360      	str	r0, [r4, #52]	; 0x34
 800eb2a:	e7c1      	b.n	800eab0 <__sflush_r+0x1c>
 800eb2c:	6a21      	ldr	r1, [r4, #32]
 800eb2e:	2301      	movs	r3, #1
 800eb30:	4628      	mov	r0, r5
 800eb32:	47b0      	blx	r6
 800eb34:	1c41      	adds	r1, r0, #1
 800eb36:	d1c7      	bne.n	800eac8 <__sflush_r+0x34>
 800eb38:	682b      	ldr	r3, [r5, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d0c4      	beq.n	800eac8 <__sflush_r+0x34>
 800eb3e:	2b1d      	cmp	r3, #29
 800eb40:	d001      	beq.n	800eb46 <__sflush_r+0xb2>
 800eb42:	2b16      	cmp	r3, #22
 800eb44:	d101      	bne.n	800eb4a <__sflush_r+0xb6>
 800eb46:	602f      	str	r7, [r5, #0]
 800eb48:	e7b1      	b.n	800eaae <__sflush_r+0x1a>
 800eb4a:	89a3      	ldrh	r3, [r4, #12]
 800eb4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb50:	81a3      	strh	r3, [r4, #12]
 800eb52:	e7ad      	b.n	800eab0 <__sflush_r+0x1c>
 800eb54:	690f      	ldr	r7, [r1, #16]
 800eb56:	2f00      	cmp	r7, #0
 800eb58:	d0a9      	beq.n	800eaae <__sflush_r+0x1a>
 800eb5a:	0793      	lsls	r3, r2, #30
 800eb5c:	680e      	ldr	r6, [r1, #0]
 800eb5e:	bf08      	it	eq
 800eb60:	694b      	ldreq	r3, [r1, #20]
 800eb62:	600f      	str	r7, [r1, #0]
 800eb64:	bf18      	it	ne
 800eb66:	2300      	movne	r3, #0
 800eb68:	eba6 0807 	sub.w	r8, r6, r7
 800eb6c:	608b      	str	r3, [r1, #8]
 800eb6e:	f1b8 0f00 	cmp.w	r8, #0
 800eb72:	dd9c      	ble.n	800eaae <__sflush_r+0x1a>
 800eb74:	6a21      	ldr	r1, [r4, #32]
 800eb76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eb78:	4643      	mov	r3, r8
 800eb7a:	463a      	mov	r2, r7
 800eb7c:	4628      	mov	r0, r5
 800eb7e:	47b0      	blx	r6
 800eb80:	2800      	cmp	r0, #0
 800eb82:	dc06      	bgt.n	800eb92 <__sflush_r+0xfe>
 800eb84:	89a3      	ldrh	r3, [r4, #12]
 800eb86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb8a:	81a3      	strh	r3, [r4, #12]
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb90:	e78e      	b.n	800eab0 <__sflush_r+0x1c>
 800eb92:	4407      	add	r7, r0
 800eb94:	eba8 0800 	sub.w	r8, r8, r0
 800eb98:	e7e9      	b.n	800eb6e <__sflush_r+0xda>
 800eb9a:	bf00      	nop
 800eb9c:	20400001 	.word	0x20400001

0800eba0 <_fflush_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	690b      	ldr	r3, [r1, #16]
 800eba4:	4605      	mov	r5, r0
 800eba6:	460c      	mov	r4, r1
 800eba8:	b913      	cbnz	r3, 800ebb0 <_fflush_r+0x10>
 800ebaa:	2500      	movs	r5, #0
 800ebac:	4628      	mov	r0, r5
 800ebae:	bd38      	pop	{r3, r4, r5, pc}
 800ebb0:	b118      	cbz	r0, 800ebba <_fflush_r+0x1a>
 800ebb2:	6983      	ldr	r3, [r0, #24]
 800ebb4:	b90b      	cbnz	r3, 800ebba <_fflush_r+0x1a>
 800ebb6:	f000 f887 	bl	800ecc8 <__sinit>
 800ebba:	4b14      	ldr	r3, [pc, #80]	; (800ec0c <_fflush_r+0x6c>)
 800ebbc:	429c      	cmp	r4, r3
 800ebbe:	d11b      	bne.n	800ebf8 <_fflush_r+0x58>
 800ebc0:	686c      	ldr	r4, [r5, #4]
 800ebc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d0ef      	beq.n	800ebaa <_fflush_r+0xa>
 800ebca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ebcc:	07d0      	lsls	r0, r2, #31
 800ebce:	d404      	bmi.n	800ebda <_fflush_r+0x3a>
 800ebd0:	0599      	lsls	r1, r3, #22
 800ebd2:	d402      	bmi.n	800ebda <_fflush_r+0x3a>
 800ebd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebd6:	f000 f915 	bl	800ee04 <__retarget_lock_acquire_recursive>
 800ebda:	4628      	mov	r0, r5
 800ebdc:	4621      	mov	r1, r4
 800ebde:	f7ff ff59 	bl	800ea94 <__sflush_r>
 800ebe2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebe4:	07da      	lsls	r2, r3, #31
 800ebe6:	4605      	mov	r5, r0
 800ebe8:	d4e0      	bmi.n	800ebac <_fflush_r+0xc>
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	059b      	lsls	r3, r3, #22
 800ebee:	d4dd      	bmi.n	800ebac <_fflush_r+0xc>
 800ebf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebf2:	f000 f908 	bl	800ee06 <__retarget_lock_release_recursive>
 800ebf6:	e7d9      	b.n	800ebac <_fflush_r+0xc>
 800ebf8:	4b05      	ldr	r3, [pc, #20]	; (800ec10 <_fflush_r+0x70>)
 800ebfa:	429c      	cmp	r4, r3
 800ebfc:	d101      	bne.n	800ec02 <_fflush_r+0x62>
 800ebfe:	68ac      	ldr	r4, [r5, #8]
 800ec00:	e7df      	b.n	800ebc2 <_fflush_r+0x22>
 800ec02:	4b04      	ldr	r3, [pc, #16]	; (800ec14 <_fflush_r+0x74>)
 800ec04:	429c      	cmp	r4, r3
 800ec06:	bf08      	it	eq
 800ec08:	68ec      	ldreq	r4, [r5, #12]
 800ec0a:	e7da      	b.n	800ebc2 <_fflush_r+0x22>
 800ec0c:	0800f574 	.word	0x0800f574
 800ec10:	0800f594 	.word	0x0800f594
 800ec14:	0800f554 	.word	0x0800f554

0800ec18 <std>:
 800ec18:	2300      	movs	r3, #0
 800ec1a:	b510      	push	{r4, lr}
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	e9c0 3300 	strd	r3, r3, [r0]
 800ec22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec26:	6083      	str	r3, [r0, #8]
 800ec28:	8181      	strh	r1, [r0, #12]
 800ec2a:	6643      	str	r3, [r0, #100]	; 0x64
 800ec2c:	81c2      	strh	r2, [r0, #14]
 800ec2e:	6183      	str	r3, [r0, #24]
 800ec30:	4619      	mov	r1, r3
 800ec32:	2208      	movs	r2, #8
 800ec34:	305c      	adds	r0, #92	; 0x5c
 800ec36:	f7fd fc37 	bl	800c4a8 <memset>
 800ec3a:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <std+0x38>)
 800ec3c:	6263      	str	r3, [r4, #36]	; 0x24
 800ec3e:	4b05      	ldr	r3, [pc, #20]	; (800ec54 <std+0x3c>)
 800ec40:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec42:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <std+0x40>)
 800ec44:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec46:	4b05      	ldr	r3, [pc, #20]	; (800ec5c <std+0x44>)
 800ec48:	6224      	str	r4, [r4, #32]
 800ec4a:	6323      	str	r3, [r4, #48]	; 0x30
 800ec4c:	bd10      	pop	{r4, pc}
 800ec4e:	bf00      	nop
 800ec50:	0800ef69 	.word	0x0800ef69
 800ec54:	0800ef8b 	.word	0x0800ef8b
 800ec58:	0800efc3 	.word	0x0800efc3
 800ec5c:	0800efe7 	.word	0x0800efe7

0800ec60 <_cleanup_r>:
 800ec60:	4901      	ldr	r1, [pc, #4]	; (800ec68 <_cleanup_r+0x8>)
 800ec62:	f000 b8af 	b.w	800edc4 <_fwalk_reent>
 800ec66:	bf00      	nop
 800ec68:	0800eba1 	.word	0x0800eba1

0800ec6c <__sfmoreglue>:
 800ec6c:	b570      	push	{r4, r5, r6, lr}
 800ec6e:	1e4a      	subs	r2, r1, #1
 800ec70:	2568      	movs	r5, #104	; 0x68
 800ec72:	4355      	muls	r5, r2
 800ec74:	460e      	mov	r6, r1
 800ec76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ec7a:	f7ff fa87 	bl	800e18c <_malloc_r>
 800ec7e:	4604      	mov	r4, r0
 800ec80:	b140      	cbz	r0, 800ec94 <__sfmoreglue+0x28>
 800ec82:	2100      	movs	r1, #0
 800ec84:	e9c0 1600 	strd	r1, r6, [r0]
 800ec88:	300c      	adds	r0, #12
 800ec8a:	60a0      	str	r0, [r4, #8]
 800ec8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ec90:	f7fd fc0a 	bl	800c4a8 <memset>
 800ec94:	4620      	mov	r0, r4
 800ec96:	bd70      	pop	{r4, r5, r6, pc}

0800ec98 <__sfp_lock_acquire>:
 800ec98:	4801      	ldr	r0, [pc, #4]	; (800eca0 <__sfp_lock_acquire+0x8>)
 800ec9a:	f000 b8b3 	b.w	800ee04 <__retarget_lock_acquire_recursive>
 800ec9e:	bf00      	nop
 800eca0:	240009b4 	.word	0x240009b4

0800eca4 <__sfp_lock_release>:
 800eca4:	4801      	ldr	r0, [pc, #4]	; (800ecac <__sfp_lock_release+0x8>)
 800eca6:	f000 b8ae 	b.w	800ee06 <__retarget_lock_release_recursive>
 800ecaa:	bf00      	nop
 800ecac:	240009b4 	.word	0x240009b4

0800ecb0 <__sinit_lock_acquire>:
 800ecb0:	4801      	ldr	r0, [pc, #4]	; (800ecb8 <__sinit_lock_acquire+0x8>)
 800ecb2:	f000 b8a7 	b.w	800ee04 <__retarget_lock_acquire_recursive>
 800ecb6:	bf00      	nop
 800ecb8:	240009af 	.word	0x240009af

0800ecbc <__sinit_lock_release>:
 800ecbc:	4801      	ldr	r0, [pc, #4]	; (800ecc4 <__sinit_lock_release+0x8>)
 800ecbe:	f000 b8a2 	b.w	800ee06 <__retarget_lock_release_recursive>
 800ecc2:	bf00      	nop
 800ecc4:	240009af 	.word	0x240009af

0800ecc8 <__sinit>:
 800ecc8:	b510      	push	{r4, lr}
 800ecca:	4604      	mov	r4, r0
 800eccc:	f7ff fff0 	bl	800ecb0 <__sinit_lock_acquire>
 800ecd0:	69a3      	ldr	r3, [r4, #24]
 800ecd2:	b11b      	cbz	r3, 800ecdc <__sinit+0x14>
 800ecd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd8:	f7ff bff0 	b.w	800ecbc <__sinit_lock_release>
 800ecdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ece0:	6523      	str	r3, [r4, #80]	; 0x50
 800ece2:	4b13      	ldr	r3, [pc, #76]	; (800ed30 <__sinit+0x68>)
 800ece4:	4a13      	ldr	r2, [pc, #76]	; (800ed34 <__sinit+0x6c>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ecea:	42a3      	cmp	r3, r4
 800ecec:	bf04      	itt	eq
 800ecee:	2301      	moveq	r3, #1
 800ecf0:	61a3      	streq	r3, [r4, #24]
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f000 f820 	bl	800ed38 <__sfp>
 800ecf8:	6060      	str	r0, [r4, #4]
 800ecfa:	4620      	mov	r0, r4
 800ecfc:	f000 f81c 	bl	800ed38 <__sfp>
 800ed00:	60a0      	str	r0, [r4, #8]
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 f818 	bl	800ed38 <__sfp>
 800ed08:	2200      	movs	r2, #0
 800ed0a:	60e0      	str	r0, [r4, #12]
 800ed0c:	2104      	movs	r1, #4
 800ed0e:	6860      	ldr	r0, [r4, #4]
 800ed10:	f7ff ff82 	bl	800ec18 <std>
 800ed14:	68a0      	ldr	r0, [r4, #8]
 800ed16:	2201      	movs	r2, #1
 800ed18:	2109      	movs	r1, #9
 800ed1a:	f7ff ff7d 	bl	800ec18 <std>
 800ed1e:	68e0      	ldr	r0, [r4, #12]
 800ed20:	2202      	movs	r2, #2
 800ed22:	2112      	movs	r1, #18
 800ed24:	f7ff ff78 	bl	800ec18 <std>
 800ed28:	2301      	movs	r3, #1
 800ed2a:	61a3      	str	r3, [r4, #24]
 800ed2c:	e7d2      	b.n	800ecd4 <__sinit+0xc>
 800ed2e:	bf00      	nop
 800ed30:	0800f1d0 	.word	0x0800f1d0
 800ed34:	0800ec61 	.word	0x0800ec61

0800ed38 <__sfp>:
 800ed38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed3a:	4607      	mov	r7, r0
 800ed3c:	f7ff ffac 	bl	800ec98 <__sfp_lock_acquire>
 800ed40:	4b1e      	ldr	r3, [pc, #120]	; (800edbc <__sfp+0x84>)
 800ed42:	681e      	ldr	r6, [r3, #0]
 800ed44:	69b3      	ldr	r3, [r6, #24]
 800ed46:	b913      	cbnz	r3, 800ed4e <__sfp+0x16>
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f7ff ffbd 	bl	800ecc8 <__sinit>
 800ed4e:	3648      	adds	r6, #72	; 0x48
 800ed50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ed54:	3b01      	subs	r3, #1
 800ed56:	d503      	bpl.n	800ed60 <__sfp+0x28>
 800ed58:	6833      	ldr	r3, [r6, #0]
 800ed5a:	b30b      	cbz	r3, 800eda0 <__sfp+0x68>
 800ed5c:	6836      	ldr	r6, [r6, #0]
 800ed5e:	e7f7      	b.n	800ed50 <__sfp+0x18>
 800ed60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ed64:	b9d5      	cbnz	r5, 800ed9c <__sfp+0x64>
 800ed66:	4b16      	ldr	r3, [pc, #88]	; (800edc0 <__sfp+0x88>)
 800ed68:	60e3      	str	r3, [r4, #12]
 800ed6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ed6e:	6665      	str	r5, [r4, #100]	; 0x64
 800ed70:	f000 f847 	bl	800ee02 <__retarget_lock_init_recursive>
 800ed74:	f7ff ff96 	bl	800eca4 <__sfp_lock_release>
 800ed78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ed7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ed80:	6025      	str	r5, [r4, #0]
 800ed82:	61a5      	str	r5, [r4, #24]
 800ed84:	2208      	movs	r2, #8
 800ed86:	4629      	mov	r1, r5
 800ed88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ed8c:	f7fd fb8c 	bl	800c4a8 <memset>
 800ed90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ed94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ed98:	4620      	mov	r0, r4
 800ed9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed9c:	3468      	adds	r4, #104	; 0x68
 800ed9e:	e7d9      	b.n	800ed54 <__sfp+0x1c>
 800eda0:	2104      	movs	r1, #4
 800eda2:	4638      	mov	r0, r7
 800eda4:	f7ff ff62 	bl	800ec6c <__sfmoreglue>
 800eda8:	4604      	mov	r4, r0
 800edaa:	6030      	str	r0, [r6, #0]
 800edac:	2800      	cmp	r0, #0
 800edae:	d1d5      	bne.n	800ed5c <__sfp+0x24>
 800edb0:	f7ff ff78 	bl	800eca4 <__sfp_lock_release>
 800edb4:	230c      	movs	r3, #12
 800edb6:	603b      	str	r3, [r7, #0]
 800edb8:	e7ee      	b.n	800ed98 <__sfp+0x60>
 800edba:	bf00      	nop
 800edbc:	0800f1d0 	.word	0x0800f1d0
 800edc0:	ffff0001 	.word	0xffff0001

0800edc4 <_fwalk_reent>:
 800edc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edc8:	4606      	mov	r6, r0
 800edca:	4688      	mov	r8, r1
 800edcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800edd0:	2700      	movs	r7, #0
 800edd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800edd6:	f1b9 0901 	subs.w	r9, r9, #1
 800edda:	d505      	bpl.n	800ede8 <_fwalk_reent+0x24>
 800eddc:	6824      	ldr	r4, [r4, #0]
 800edde:	2c00      	cmp	r4, #0
 800ede0:	d1f7      	bne.n	800edd2 <_fwalk_reent+0xe>
 800ede2:	4638      	mov	r0, r7
 800ede4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ede8:	89ab      	ldrh	r3, [r5, #12]
 800edea:	2b01      	cmp	r3, #1
 800edec:	d907      	bls.n	800edfe <_fwalk_reent+0x3a>
 800edee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edf2:	3301      	adds	r3, #1
 800edf4:	d003      	beq.n	800edfe <_fwalk_reent+0x3a>
 800edf6:	4629      	mov	r1, r5
 800edf8:	4630      	mov	r0, r6
 800edfa:	47c0      	blx	r8
 800edfc:	4307      	orrs	r7, r0
 800edfe:	3568      	adds	r5, #104	; 0x68
 800ee00:	e7e9      	b.n	800edd6 <_fwalk_reent+0x12>

0800ee02 <__retarget_lock_init_recursive>:
 800ee02:	4770      	bx	lr

0800ee04 <__retarget_lock_acquire_recursive>:
 800ee04:	4770      	bx	lr

0800ee06 <__retarget_lock_release_recursive>:
 800ee06:	4770      	bx	lr

0800ee08 <__swhatbuf_r>:
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	460e      	mov	r6, r1
 800ee0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee10:	2900      	cmp	r1, #0
 800ee12:	b096      	sub	sp, #88	; 0x58
 800ee14:	4614      	mov	r4, r2
 800ee16:	461d      	mov	r5, r3
 800ee18:	da07      	bge.n	800ee2a <__swhatbuf_r+0x22>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	602b      	str	r3, [r5, #0]
 800ee1e:	89b3      	ldrh	r3, [r6, #12]
 800ee20:	061a      	lsls	r2, r3, #24
 800ee22:	d410      	bmi.n	800ee46 <__swhatbuf_r+0x3e>
 800ee24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee28:	e00e      	b.n	800ee48 <__swhatbuf_r+0x40>
 800ee2a:	466a      	mov	r2, sp
 800ee2c:	f000 f902 	bl	800f034 <_fstat_r>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	dbf2      	blt.n	800ee1a <__swhatbuf_r+0x12>
 800ee34:	9a01      	ldr	r2, [sp, #4]
 800ee36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ee3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ee3e:	425a      	negs	r2, r3
 800ee40:	415a      	adcs	r2, r3
 800ee42:	602a      	str	r2, [r5, #0]
 800ee44:	e7ee      	b.n	800ee24 <__swhatbuf_r+0x1c>
 800ee46:	2340      	movs	r3, #64	; 0x40
 800ee48:	2000      	movs	r0, #0
 800ee4a:	6023      	str	r3, [r4, #0]
 800ee4c:	b016      	add	sp, #88	; 0x58
 800ee4e:	bd70      	pop	{r4, r5, r6, pc}

0800ee50 <__smakebuf_r>:
 800ee50:	898b      	ldrh	r3, [r1, #12]
 800ee52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ee54:	079d      	lsls	r5, r3, #30
 800ee56:	4606      	mov	r6, r0
 800ee58:	460c      	mov	r4, r1
 800ee5a:	d507      	bpl.n	800ee6c <__smakebuf_r+0x1c>
 800ee5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	6123      	str	r3, [r4, #16]
 800ee64:	2301      	movs	r3, #1
 800ee66:	6163      	str	r3, [r4, #20]
 800ee68:	b002      	add	sp, #8
 800ee6a:	bd70      	pop	{r4, r5, r6, pc}
 800ee6c:	ab01      	add	r3, sp, #4
 800ee6e:	466a      	mov	r2, sp
 800ee70:	f7ff ffca 	bl	800ee08 <__swhatbuf_r>
 800ee74:	9900      	ldr	r1, [sp, #0]
 800ee76:	4605      	mov	r5, r0
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7ff f987 	bl	800e18c <_malloc_r>
 800ee7e:	b948      	cbnz	r0, 800ee94 <__smakebuf_r+0x44>
 800ee80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee84:	059a      	lsls	r2, r3, #22
 800ee86:	d4ef      	bmi.n	800ee68 <__smakebuf_r+0x18>
 800ee88:	f023 0303 	bic.w	r3, r3, #3
 800ee8c:	f043 0302 	orr.w	r3, r3, #2
 800ee90:	81a3      	strh	r3, [r4, #12]
 800ee92:	e7e3      	b.n	800ee5c <__smakebuf_r+0xc>
 800ee94:	4b0d      	ldr	r3, [pc, #52]	; (800eecc <__smakebuf_r+0x7c>)
 800ee96:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee98:	89a3      	ldrh	r3, [r4, #12]
 800ee9a:	6020      	str	r0, [r4, #0]
 800ee9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eea0:	81a3      	strh	r3, [r4, #12]
 800eea2:	9b00      	ldr	r3, [sp, #0]
 800eea4:	6163      	str	r3, [r4, #20]
 800eea6:	9b01      	ldr	r3, [sp, #4]
 800eea8:	6120      	str	r0, [r4, #16]
 800eeaa:	b15b      	cbz	r3, 800eec4 <__smakebuf_r+0x74>
 800eeac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eeb0:	4630      	mov	r0, r6
 800eeb2:	f000 f8d1 	bl	800f058 <_isatty_r>
 800eeb6:	b128      	cbz	r0, 800eec4 <__smakebuf_r+0x74>
 800eeb8:	89a3      	ldrh	r3, [r4, #12]
 800eeba:	f023 0303 	bic.w	r3, r3, #3
 800eebe:	f043 0301 	orr.w	r3, r3, #1
 800eec2:	81a3      	strh	r3, [r4, #12]
 800eec4:	89a0      	ldrh	r0, [r4, #12]
 800eec6:	4305      	orrs	r5, r0
 800eec8:	81a5      	strh	r5, [r4, #12]
 800eeca:	e7cd      	b.n	800ee68 <__smakebuf_r+0x18>
 800eecc:	0800ec61 	.word	0x0800ec61

0800eed0 <_malloc_usable_size_r>:
 800eed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eed4:	1f18      	subs	r0, r3, #4
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	bfbc      	itt	lt
 800eeda:	580b      	ldrlt	r3, [r1, r0]
 800eedc:	18c0      	addlt	r0, r0, r3
 800eede:	4770      	bx	lr

0800eee0 <_raise_r>:
 800eee0:	291f      	cmp	r1, #31
 800eee2:	b538      	push	{r3, r4, r5, lr}
 800eee4:	4604      	mov	r4, r0
 800eee6:	460d      	mov	r5, r1
 800eee8:	d904      	bls.n	800eef4 <_raise_r+0x14>
 800eeea:	2316      	movs	r3, #22
 800eeec:	6003      	str	r3, [r0, #0]
 800eeee:	f04f 30ff 	mov.w	r0, #4294967295
 800eef2:	bd38      	pop	{r3, r4, r5, pc}
 800eef4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eef6:	b112      	cbz	r2, 800eefe <_raise_r+0x1e>
 800eef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eefc:	b94b      	cbnz	r3, 800ef12 <_raise_r+0x32>
 800eefe:	4620      	mov	r0, r4
 800ef00:	f000 f830 	bl	800ef64 <_getpid_r>
 800ef04:	462a      	mov	r2, r5
 800ef06:	4601      	mov	r1, r0
 800ef08:	4620      	mov	r0, r4
 800ef0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef0e:	f000 b817 	b.w	800ef40 <_kill_r>
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d00a      	beq.n	800ef2c <_raise_r+0x4c>
 800ef16:	1c59      	adds	r1, r3, #1
 800ef18:	d103      	bne.n	800ef22 <_raise_r+0x42>
 800ef1a:	2316      	movs	r3, #22
 800ef1c:	6003      	str	r3, [r0, #0]
 800ef1e:	2001      	movs	r0, #1
 800ef20:	e7e7      	b.n	800eef2 <_raise_r+0x12>
 800ef22:	2400      	movs	r4, #0
 800ef24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef28:	4628      	mov	r0, r5
 800ef2a:	4798      	blx	r3
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	e7e0      	b.n	800eef2 <_raise_r+0x12>

0800ef30 <raise>:
 800ef30:	4b02      	ldr	r3, [pc, #8]	; (800ef3c <raise+0xc>)
 800ef32:	4601      	mov	r1, r0
 800ef34:	6818      	ldr	r0, [r3, #0]
 800ef36:	f7ff bfd3 	b.w	800eee0 <_raise_r>
 800ef3a:	bf00      	nop
 800ef3c:	24000020 	.word	0x24000020

0800ef40 <_kill_r>:
 800ef40:	b538      	push	{r3, r4, r5, lr}
 800ef42:	4d07      	ldr	r5, [pc, #28]	; (800ef60 <_kill_r+0x20>)
 800ef44:	2300      	movs	r3, #0
 800ef46:	4604      	mov	r4, r0
 800ef48:	4608      	mov	r0, r1
 800ef4a:	4611      	mov	r1, r2
 800ef4c:	602b      	str	r3, [r5, #0]
 800ef4e:	f7f3 f8b1 	bl	80020b4 <_kill>
 800ef52:	1c43      	adds	r3, r0, #1
 800ef54:	d102      	bne.n	800ef5c <_kill_r+0x1c>
 800ef56:	682b      	ldr	r3, [r5, #0]
 800ef58:	b103      	cbz	r3, 800ef5c <_kill_r+0x1c>
 800ef5a:	6023      	str	r3, [r4, #0]
 800ef5c:	bd38      	pop	{r3, r4, r5, pc}
 800ef5e:	bf00      	nop
 800ef60:	240009a8 	.word	0x240009a8

0800ef64 <_getpid_r>:
 800ef64:	f7f3 b89e 	b.w	80020a4 <_getpid>

0800ef68 <__sread>:
 800ef68:	b510      	push	{r4, lr}
 800ef6a:	460c      	mov	r4, r1
 800ef6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef70:	f000 f894 	bl	800f09c <_read_r>
 800ef74:	2800      	cmp	r0, #0
 800ef76:	bfab      	itete	ge
 800ef78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ef7a:	89a3      	ldrhlt	r3, [r4, #12]
 800ef7c:	181b      	addge	r3, r3, r0
 800ef7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ef82:	bfac      	ite	ge
 800ef84:	6563      	strge	r3, [r4, #84]	; 0x54
 800ef86:	81a3      	strhlt	r3, [r4, #12]
 800ef88:	bd10      	pop	{r4, pc}

0800ef8a <__swrite>:
 800ef8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8e:	461f      	mov	r7, r3
 800ef90:	898b      	ldrh	r3, [r1, #12]
 800ef92:	05db      	lsls	r3, r3, #23
 800ef94:	4605      	mov	r5, r0
 800ef96:	460c      	mov	r4, r1
 800ef98:	4616      	mov	r6, r2
 800ef9a:	d505      	bpl.n	800efa8 <__swrite+0x1e>
 800ef9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa0:	2302      	movs	r3, #2
 800efa2:	2200      	movs	r2, #0
 800efa4:	f000 f868 	bl	800f078 <_lseek_r>
 800efa8:	89a3      	ldrh	r3, [r4, #12]
 800efaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efb2:	81a3      	strh	r3, [r4, #12]
 800efb4:	4632      	mov	r2, r6
 800efb6:	463b      	mov	r3, r7
 800efb8:	4628      	mov	r0, r5
 800efba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efbe:	f000 b817 	b.w	800eff0 <_write_r>

0800efc2 <__sseek>:
 800efc2:	b510      	push	{r4, lr}
 800efc4:	460c      	mov	r4, r1
 800efc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efca:	f000 f855 	bl	800f078 <_lseek_r>
 800efce:	1c43      	adds	r3, r0, #1
 800efd0:	89a3      	ldrh	r3, [r4, #12]
 800efd2:	bf15      	itete	ne
 800efd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800efd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800efda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800efde:	81a3      	strheq	r3, [r4, #12]
 800efe0:	bf18      	it	ne
 800efe2:	81a3      	strhne	r3, [r4, #12]
 800efe4:	bd10      	pop	{r4, pc}

0800efe6 <__sclose>:
 800efe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efea:	f000 b813 	b.w	800f014 <_close_r>
	...

0800eff0 <_write_r>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	4d07      	ldr	r5, [pc, #28]	; (800f010 <_write_r+0x20>)
 800eff4:	4604      	mov	r4, r0
 800eff6:	4608      	mov	r0, r1
 800eff8:	4611      	mov	r1, r2
 800effa:	2200      	movs	r2, #0
 800effc:	602a      	str	r2, [r5, #0]
 800effe:	461a      	mov	r2, r3
 800f000:	f7f3 f88f 	bl	8002122 <_write>
 800f004:	1c43      	adds	r3, r0, #1
 800f006:	d102      	bne.n	800f00e <_write_r+0x1e>
 800f008:	682b      	ldr	r3, [r5, #0]
 800f00a:	b103      	cbz	r3, 800f00e <_write_r+0x1e>
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	bd38      	pop	{r3, r4, r5, pc}
 800f010:	240009a8 	.word	0x240009a8

0800f014 <_close_r>:
 800f014:	b538      	push	{r3, r4, r5, lr}
 800f016:	4d06      	ldr	r5, [pc, #24]	; (800f030 <_close_r+0x1c>)
 800f018:	2300      	movs	r3, #0
 800f01a:	4604      	mov	r4, r0
 800f01c:	4608      	mov	r0, r1
 800f01e:	602b      	str	r3, [r5, #0]
 800f020:	f7f3 f89b 	bl	800215a <_close>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	d102      	bne.n	800f02e <_close_r+0x1a>
 800f028:	682b      	ldr	r3, [r5, #0]
 800f02a:	b103      	cbz	r3, 800f02e <_close_r+0x1a>
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	bd38      	pop	{r3, r4, r5, pc}
 800f030:	240009a8 	.word	0x240009a8

0800f034 <_fstat_r>:
 800f034:	b538      	push	{r3, r4, r5, lr}
 800f036:	4d07      	ldr	r5, [pc, #28]	; (800f054 <_fstat_r+0x20>)
 800f038:	2300      	movs	r3, #0
 800f03a:	4604      	mov	r4, r0
 800f03c:	4608      	mov	r0, r1
 800f03e:	4611      	mov	r1, r2
 800f040:	602b      	str	r3, [r5, #0]
 800f042:	f7f3 f896 	bl	8002172 <_fstat>
 800f046:	1c43      	adds	r3, r0, #1
 800f048:	d102      	bne.n	800f050 <_fstat_r+0x1c>
 800f04a:	682b      	ldr	r3, [r5, #0]
 800f04c:	b103      	cbz	r3, 800f050 <_fstat_r+0x1c>
 800f04e:	6023      	str	r3, [r4, #0]
 800f050:	bd38      	pop	{r3, r4, r5, pc}
 800f052:	bf00      	nop
 800f054:	240009a8 	.word	0x240009a8

0800f058 <_isatty_r>:
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4d06      	ldr	r5, [pc, #24]	; (800f074 <_isatty_r+0x1c>)
 800f05c:	2300      	movs	r3, #0
 800f05e:	4604      	mov	r4, r0
 800f060:	4608      	mov	r0, r1
 800f062:	602b      	str	r3, [r5, #0]
 800f064:	f7f3 f895 	bl	8002192 <_isatty>
 800f068:	1c43      	adds	r3, r0, #1
 800f06a:	d102      	bne.n	800f072 <_isatty_r+0x1a>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	b103      	cbz	r3, 800f072 <_isatty_r+0x1a>
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	bd38      	pop	{r3, r4, r5, pc}
 800f074:	240009a8 	.word	0x240009a8

0800f078 <_lseek_r>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	4d07      	ldr	r5, [pc, #28]	; (800f098 <_lseek_r+0x20>)
 800f07c:	4604      	mov	r4, r0
 800f07e:	4608      	mov	r0, r1
 800f080:	4611      	mov	r1, r2
 800f082:	2200      	movs	r2, #0
 800f084:	602a      	str	r2, [r5, #0]
 800f086:	461a      	mov	r2, r3
 800f088:	f7f3 f88e 	bl	80021a8 <_lseek>
 800f08c:	1c43      	adds	r3, r0, #1
 800f08e:	d102      	bne.n	800f096 <_lseek_r+0x1e>
 800f090:	682b      	ldr	r3, [r5, #0]
 800f092:	b103      	cbz	r3, 800f096 <_lseek_r+0x1e>
 800f094:	6023      	str	r3, [r4, #0]
 800f096:	bd38      	pop	{r3, r4, r5, pc}
 800f098:	240009a8 	.word	0x240009a8

0800f09c <_read_r>:
 800f09c:	b538      	push	{r3, r4, r5, lr}
 800f09e:	4d07      	ldr	r5, [pc, #28]	; (800f0bc <_read_r+0x20>)
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	4608      	mov	r0, r1
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	602a      	str	r2, [r5, #0]
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	f7f3 f81c 	bl	80020e8 <_read>
 800f0b0:	1c43      	adds	r3, r0, #1
 800f0b2:	d102      	bne.n	800f0ba <_read_r+0x1e>
 800f0b4:	682b      	ldr	r3, [r5, #0]
 800f0b6:	b103      	cbz	r3, 800f0ba <_read_r+0x1e>
 800f0b8:	6023      	str	r3, [r4, #0]
 800f0ba:	bd38      	pop	{r3, r4, r5, pc}
 800f0bc:	240009a8 	.word	0x240009a8

0800f0c0 <_init>:
 800f0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c2:	bf00      	nop
 800f0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0c6:	bc08      	pop	{r3}
 800f0c8:	469e      	mov	lr, r3
 800f0ca:	4770      	bx	lr

0800f0cc <_fini>:
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ce:	bf00      	nop
 800f0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0d2:	bc08      	pop	{r3}
 800f0d4:	469e      	mov	lr, r3
 800f0d6:	4770      	bx	lr
